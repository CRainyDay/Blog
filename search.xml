<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JDBC-DBUtils</title>
      <link href="/blog/JDBC1-10.html"/>
      <url>/blog/JDBC1-10.html</url>
      
        <content type="html"><![CDATA[<p>DBUtils——Apache下的一个JDBC开源工具类库</p><a id="more"></a><h2 id="1-Apache—DBUtils简介"><a href="#1-Apache—DBUtils简介" class="headerlink" title="1.Apache—DBUtils简介"></a>1.Apache—DBUtils简介</h2><blockquote><ul><li><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能.</p></li><li><p>API介绍:</p></li></ul><p>&emsp;&emsp;–org.apache.commons.dbutils.QueryRunner</p><p>&emsp;&emsp;–org.apache.commons.dbutils.ResultSetHandler</p><p>&emsp;&emsp;–工具类: org.apache.commons.dbutils.DbUtils、…</p></blockquote><blockquote><ul><li>DbUtils类: 提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下:</li></ul><p>&emsp;&emsp;–public static void close(…) throws java.sql.SQLException：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet.</p><p>&emsp;&emsp;–public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception.</p><p>&emsp;&emsp;–public static void commitAndCloseQuietly(Connection conn)： 用来提交连接，然后关闭连接，并且在关闭连接时不抛出SQL异常.</p><p>&emsp;&emsp;–public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true. 使用该方法，你不需要捕捉这个异常ClassNotFoundException.</p></blockquote><h2 id="2-DBUtils的更新操作"><a href="#2-DBUtils的更新操作" class="headerlink" title="2.DBUtils的更新操作"></a>2.DBUtils的更新操作</h2><blockquote><p>通过QueryRunner类执行SQL语句, 并将结果集按指定要求返回.</p><ul><li><p>QueryRunner类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量.</p></li><li><p>QueryRunner类提供了两个构造方法:</p></li></ul><p>&emsp;&emsp;–默认的构造方法</p><p>&emsp;&emsp;–需要一个 javax.sql.DataSource 来作参数的构造方法.</p><ul><li><p>QueryRunner类的主要方法:</p><p>&emsp;&emsp;–public Object query(Connection conn, String sql, Object[] params, ResultSetHandler rsh) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭.</p><p>&emsp;&emsp;–public Object query(String sql, Object[] params, ResultSetHandler rsh) throws SQLException:　几乎与第一种方法一样；唯一的不同在于它不将数据库连接提供给方法，并且它是从提供给构造方法的数据源(DataSource) 或使用的setDataSource 方法中重新获得 Connection.</p><p>&emsp;&emsp;–public Object query(Connection conn, String sql, ResultSetHandler rsh) throws SQLException : 执行一个不需要置换参数的查询操作.</p><p>&emsp;&emsp;–public int update(Connection conn, String sql, Object[] params) throws SQLException:用来执行一个更新（插入、更新或删除）操作.</p><p>&emsp;&emsp;–public int update(Connection conn, String sql) throws SQLException：用来执行一个不需要置换参数的更新操作.</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDBUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 创建执行SQL的 QueryRunner 对象</span></span><br><span class="line">    QueryRunner qr = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">    <span class="comment">//2. 准备SQL语句,SQL可以是DELETE INSERT UPDATE操作</span></span><br><span class="line">    String sql = <span class="string">"delete from Student where id in (?,?)"</span>;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//4. 准备数据库连接</span></span><br><span class="line">        conn = JDBCTools.getConnection();</span><br><span class="line">        <span class="comment">//5. 传入相应参数,执行SQL</span></span><br><span class="line">        qr.update(conn, sql, <span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        JDBCTools.release(<span class="keyword">null</span>, <span class="keyword">null</span>, conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-DBUtils的查询操作"><a href="#3-DBUtils的查询操作" class="headerlink" title="3.DBUtils的查询操作"></a>3.DBUtils的查询操作</h2><blockquote><p>通过DBUtils的QueryRunner类的query()方法实现数据库查询, 但是这里要给query方法的第三个参数传一个 ResultSetHandler 接口的实现类.</p><ul><li><p>该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式.</p></li><li><p>ResultSetHandler 接口提供了一个单独的方法: Object handle (java.sql.ResultSet .rs), 处理结果集时就是调用的该方法, 且query()方法的返回值就是 ResultSetHandler 实现类的 handle() 方法的返回值.</p></li></ul></blockquote><blockquote><p>DBUtils提供的 ResultSetHandler 的实现类:</p><ul><li><p>BeanHandler：将结果集中的第一行数据封装到一个对应的JavaBean实例中.</p></li><li><p>BeanListHandler：将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里.</p></li><li>MapHandler：将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值.</li><li>MapListHandler：将结果集中的每一行数据都封装到一个Map里，然后再存放到List.</li><li>ScalarHandler: 把结果集转换为一个值(该值可以是任意基本类型和String、Date 等)返回</li><li>ArrayHandler：把结果集中的第一行数据转成对象数组.</li><li>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中.</li><li>ColumnListHandler：将结果集中某一列的数据存放到List中。</li><li>KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key.</li></ul></blockquote><h3 id="A-BeanListHandler"><a href="#A-BeanListHandler" class="headerlink" title="A.BeanListHandler"></a>A.BeanListHandler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBeanListHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryRunner qr = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">    String sql = <span class="string">"SELECT id,name,email,birth date from Student where id in (?,?)"</span>;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = JDBCTools.getConnection();</span><br><span class="line">        List&lt;Student&gt; list = qr.query(conn, sql, <span class="keyword">new</span> BeanListHandler&lt;Student&gt;(Student.class),<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        JDBCTools.release(<span class="keyword">null</span>, <span class="keyword">null</span>, conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-MapListHandler"><a href="#B-MapListHandler" class="headerlink" title="B.MapListHandler"></a>B.MapListHandler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMapListHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryRunner qr = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">    String sql = <span class="string">"SELECT id,name,email,birth date from Student where id in (?,?)"</span>;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = JDBCTools.getConnection();</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; map = qr.query(conn, sql, <span class="keyword">new</span> MapListHandler(),<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        JDBCTools.release(<span class="keyword">null</span>, <span class="keyword">null</span>, conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-ScalarHandler"><a href="#C-ScalarHandler" class="headerlink" title="C.ScalarHandler"></a>C.ScalarHandler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testScalarHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryRunner qr = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">    String sql = <span class="string">"SELECT name,birth date from Student where id in (?,?)"</span>;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = JDBCTools.getConnection();</span><br><span class="line">        <span class="comment">//注意: 这个查询结果只是一个值</span></span><br><span class="line">        Object obj = qr.query(conn, sql, <span class="keyword">new</span> ScalarHandler&lt;&gt;(),<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        JDBCTools.release(<span class="keyword">null</span>, <span class="keyword">null</span>, conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> JavaSE </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC-数据库连接池</title>
      <link href="/blog/JDBC1-9.html"/>
      <url>/blog/JDBC1-9.html</url>
      
        <content type="html"><![CDATA[<p>JAVA——数据库连接池</p><a id="more"></a><h2 id="1-JDBC数据库连接池的必要性"><a href="#1-JDBC数据库连接池的必要性" class="headerlink" title="1.JDBC数据库连接池的必要性"></a>1.JDBC数据库连接池的必要性</h2><blockquote><ul><li>在使用开发基于数据库的web程序时，<strong>传统的模式</strong>基本是按以下步骤:</li></ul><p>–在主程序（如servlet、beans）中建立数据库连接.</p><p>–进行sql操作</p><p>–断开数据库连接</p><ul><li>这种模式开发，存在的问题:</li></ul><p>–普通的JDBC数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。<strong>数据库的连接资源并没有得到很好的重复利用</strong>.若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃.</p><p>–对于每一次数据库连接，使用完后都得断开。否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏，最终将导致重启数据库.</p><p>–这种开发不能控制被创建的连接对象数，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内存泄漏，服务器崩溃。 </p></blockquote><h2 id="2-数据库连接池"><a href="#2-数据库连接池" class="headerlink" title="2.数据库连接池"></a>2.数据库连接池</h2><blockquote><p>在真正的开发中, 我们几乎不用之前的方法获取数据库连接.</p><ul><li><p>为解决传统开发中的数据库连接问题，可以采用数据库连接池技术.</p></li><li><p>数据库连接池的<strong>基本思想</strong>就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去.</p></li><li><p><strong>数据库连接池</strong>负责分配、管理和释放数据库连接，它<strong>允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</strong>.</p></li><li><p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由<strong>最小数据库连接数来设定</strong>的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的<strong>最大数据库连接数量</strong>限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中.</p></li></ul></blockquote><blockquote><p>数据库连接池的优点:</p><p>-1. 资源重用</p><p>-2. 更快的系统反应速度</p><p>-3. 新的资源分配手段</p><p>-4. 统一的连接管理，避免数据库连接泄露</p></blockquote><p><img src="imgs\Java\JDBC_15.png" alt="JDBC_15"></p><blockquote><p>两种常用的开源数据库连接池:</p><ul><li>JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现：</li></ul><p>–DBCP 数据库连接池</p><p>–C3P0 数据库连接池</p><ul><li>DataSource 通常被称为数据源，它包含连接池和连接池管理两个部分，习惯上也经常把 DataSource 称为连接池</li></ul></blockquote><font style="color:red;font-size:1.2em;">注意: 使用数据库连接池后 ,在关闭数据库连接池返回的Connection对象时, 并不是真正的把数据库连接关闭, 而是将该连接还给数据库连接池.</font><h2 id="3-DBCP数据源"><a href="#3-DBCP数据源" class="headerlink" title="3.DBCP数据源"></a>3.DBCP数据源</h2><blockquote><p>DBCP数据源即DBCP数据库连接池</p><p>•DBCP 是 Apache 软件基金组织下的开源连接池实现，该连接池依赖该组织下的另一个开源系统：Common-pool. 如需使用该连接池实现，应在系统中增加如下两个 jar 文件:</p><p>–Commons-dbcp.jar：连接池的实现</p><p>–Commons-pool.jar：连接池实现的依赖库</p><p>•Tomcat 的连接池正是采用该连接池来实现的, 该数据库连接池既可以与应用服务器整合使用，也可由应用程序独立使用.</p></blockquote><h3 id="A-通过BasicDataSource"><a href="#A-通过BasicDataSource" class="headerlink" title="A.通过BasicDataSource"></a>A.通过BasicDataSource</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp2.BasicDataSource;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1. 创建 DBCP 数据源实例</span></span><br><span class="line">BasicDataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line">dataSource = <span class="keyword">new</span> BasicDataSource();</span><br><span class="line"><span class="comment">//2. 为数据源实例指定必需的属性值</span></span><br><span class="line">dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line">dataSource.setUrl(<span class="string">"jdbc:sqlserver://localhost:1433;DatabaseName=SPJDB"</span>);</span><br><span class="line">dataSource.setDriverClassName(<span class="string">"com.microsoft.sqlserver.jdbc.SQLServerDriver"</span>);</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//3. 为数据源指定一些可选的属性值</span></span><br><span class="line"><span class="comment">//1) 指定数据库连接池中初始化连接数的个数</span></span><br><span class="line">dataSource.setInitialSize(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//2) 指定最小连接数: 在数据库连接池中保存的最少的空闲连接的数量</span></span><br><span class="line">dataSource.setMinIdle(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//3) 等待数据库连接池分配连接的最长时间(ms). 超时将出现异常</span></span><br><span class="line">dataSource.setMaxWaitMillis(<span class="number">5000</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//4. 从数据源中获取数据库连接</span></span><br><span class="line">conn = dataSource.getConnection();</span><br><span class="line">System.out.println(conn.getClass());</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dataSource != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dataSource.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-通过DataSourceFactory"><a href="#B-通过DataSourceFactory" class="headerlink" title="B.通过DataSourceFactory"></a>B.通过DataSourceFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1. 加载 dbcp 的properties配置文件: 文件中的键需要来自 BasicDataSource 的属性</span></span><br><span class="line"><span class="comment"> *2. 调用 BasicDataSourceFactory 的 createDataSource 方法创建 DataSource 实例</span></span><br><span class="line"><span class="comment"> *3. 从 DataSource 实例中获取数据库连接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDataSourceFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//注意dbcp.properties在项目的src目录下</span></span><br><span class="line">    InputStream inStream = test.class.getClassLoader()</span><br><span class="line">        .getResourceAsStream(<span class="string">"dbcp.properties"</span>);</span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    properties.load(inStream);</span><br><span class="line">    DataSource dataSource = <span class="keyword">null</span>;</span><br><span class="line">    dataSource = BasicDataSourceFactory.createDataSource(properties);</span><br><span class="line">    System.out.println(dataSource.getConnection());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#dbcp.properties:</span><br><span class="line">driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver</span><br><span class="line">url=jdbc:sqlserver://localhost:1433;DatabaseName=SPJDB</span><br><span class="line">username=root</span><br><span class="line">password=root</span><br><span class="line">initialSize=10</span><br><span class="line">minIdle=5</span><br><span class="line">maxWaitMillis=5000</span><br></pre></td></tr></table></figure><h2 id="4-C3P0数据源"><a href="#4-C3P0数据源" class="headerlink" title="4.C3P0数据源"></a>4.C3P0数据源</h2><blockquote><p>需要的外部jar包:</p><p>-1. c3p0-0.9.5.2.jar</p><p>-2. mchange-commons-java-0.2.12.jar</p></blockquote><h3 id="A-不使用配置文件"><a href="#A-不使用配置文件" class="headerlink" title="A.不使用配置文件"></a>A.不使用配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testC3P0</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ComboPooledDataSource cpds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">    cpds.setDriverClass( <span class="string">"com.microsoft.sqlserver.jdbc.SQLServerDriver"</span> );</span><br><span class="line">    cpds.setJdbcUrl( <span class="string">"jdbc:sqlserver://localhost:1433;DatabaseName=SPJDB"</span> );</span><br><span class="line">    cpds.setUser(<span class="string">"root"</span>);</span><br><span class="line">    cpds.setPassword(<span class="string">"root"</span>);</span><br><span class="line">    System.out.println(cpds.getConnection());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-使用配置文件"><a href="#B-使用配置文件" class="headerlink" title="B.使用配置文件"></a>B.使用配置文件</h3><blockquote><p>可以使用 properties 配置文件, 也可以使用 xml 配置文件, 建议使用 xml 文件</p><p>xml 文件名为: c3p0-config.xml, 该xml文件在项目的src目录下</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">"helloc3p0"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定数据源的基本属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.microsoft.sqlserver.jdbc.SQLServerDriver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:sqlserver://localhost:1433;DatabaseName=SPJDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 若数据库中连接数不足时,一次向数据库服务器申请多少个连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 初始化数据库连接池时连接的数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>50<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池中的最小的数据库连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>50<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池中的最大的数据库连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- C3P0数据库连接池可以维护的Statement的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 每个连接同时可以使用的Statement对象的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatementsPerConnection"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testC3P0</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    DataSource ds = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">"helloc3p0"</span>);</span><br><span class="line">    System.out.println(ds.getConnection());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-重构JDBCTools类"><a href="#5-重构JDBCTools类" class="headerlink" title="5.重构JDBCTools类"></a>5.重构JDBCTools类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 操作 JDBC 的工具类,封装了一些常用的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTools</span> </span>&#123;</span><br><span class="line">    <span class="comment">//数据库连接池</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DataSource ds = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">ds = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">"helloc3p0"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取数据库连接:</span></span><br><span class="line"><span class="comment"> * 通过读取配置文件,根据配置信息从数据库服务器获取一个连接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ds.getConnection();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开始事务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beginTx</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提交事务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回滚事务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.rollback();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭 ResultSet Statement 和 Connection 资源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> state</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(ResultSet rs,Statement state,Connection conn)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rs != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(state != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">state.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> JavaSE </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC-批处理</title>
      <link href="/blog/JDBC1-8.html"/>
      <url>/blog/JDBC1-8.html</url>
      
        <content type="html"><![CDATA[<p>批处理 JDBC 语句提高处理速度</p><a id="more"></a><blockquote><p>批处理:</p><p>向数据库表中插入n多条SQL语句, 如何处理一下, 提高执行的性能.</p></blockquote><p>先看一下几种方式的对比, 向表中插入10万条数据:</p><h2 id="1-只使用Statement"><a href="#1-只使用Statement" class="headerlink" title="1.只使用Statement"></a>1.只使用Statement</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JDBCTools.class:</span></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 操作 JDBC 的工具类,封装了一些常用的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTools</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取数据库连接:</span></span><br><span class="line"><span class="comment"> * 通过读取配置文件,根据配置信息从数据库服务器获取一个连接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">InputStream is = JDBCTools.class.getClassLoader().getResourceAsStream(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">pro.load(is);</span><br><span class="line">String url = pro.getProperty(<span class="string">"jdbc"</span>);</span><br><span class="line">String user = pro.getProperty(<span class="string">"user"</span>);</span><br><span class="line">String password = pro.getProperty(<span class="string">"password"</span>);</span><br><span class="line">Class.forName(pro.getProperty(<span class="string">"driver"</span>));</span><br><span class="line">Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开始事务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beginTx</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提交事务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回滚事务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.rollback();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭 ResultSet Statement 和 Connection 资源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> state</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(ResultSet rs,Statement state,Connection conn)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rs != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(state != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">state.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DAO.class:</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSetMetaData;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DAO</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的更新方法,包括: Insert Delete Update</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String sql, Object ... args)</span> </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement psmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1. 获取数据库连接</span></span><br><span class="line">conn = JDBCTools.getConnection();</span><br><span class="line">psmt = conn.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i ++) &#123;</span><br><span class="line">psmt.setObject(i+<span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2. 执行 SQL语句</span></span><br><span class="line">psmt.executeUpdate();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCTools.release(<span class="keyword">null</span>, psmt, conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的查询方法,SQL为select类型.</span></span><br><span class="line"><span class="comment"> * 查询结果最多是一行记录.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">get</span><span class="params">(Class&lt;T&gt; clazz, String sql, Object ... args)</span> </span>&#123;</span><br><span class="line">List&lt;T&gt; list = getForList(clazz, sql, args);</span><br><span class="line"><span class="keyword">if</span>(list.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的查询方法,SQL为select类型.</span></span><br><span class="line"><span class="comment"> * 查询结果可以为多行记录(0~n).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt;  <span class="title">getForList</span><span class="params">(Class&lt;T&gt; clazz, String sql, Object ... args)</span></span>&#123;</span><br><span class="line">List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement psmt = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = JDBCTools.getConnection();</span><br><span class="line">psmt = conn.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i ++) &#123;</span><br><span class="line">psmt.setObject(i+<span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1. 获取连接再获取结果集</span></span><br><span class="line">rs = psmt.executeQuery();</span><br><span class="line"><span class="comment">//2. 将结果集转换为Map的List</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; values = handleResultSetToMapList(rs);</span><br><span class="line"><span class="comment">//3. 将 Map 的List 转换为 JavaBean 对应的List</span></span><br><span class="line">list = transferMapListToBeanList(clazz, values);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询方法,结果为一行中的一列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">E <span class="title">getForValue</span><span class="params">(String sql, Object ... args)</span> </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement psmt = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = JDBCTools.getConnection();</span><br><span class="line">psmt = conn.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i ++) &#123;</span><br><span class="line">psmt.setObject(i+<span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line">rs = psmt.executeQuery();</span><br><span class="line"><span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line"><span class="keyword">return</span> (E)rs.getObject(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCTools.release(rs, psmt, conn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取结果集的 ColumnLabel 对应的 List</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getColumnLabels</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">List&lt;String&gt; labels = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; rsmd.getColumnCount();i++) &#123;</span><br><span class="line">labels.add(rsmd.getColumnLabel(i+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> labels;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理结果集得到一个 Map 的List, 其中一个 Map 代表一个记录.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Map&lt;String, Object&gt;&gt; handleResultSetToMapList(ResultSet rs) <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">List&lt;String&gt; labels = <span class="keyword">this</span>.getColumnLabels(rs);</span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; values = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(String key :labels) &#123;</span><br><span class="line">Object value = rs.getObject(key);</span><br><span class="line">map.put(key, value);</span><br><span class="line">&#125;</span><br><span class="line">values.add(map);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> values;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将 Map 的 List 转换为 JavaBean对象的 List</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> values</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InstantiationException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvocationTargetException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">transferMapListToBeanList</span><span class="params">(Class&lt;T&gt; clazz, List&lt;Map&lt;String, Object&gt;&gt; values)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> InstantiationException, IllegalAccessException, InvocationTargetException </span>&#123;</span><br><span class="line">List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">T bean = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(values.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(Map&lt;String,Object&gt; m:values) &#123;</span><br><span class="line">bean = clazz.newInstance();</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, Object&gt; entry:m.entrySet()) &#123;</span><br><span class="line">String propertyName = entry.getKey();</span><br><span class="line">Object propertyValue = entry.getValue();</span><br><span class="line">BeanUtils.setProperty(bean, propertyName, propertyValue);</span><br><span class="line">&#125;</span><br><span class="line">list.add(bean);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatchWithStatement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    Statement state = <span class="keyword">null</span>;</span><br><span class="line">    String sql = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = JDBCTools.getConnection();</span><br><span class="line">        JDBCTools.beginTx(conn);</span><br><span class="line">        state = conn.createStatement();</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100000</span>;i ++) &#123;</span><br><span class="line">            sql = <span class="string">"INSERT INTO Student VALUES("</span>+(i+<span class="number">1</span>)</span><br><span class="line">                +<span class="string">",'"</span>+<span class="string">"name_"</span>+i+<span class="string">"','alian@qq.com','1999-09-09')"</span>;</span><br><span class="line">            state.executeUpdate(sql);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"Time:"</span>+(end-begin));<span class="comment">//Time:30442 左右</span></span><br><span class="line">        JDBCTools.commit(conn);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        JDBCTools.rollback(conn);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        JDBCTools.release(<span class="keyword">null</span>, state, conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-只使用PreparedStatement"><a href="#2-只使用PreparedStatement" class="headerlink" title="2.只使用PreparedStatement"></a>2.只使用PreparedStatement</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatchWithPreparedStatement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement psmt = <span class="keyword">null</span>;</span><br><span class="line">    String sql = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = JDBCTools.getConnection();</span><br><span class="line">        JDBCTools.beginTx(conn);</span><br><span class="line">        sql = <span class="string">"INSERT INTO Student VALUES(?,?,?,?)"</span>;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(<span class="keyword">new</span> java.util.Date().getTime());</span><br><span class="line">        psmt = conn.prepareStatement(sql);</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100000</span>;i ++) &#123;</span><br><span class="line">            psmt.setInt(<span class="number">1</span>, i+<span class="number">1</span>);</span><br><span class="line">            psmt.setString(<span class="number">2</span>, <span class="string">"name_"</span>+i);</span><br><span class="line">            psmt.setString(<span class="number">3</span>, <span class="string">"name_"</span>+i+<span class="string">"@qq.cp.com"</span>);</span><br><span class="line">            psmt.setDate(<span class="number">4</span>, date);</span><br><span class="line">            psmt.executeUpdate();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"Time:"</span>+(end-begin));<span class="comment">//Time:19754</span></span><br><span class="line">        JDBCTools.commit(conn);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        JDBCTools.rollback(conn);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        JDBCTools.release(<span class="keyword">null</span>, psmt, conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-使用Batch"><a href="#3-使用Batch" class="headerlink" title="3.使用Batch"></a>3.使用Batch</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement psmt = <span class="keyword">null</span>;</span><br><span class="line">    String sql = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = JDBCTools.getConnection();</span><br><span class="line">        JDBCTools.beginTx(conn);</span><br><span class="line">        sql = <span class="string">"INSERT INTO Student VALUES(?,?,?,?)"</span>;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(<span class="keyword">new</span> java.util.Date().getTime());</span><br><span class="line">        psmt = conn.prepareStatement(sql);</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100000</span>;i ++) &#123;</span><br><span class="line">            psmt.setInt(<span class="number">1</span>, i+<span class="number">1</span>);</span><br><span class="line">            psmt.setString(<span class="number">2</span>, <span class="string">"name_"</span>+i);</span><br><span class="line">            psmt.setString(<span class="number">3</span>, <span class="string">"name_"</span>+i+<span class="string">"@qq.cp.com"</span>);</span><br><span class="line">            psmt.setDate(<span class="number">4</span>, date);</span><br><span class="line">            <span class="comment">// "积攒" SQL</span></span><br><span class="line">            psmt.addBatch();</span><br><span class="line">            <span class="comment">//当"积攒"到一定程度时,统一向数据库发送一次SQL 并清空"积攒"</span></span><br><span class="line">            <span class="keyword">if</span>((i+<span class="number">1</span>)%<span class="number">300</span>==<span class="number">0</span>) &#123;</span><br><span class="line">                psmt.executeBatch();</span><br><span class="line">                psmt.clearBatch();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">100000</span>%<span class="number">300</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            psmt.executeBatch();</span><br><span class="line">            psmt.clearBatch();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"Time:"</span>+(end-begin));<span class="comment">//Time:2546</span></span><br><span class="line">        JDBCTools.commit(conn);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        JDBCTools.rollback(conn);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        JDBCTools.release(<span class="keyword">null</span>, psmt, conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> JavaSE </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC-数据库事务</title>
      <link href="/blog/JDBC1-7.html"/>
      <url>/blog/JDBC1-7.html</url>
      
        <content type="html"><![CDATA[<p>数据库事务</p><a id="more"></a><h2 id="1-事务的简介"><a href="#1-事务的简介" class="headerlink" title="1.事务的简介"></a>1.事务的简介</h2><blockquote><ul><li><p>在数据库中,所谓事务是指<strong>一组逻辑操作单元</strong>,<strong>使数据从一种状态变换到另一种状态</strong>.</p></li><li><p>为确保数据库中数据的<strong>一致性</strong>,数据的操纵应当是离散的成组的逻辑单元:当它全部完成时,数据的一致性可以保持,而当这个单元中的一部分操作失败,整个事务应全部视为错误,所有从起始点以后的操作应全部回退到开始状态.</p></li><li><p>事务的操作:先定义开始一个事务,然后对数据作修改操作,这时如果<strong>提交</strong>(COMMIT),这些修改就永久地保存下来,如果<strong>回退</strong>(ROLLBACK),数据库管理系统将放弃所作的所有修改而回到开始事务时的状态.</p></li></ul></blockquote><h2 id="2-事务的属性"><a href="#2-事务的属性" class="headerlink" title="2.事务的属性"></a>2.事务的属性</h2><blockquote><ul><li>事务的ACID(acid)属性:</li></ul><p>–1. 原子性（Atomicity）<br> 原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生.</p><p>–2. 一致性（Consistency）<br> 事务必须使数据库从一个一致性状态变换到另外一个一致性状态.</p><p>–3. 隔离性（Isolation）<br> 事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰.</p><p>–4. 持久性（Durability）<br> 持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响.</p></blockquote><h2 id="3-JDBC事务处理"><a href="#3-JDBC事务处理" class="headerlink" title="3.JDBC事务处理"></a>3.JDBC事务处理</h2><blockquote><ul><li><p>事务：指构成单个逻辑工作单元的操作集合</p></li><li><p>事务处理：保证所有事务都作为一个工作单元来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都被提交(commit)，要么整个事务回滚(rollback)到最初状态</p></li><li><p>当一个连接对象被创建时，默认情况下是自动提交事务：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚</p></li><li><p>为了让多个 SQL 语句作为一个事务执行:</p></li></ul><p>–调用 Connection 对象的 setAutoCommit(false); 以取消自动提交事务</p><p>–在所有的 SQL 语句都成功执行后，调用 commit(); 方法提交事务</p><p>–在出现异常时，调用 rollback(); 方法回滚事务</p><p>–若此时 Connection 没有被关闭, 则需要恢复其自动提交状态</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 账户1给账户2转账1000元.</span></span><br><span class="line"><span class="comment"> *  若两个执行的SQL之间有异常,则有的SQL不能执行,而出现数据不同步.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJDBC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DAO dao = <span class="keyword">new</span> DAO();</span><br><span class="line">    String sql = <span class="string">"UPDATE Account SET balance = balance-? WHERE id = ?"</span>;</span><br><span class="line">    dao.update(sql,<span class="number">1000</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//int i = 10/0;//若打开这行代码的注释,则不能给账户2添加1000元.</span></span><br><span class="line">    sql = <span class="string">"UPDATE Account SET balance = balance+? WHERE id = ?"</span>;</span><br><span class="line">    dao.update(sql,<span class="number">1000</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关于事务:</p><p>–1. 如果是执行了多个SQL操作, 每个SQL操作都有自己单独的连接, 则无法保证事务.</p><p>–2. 具体步骤:</p><p>1) 事务操作开始前, 要开启事务(即关闭默认commit): conn.setAutoCommit(false);</p><p>2) 如果事务的操作都成功, 则提交事务: conn.commit();</p><p>3) 若出现异常, 则在catch块中回滚事务: conn.rollback();</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 修改之前的DAO的update()方法,使其能够支持事务.</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSetMetaData;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DAO</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的更新方法,包括: Insert Delete Update</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Connection conn,String sql, Object ... args)</span> </span>&#123;</span><br><span class="line">PreparedStatement psmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">psmt = conn.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i ++) &#123;</span><br><span class="line">psmt.setObject(i+<span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2. 执行 SQL语句</span></span><br><span class="line">psmt.executeUpdate();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//在这里不能关闭数据库连接,之后可能会用到</span></span><br><span class="line">JDBCTools.release(<span class="keyword">null</span>, psmt, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJDBC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = JDBCTools.getConnection();</span><br><span class="line">        <span class="comment">//1. 开启事务</span></span><br><span class="line">        conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        String sql = <span class="string">"UPDATE Account SET balance = balance-? WHERE id = ?"</span>;</span><br><span class="line">        update(conn,sql,<span class="number">1000</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">        sql = <span class="string">"UPDATE Account SET balance = balance+? WHERE id = ?"</span>;</span><br><span class="line">        update(conn,sql,<span class="number">1000</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//2. 提交事务</span></span><br><span class="line">        conn.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//3. 回滚事务</span></span><br><span class="line">            conn.rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关闭数据库连接</span></span><br><span class="line">        JDBCTools.release(<span class="keyword">null</span>, <span class="keyword">null</span>, conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-数据库的隔离级别"><a href="#4-数据库的隔离级别" class="headerlink" title="4.数据库的隔离级别"></a>4.数据库的隔离级别</h2><blockquote><ul><li>对于同时运行的多个事务, 当这些事务访问数据库中相同的数据时, 如果没有采取必要的隔离机制, 就会导致各种并发问题:</li></ul><p>–<strong>脏读</strong>: 对于两个事物 T1, T2, T1 读取了已经被 T2 更新但还<strong>没有被提交</strong>的字段. 之后, 若 T2 回滚, T1读取的内容就是临时且无效的.</p><p>–<strong>不可重复读</strong>: 对于两个事物 T1, T2, T1 读取了一个字段, 然后 T2 <strong>更新</strong>了该字段. 之后, T1再次读取同一个字段, 值就不同了.</p><p>–<strong>幻读</strong>: 对于两个事物 T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中<strong>插入</strong>了一些新的行. 之后, 如果 T1 再次读取同一个表, 就会多出几行.</p><ul><li><p>数据库事务的隔离性: 数据库系统必须具有隔离并发运行各个事务的能力, 使它们不会相互影响, 避免各种并发问题. </p></li><li><p>一个事务与其他事务隔离的程度称为隔离级别. 数据库规定了多种事务隔离级别, 不同隔离级别对应不同的干扰程度, 隔离级别越高, 数据一致性就越好, 但并发性越弱</p></li></ul></blockquote><p>数据库提供的4种隔离级别:</p><p><img src="imgs\Java\JDBC_14.png" alt="JDBC_14"></p><blockquote><ul><li><p>Oracle 支持的 2 种事务隔离级别：<strong>READ COMMITED</strong>, SERIALIZABLE. Oracle 默认的事务隔离级别为: READ COMMITED </p></li><li><p>Mysql 支持 4 中事务隔离级别. Mysql 默认的事务隔离级别为: REPEATABLE READ</p></li></ul></blockquote><blockquote><p>修改数据库的隔离级别:</p><p>JDBC程序中修改: 调用 Connection 的 setTransactionIsolation(); 方法</p><p>在MySQL中设置隔离级别:</p><p>&emsp;&emsp;设置当前 MySQL 连接的隔离级别:</p><p>&emsp;&emsp;–set  transaction isolation level read committed;</p><p>&emsp;&emsp;设置数据库系统的全局的隔离级别:</p><p>&emsp;&emsp;– set <strong>global</strong> transaction isolation level read committed;</p><p>查看当前的隔离级别: SELECT @@tx_isolation;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> JavaSE </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC-获取主键值</title>
      <link href="/blog/JDBC1-6.html"/>
      <url>/blog/JDBC1-6.html</url>
      
        <content type="html"><![CDATA[<p>获取数据库自动生成的主键的值</p><a id="more"></a><h2 id="1-getGeneratedKeys"><a href="#1-getGeneratedKeys" class="headerlink" title="1.getGeneratedKeys()"></a>1.getGeneratedKeys()</h2><blockquote><p>这里我只测试过可以获取 MySQL和SQL Server数据库的自增主键值</p><p>设置主键:</p><p>mysql: create table student(id int auto_increment primary key not null, name varchar(15));</p><p>sqlserver: create table student(id int identity(1,1) primary key not null, name varchar(15));</p><p>oracle: 要通过触发器来设置主键自增.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DatabaseMetaData;</span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSetMetaData;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetKeyValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">String sql = <span class="string">"INSERT INTO Student VALUES(?,?,?)"</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = JDBCTools.getConnection();</span><br><span class="line">ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">"Jhon"</span>);</span><br><span class="line">ps.setString(<span class="number">2</span>, <span class="string">"jhon@qq.com"</span>);</span><br><span class="line">ps.setDate(<span class="number">3</span>, <span class="keyword">new</span> Date(<span class="keyword">new</span> java.util.Date().getTime()));</span><br><span class="line">ps.executeUpdate();</span><br><span class="line"><span class="comment">//通过 getGeneratedKeys() 方法获取新生成的主键的 ResultSet 对象</span></span><br><span class="line"><span class="comment">//在 ResultSet 中只有一列 GENERATED_KEYS ,用于存放新生成的主键值</span></span><br><span class="line">rs = ps.getGeneratedKeys();</span><br><span class="line"><span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line">System.out.println(rs.getObject(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; rsmd.getColumnCount();i ++) &#123;</span><br><span class="line">System.out.println(rsmd.getColumnName(i+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCTools.release(rs, ps, conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-元数据获取数据库相关信息"><a href="#2-元数据获取数据库相关信息" class="headerlink" title="2.元数据获取数据库相关信息"></a>2.元数据获取数据库相关信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DatabaseMetaData;</span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSetMetaData;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJDBC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">DatabaseMetaData db = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = JDBCTools.getConnection();</span><br><span class="line">            <span class="comment">//获取数据库元数据</span></span><br><span class="line">db = conn.getMetaData();</span><br><span class="line">            <span class="comment">//获取数据库版本号</span></span><br><span class="line">System.out.println(db.getDatabaseProductVersion());</span><br><span class="line">            <span class="comment">//获取当前连接的用户名</span></span><br><span class="line">System.out.println(db.getUserName());</span><br><span class="line">            <span class="comment">//获取当前数据库连接中的所有数据库名</span></span><br><span class="line">rs = db.getCatalogs();</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">System.out.println(rs.getString(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCTools.release(rs, <span class="keyword">null</span>, conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> JavaSE </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC-DAO设计模式</title>
      <link href="/blog/JDBC1-5.html"/>
      <url>/blog/JDBC1-5.html</url>
      
        <content type="html"><![CDATA[<p>JDBC中的DAO设计模式——Data Access Object(数据访问对象)</p><a id="more"></a><h2 id="1-DAO简介"><a href="#1-DAO简介" class="headerlink" title="1.DAO简介"></a>1.DAO简介</h2><blockquote><ul><li>什么是DAO?</li></ul><p>DAO即Data Access Object, 是用来访问数据信息的类. 包含了对数据的 CRUD(即create,read,update,delete) 操作. 而不包含任何业务相关的信息.</p><p>DAO其实就是对一些常用的 JDBC 方法的封装(就像之前写的JDBC工具类, 也有不同的地方).</p><ul><li>DAO的意义?</li></ul><p>为了实现代码功能的模块化, 更有利于代码的维护与升级.</p><ul><li>DAO要实现哪些数据相关操作的方法?</li></ul><p>若是要处理一些事务的操作, 下列方法还应该在最前面添加一个数据库连接Connection参数</p><ol><li>void update(String sql, Object … args);<br>执行对数据库的 Insert Update Delete 操作</li><li>\&lt;T> T get(Class\&lt;T> clazz, String sql, Object … args);<br>查询一条记录, 返回对应的JavaBean对象</li><li>\&lt;T> List\&lt;T>  getForList(Class\&lt;T> clazz, String sql, Object … args);<br>查询多条记录, 返回对应对象的集合</li><li>\&lt;E> E getForValue(String sql, Object … args);<br>返回某一条记录的某一个字段的值 或 一个统计的值(即聚集函数的结果)</li></ol></blockquote><h2 id="2-beanutils工具类"><a href="#2-beanutils工具类" class="headerlink" title="2.beanutils工具类"></a>2.beanutils工具类</h2><blockquote><p>beanutils工具类是Apache的产品之一, 是一个用来操作JavaBean对象的开源jar. 回想之前, 我们是用的 Java 原始的反射机制来操作的JavaBean对象.</p></blockquote><blockquote><p>JavaBean: 是一个特殊的 Java 类, 类必须是具体的和公共的, 并且具有无参数的构造器, 通过提供的公共方法(即setter和getter方法)来操作成员变量.</p></blockquote><blockquote><p>Java 类的属性:</p><p>① 在 JavaEE 开发中, Java类的属性通过类的 getter(或setter) 方法来定义, 即去除方法 get(或set), 将之后字母的首字母小写, 即为 Java 类的属性.例: public String getIdCard(); 所代表的属性是 idCard.</p><p>② 而之前我们常说的属性(即类的成员变量), 这里称之为字段.</p><p>③ 注意, 我们写的时候, 字段一般都与属性一一对应; 当然, 也会有不对应的情况.</p></blockquote><p>和之前用 JDBC 驱动时一样, 要将 commons-beanutils-1.9.3.jar和commons-logging-1.2.jar 两个 jar包添加到当前项目的 “构建路径”.</p><p><img src="F:\Blog\source\imgs\Java\JDBC_13.png" alt="JDBC_13"></p><p>步骤: ①没有 lib 目录的在当前项目下新建目录 lib,将要添加的 jar 包放在里面.</p><p>②在想要添加的 jar 上右键单击, 之后单击 “构建路径”(即 “Build Path”)</p><p>③之后再单击 “添加至构建路径” 即 “Add to Build Path”</p><blockquote><p>经常用到的两个方法: setProperty() 为JavaBean对象指定属性赋值.</p><p>getProperty() 获取 JavaBean 对象的指定属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBeanUtils</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBeanUtils</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//Student类还是之前写的类</span></span><br><span class="line">Object obj = <span class="keyword">new</span> Student();</span><br><span class="line">System.out.println(obj);</span><br><span class="line">BeanUtils.setProperty(obj, <span class="string">"name"</span>, <span class="string">"Bob"</span>);</span><br><span class="line">System.out.println(obj);</span><br><span class="line">        <span class="comment">/*输出:</span></span><br><span class="line"><span class="comment">        Student [id=0, name=null, email=null, date=null]</span></span><br><span class="line"><span class="comment">Student [id=0, name=Bob, email=null, date=null]</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-DAO"><a href="#3-DAO" class="headerlink" title="3.DAO"></a>3.DAO</h2><blockquote><p>要学会使用编辑器, 可快速重构代码.</p><p>学会将代码模块化, 可将功能性的代码片段抽取成一个方法, 方便维护和管理.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSetMetaData;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DAO</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的更新方法,包括: Insert Delete Update</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String sql, Object ... args)</span> </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement psmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1. 获取数据库连接</span></span><br><span class="line">conn = JDBCTools.getConnection();</span><br><span class="line">psmt = conn.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i ++) &#123;</span><br><span class="line">psmt.setObject(i+<span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2. 执行 SQL语句</span></span><br><span class="line">psmt.executeUpdate();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCTools.release(<span class="keyword">null</span>, psmt, conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的查询方法,SQL为select类型.</span></span><br><span class="line"><span class="comment"> * 查询结果最多是一行记录.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">get</span><span class="params">(Class&lt;T&gt; clazz, String sql, Object ... args)</span> </span>&#123;</span><br><span class="line">List&lt;T&gt; list = getForList(clazz, sql, args);</span><br><span class="line"><span class="keyword">if</span>(list.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的查询方法,SQL为select类型.</span></span><br><span class="line"><span class="comment"> * 查询结果可以为多行记录(0~n).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt;  <span class="title">getForList</span><span class="params">(Class&lt;T&gt; clazz, String sql, Object ... args)</span></span>&#123;</span><br><span class="line">List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement psmt = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = JDBCTools.getConnection();</span><br><span class="line">psmt = conn.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i ++) &#123;</span><br><span class="line">psmt.setObject(i+<span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1. 获取连接再获取结果集</span></span><br><span class="line">rs = psmt.executeQuery();</span><br><span class="line"><span class="comment">//2. 将结果集转换为Map的List</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; values = handleResultSetToMapList(rs);</span><br><span class="line"><span class="comment">//3. 将 Map 的List 转换为 JavaBean 对应的List</span></span><br><span class="line">list = transferMapListToBeanList(clazz, values);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询方法,结果为一行中的一列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">E <span class="title">getForValue</span><span class="params">(String sql, Object ... args)</span> </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement psmt = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = JDBCTools.getConnection();</span><br><span class="line">psmt = conn.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i ++) &#123;</span><br><span class="line">psmt.setObject(i+<span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line">rs = psmt.executeQuery();</span><br><span class="line"><span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line"><span class="keyword">return</span> (E)rs.getObject(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCTools.release(rs, psmt, conn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取结果集的 ColumnLabel 对应的 List</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getColumnLabels</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">List&lt;String&gt; labels = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; rsmd.getColumnCount();i++) &#123;</span><br><span class="line">labels.add(rsmd.getColumnLabel(i+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> labels;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理结果集得到一个 Map 的List, 其中一个 Map 代表一个记录.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Map&lt;String, Object&gt;&gt; handleResultSetToMapList(ResultSet rs) <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">List&lt;String&gt; labels = <span class="keyword">this</span>.getColumnLabels(rs);</span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; values = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(String key :labels) &#123;</span><br><span class="line">Object value = rs.getObject(key);</span><br><span class="line">map.put(key, value);</span><br><span class="line">&#125;</span><br><span class="line">values.add(map);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> values;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将 Map 的 List 转换为 JavaBean对象的 List</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> values</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InstantiationException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvocationTargetException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">transferMapListToBeanList</span><span class="params">(Class&lt;T&gt; clazz, List&lt;Map&lt;String, Object&gt;&gt; values)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> InstantiationException, IllegalAccessException, InvocationTargetException </span>&#123;</span><br><span class="line">List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">T bean = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(values.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(Map&lt;String,Object&gt; m:values) &#123;</span><br><span class="line">bean = clazz.newInstance();</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, Object&gt; entry:m.entrySet()) &#123;</span><br><span class="line">String propertyName = entry.getKey();</span><br><span class="line">Object propertyValue = entry.getValue();</span><br><span class="line">BeanUtils.setProperty(bean, propertyName, propertyValue);</span><br><span class="line">&#125;</span><br><span class="line">list.add(bean);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-TestDAO"><a href="#4-TestDAO" class="headerlink" title="4.TestDAO"></a>4.TestDAO</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DAOTest</span> </span>&#123;</span><br><span class="line">DAO dao = <span class="keyword">new</span> DAO();</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Student stu = getStudentFromConsole();</span><br><span class="line">addStudent(stu);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> Student <span class="title">getStudentFromConsole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">"请输入学生ID:"</span>);</span><br><span class="line">stu.setId(scanner.nextInt());</span><br><span class="line">System.out.print(<span class="string">"请输入学生Name:"</span>);</span><br><span class="line">stu.setName(scanner.next());</span><br><span class="line">System.out.print(<span class="string">"请输入学生Email:"</span>);</span><br><span class="line">stu.setEmail(scanner.next());</span><br><span class="line">System.out.print(<span class="string">"请输入学生Birth:"</span>);</span><br><span class="line">stu.setDate(Date.valueOf(scanner.next()));</span><br><span class="line">scanner.close();</span><br><span class="line"><span class="keyword">return</span> stu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(Student stu)</span> </span>&#123;</span><br><span class="line">String sql = <span class="string">"INSERT INTO Student VALUES(?,?,?,?)"</span>;</span><br><span class="line">dao.update(sql,stu.getId(),stu.getName(),stu.getEmail(),stu.getDate());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String sql = <span class="string">"SELECT id, name, email, birth date FROM Student "</span></span><br><span class="line">+ <span class="string">"WHERE id = ?"</span>;</span><br><span class="line">Student stu = dao.get(Student.class, sql,<span class="number">3</span>);</span><br><span class="line">System.out.println(stu);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetForList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String sql = <span class="string">"SELECT id, name, email, birth date FROM Student"</span>;</span><br><span class="line">List&lt;Student&gt; list = dao.getForList(Student.class, sql);</span><br><span class="line"><span class="keyword">for</span>(Student stu:list) &#123;</span><br><span class="line">System.out.println(stu);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetForValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String sql = <span class="string">"SELECT COUNT(*) FROM Student"</span>;</span><br><span class="line"><span class="keyword">int</span> result = dao.getForValue(sql);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> JavaSE </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC-一个通用的JDBC查询方法</title>
      <link href="/blog/JDBC1-4.html"/>
      <url>/blog/JDBC1-4.html</url>
      
        <content type="html"><![CDATA[<p>利用反射及 JDBC 元数据编写通用的查询方法.</p><a id="more"></a><h2 id="1-观察之前的查询方法"><a href="#1-观察之前的查询方法" class="headerlink" title="1.观察之前的查询方法"></a>1.观察之前的查询方法</h2><blockquote><ol><li>方法返回值不一定,要根据具体的运行时类确定</li><li>创建的对象不一定,要根据具体的运行时类确定</li><li>具体对象的属性与结果集的字段之间没有什么关系:<br>如何获取结果集中的字段?并给字段对应的对象的属性赋值?</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Student <span class="title">getStudent</span><span class="params">(String sql,Object ... args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.方法返回值不一定,要根据具体的运行时类确定</span></span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    Student stu = <span class="keyword">null</span>;<span class="comment">//2.创建的对象不一定,要根据具体的运行时类确定</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = JDBCTools.getConnection();</span><br><span class="line">        ps = conn.prepareStatement(sql);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i ++) &#123;</span><br><span class="line">            ps.setObject(i+<span class="number">1</span>, args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        rs = ps.executeQuery();</span><br><span class="line">        <span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line">            stu = <span class="keyword">new</span> Student(</span><br><span class="line">                rs.getInt(<span class="number">1</span>),</span><br><span class="line">                rs.getString(<span class="number">2</span>).trim(),</span><br><span class="line">                rs.getString(<span class="number">3</span>).trim(),</span><br><span class="line">                rs.getDate(<span class="number">4</span>));</span><br><span class="line">            <span class="comment">//3.具体对象的属性与结果集的字段之间没有什么关系,</span></span><br><span class="line">            <span class="comment">//如何获取结果集中的字段?并给字段对应对象的属性复制?</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JDBCTools.release(rs, ps, conn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stu;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-利用反射创建对象"><a href="#2-利用反射创建对象" class="headerlink" title="2.利用反射创建对象"></a>2.利用反射创建对象</h2><blockquote><p>之前我们知道 Java 的反射是动态语言的关键.</p></blockquote><p>忘记如何用反射的可以看一下 , <a href="JavaReflection.html#3-初识反射">Java反射</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">get</span><span class="params">(Class&lt;T&gt; clazz,String sql,Object ... args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.由于不能确定返回值,利用泛型实现,通过传过来的clazz参数确定返回值</span></span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    T entity = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn = JDBCTools.getConnection();</span><br><span class="line">        ps = conn.prepareStatement(sql);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i ++) &#123;</span><br><span class="line">            ps.setObject(i+<span class="number">1</span>, args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        rs = ps.executeQuery();</span><br><span class="line">        <span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line">            <span class="comment">//2.利用反射创建对象</span></span><br><span class="line">            entity = clazz.newInstance();</span><br><span class="line">            <span class="comment">//3.通过解析SQL语句来判断到底选择查询了哪些列,</span></span><br><span class="line">            <span class="comment">//以及需要为 entity 对象的哪些属性赋值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        JDBCTools.release(rs, ps, conn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> entity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-对应列与属性"><a href="#3-对应列与属性" class="headerlink" title="3.对应列与属性"></a>3.对应列与属性</h2><blockquote><p>注意到: SQL查询的数据表的列与对象的属性没有什么关系.</p><p>我们要修改一下查询时的SQL语句, 查询时为每一列起一个别名, 该别名与对象的属性一一对应.</p></blockquote><p><img src="imgs\Java\JDBC_12.png" alt="JDBC_12"></p><h2 id="4-获取列名-别名"><a href="#4-获取列名-别名" class="headerlink" title="4.获取列名(别名)"></a>4.获取列名(别名)</h2><h3 id="A-数据库元数据"><a href="#A-数据库元数据" class="headerlink" title="A.数据库元数据"></a>A.数据库元数据</h3><blockquote><ul><li><p>Java 通过JDBC获得连接以后，得到一个Connection 对象，可以从这个对象获得<strong>有关数据库管理系统的各种信息</strong>，包括数据库中的各个表，表中的各个列，数据类型，触发器，存储过程等各方面的信息。根据这些信息，JDBC可以访问一个实现事先并不了解的数据库。</p></li><li><p>获取这些信息的方法都是在<strong>DatabaseMetaData</strong>类的对象上实现的，而DatabaseMetaData对象是在Connection对象上获得的.</p></li><li>可通过Connection 对象的 getMetaData()方法获取 DatabaseMetaData 对象</li></ul></blockquote><blockquote><ul><li>DatabaseMetaData 类中提供了许多方法用于获得数据源的各种信息，通过这些方法可以非常详细的了解数据库的信息:<br>&emsp;&emsp;–getURL(): 返回一个String类对象，代表数据库的URL。<br>&emsp;&emsp;–getUserName(): 返回连接当前数据库管理系统的用户名。<br>&emsp;&emsp;–isReadOnly(): 返回一个boolean值，指示数据库是否只允许读操作。<br>&emsp;&emsp;–getDatabaseProductName(): 返回数据库的产品名称。<br>&emsp;&emsp;–getDatabaseProductVersion(): 返回数据库的版本号。<br>&emsp;&emsp;–getDriverName(): 返回驱动驱动程序的名称。<br>&emsp;&emsp;–getDriverVersion(): 返回驱动程序的版本号。<br>&emsp;&emsp;–getCatalogs(): 返回数据库连接对应的数据库的结果集。</li></ul></blockquote><h3 id="B-结果集元数据"><a href="#B-结果集元数据" class="headerlink" title="B.结果集元数据"></a>B.结果集元数据</h3><blockquote><p><strong>ResultSetMetaData</strong>类</p><ul><li>可用于获取关于 ResultSet 对象中列的类型和属性信息的对象:</li></ul><p>–<strong>getColumnName</strong>(int column)：获取指定列的名称</p><p>–<strong>getColumnCount</strong>()：返回当前 ResultSet 对象中的列数。 </p><p>–<strong>getColumnTypeName</strong>(int column)：检索指定列的数据库特定的类型名称。 </p><p>–<strong>getColumnDisplaySize</strong>(int column)：指示指定列的最大标准宽度，以字符为单位。 </p><p>–<strong>isNullable</strong>(int column)：指示指定列中的值是否可以为 null。 </p><p>– <strong>isAutoIncrement</strong>(int column)：指示是否自动为指定列进行编号，这样这些列仍然是只读的。 </p><p>可通过 ResultSet 对象的 getMetaData()方法获取 ResultSetMetaData 对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//rs为ResultSet对象</span></span><br><span class="line">ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rsmd.getColumnCount(); i++) &#123;</span><br><span class="line">    System.out.println(rsmd.getColumnName(i+<span class="number">1</span>));<span class="comment">//打印出列名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-利用反射创建对象并赋值"><a href="#5-利用反射创建对象并赋值" class="headerlink" title="5.利用反射创建对象并赋值"></a>5.利用反射创建对象并赋值</h2><h3 id="A-反射工具类"><a href="#A-反射工具类" class="headerlink" title="A.反射工具类"></a>A.反射工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反射的 Utils 函数集合</span></span><br><span class="line"><span class="comment"> * 提供访问私有变量, 获取泛型类型 Class, 提取集合中元素属性等 Utils 函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过反射, 获得定义 Class 时声明的父类的泛型参数的类型</span></span><br><span class="line"><span class="comment"> * 如: public EmployeeDao extends BaseDao&lt;Employee, String&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;Object&gt; <span class="title">getSuperClassGenricType</span><span class="params">(Class&lt;Object&gt; clazz, <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        Type genType = clazz.getGenericSuperclass();</span><br><span class="line">        <span class="keyword">if</span>(!(genType <span class="keyword">instanceof</span> ParameterizedType))&#123;</span><br><span class="line">            <span class="keyword">return</span> Object.class;</span><br><span class="line">        &#125;</span><br><span class="line">        Type [] params = ((ParameterizedType)genType).getActualTypeArguments();</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= params.length || index &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Object.class;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!(params[index] <span class="keyword">instanceof</span> Class))&#123;</span><br><span class="line">            <span class="keyword">return</span> Object.class;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (Class&lt;Object&gt;) params[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过反射, 获得 Class 定义中声明的父类的泛型参数类型</span></span><br><span class="line"><span class="comment"> * 如: public EmployeeDao extends BaseDao&lt;Employee, String&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;Object&gt; <span class="title">getSuperGenericType</span><span class="params">(Class&lt;Object&gt; clazz)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSuperClassGenricType(clazz, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 循环向上转型, 获取对象的 DeclaredMethod</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> methodName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parameterTypes</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Method <span class="title">getDeclaredMethod</span><span class="params">(Object object, String methodName, Class&lt;?&gt;[] parameterTypes)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Class&lt;?&gt; superClass = object.getClass(); superClass != Object.class; superClass = superClass.getSuperclass())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//superClass.getMethod(methodName, parameterTypes);</span></span><br><span class="line">                <span class="keyword">return</span> superClass.getDeclaredMethod(methodName, parameterTypes);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                <span class="comment">//Method 不在当前类定义, 继续向上转型</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//..</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使 filed 变为可访问</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">makeAccessible</span><span class="params">(Field field)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!Modifier.isPublic(field.getModifiers()))&#123;</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 循环向上转型, 获取对象的 DeclaredField</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filedName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">getDeclaredField</span><span class="params">(Object object, String filedName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Class&lt;?&gt; superClass = object.getClass(); superClass != Object.class; superClass = superClass.getSuperclass())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> superClass.getDeclaredField(filedName);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">                <span class="comment">//Field 不在当前类定义, 继续向上转型</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接调用对象方法, 而忽略修饰符(private, protected)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> methodName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parameterTypes</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parameters</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvocationTargetException </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">invokeMethod</span><span class="params">(Object object, String methodName, Class&lt;?&gt; [] parameterTypes,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      Object [] parameters)</span> <span class="keyword">throws</span> InvocationTargetException</span>&#123;</span><br><span class="line">        Method method = getDeclaredMethod(object, methodName, parameterTypes);</span><br><span class="line">        <span class="keyword">if</span>(method == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Could not find method ["</span> + methodName + <span class="string">"] on target ["</span> + object + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(object, parameters);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IllegalAccessException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"不可能抛出的异常"</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接设置对象属性值, 忽略 private/protected 修饰符, 也不经过 setter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fieldName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object object, String fieldName, Object value)</span></span>&#123;</span><br><span class="line">        Field field = getDeclaredField(object, fieldName);</span><br><span class="line">        <span class="keyword">if</span> (field == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Could not find field ["</span> + fieldName + <span class="string">"] on target ["</span> + object + <span class="string">"]"</span>);</span><br><span class="line">        makeAccessible(field);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field.set(object, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"不可能抛出的异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接读取对象的属性值, 忽略 private/protected 修饰符, 也不经过 getter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fieldName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getFieldValue</span><span class="params">(Object object, String fieldName)</span></span>&#123;</span><br><span class="line">        Field field = getDeclaredField(object, fieldName);</span><br><span class="line">        <span class="keyword">if</span> (field == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Could not find field ["</span> + fieldName + <span class="string">"] on target ["</span> + object + <span class="string">"]"</span>);</span><br><span class="line">        makeAccessible(field);</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = field.get(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"不可能抛出的异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-利用反射赋值"><a href="#B-利用反射赋值" class="headerlink" title="B.利用反射赋值"></a>B.利用反射赋值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTools</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的查询方法,SQL为select类型.</span></span><br><span class="line"><span class="comment"> * 查询结果最多是一行记录.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">get</span><span class="params">(Class&lt;T&gt; clazz,String sql,Object ... args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//由于不能确定返回值,利用泛型实现,通过传过来的clazz参数确定返回值</span></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">T entity = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = JDBCTools.getConnection();</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i ++) &#123;</span><br><span class="line">ps.setObject(i+<span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line">ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line">            <span class="comment">//用HashMap暂时存放查询结果</span></span><br><span class="line">            <span class="comment">//键:列的别名即对象属性名; 值:记录中对应列的值</span></span><br><span class="line">Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rsmd.getColumnCount(); i++) &#123;</span><br><span class="line">result.put(rsmd.getColumnLabel(i+<span class="number">1</span>), rs.getObject(i+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(result.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">entity = clazz.newInstance();</span><br><span class="line">                <span class="comment">//利用反射创建对象</span></span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, Object&gt; entry:result.entrySet()) &#123;</span><br><span class="line">                    <span class="comment">//利用反射为对象的各属性赋值</span></span><br><span class="line">String fieldName = entry.getKey();</span><br><span class="line">Object value = entry.getValue();</span><br><span class="line">setFieldValue(entity, fieldName, value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCTools.release(rs, ps, conn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> entity;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> JavaSE </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC-PreparedStatement</title>
      <link href="/blog/JDBC1-3.html"/>
      <url>/blog/JDBC1-3.html</url>
      
        <content type="html"><![CDATA[<p>通过 PreparedStatement 来执行 SQL 语句</p><a id="more"></a><h2 id="一-PreparedStatement初识"><a href="#一-PreparedStatement初识" class="headerlink" title="一.PreparedStatement初识"></a>一.PreparedStatement初识</h2><blockquote><ul><li>之前我们都是通过 Statement  来执行的 SQL 语句</li><li><p>可以通过调用 Connection 对象的 preparedStatement() 方法获取PreparedStatement 对象</p></li><li><p>PreparedStatement 接口是 Statement 的子接口, 它表示一条预编译过的 SQL 语句</p></li><li><p>PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示, 调用PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数, 第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始), 第二个是设置的 SQL 语句中的参数的值</p></li></ul></blockquote><h3 id="1-为什么要用PreparedStatement"><a href="#1-为什么要用PreparedStatement" class="headerlink" title="1.为什么要用PreparedStatement"></a>1.为什么要用PreparedStatement</h3><ol><li><p>看之前用Statement的程序, SQL语句需要我们去拼接, 很麻烦, 而PreparedStatement 就不需要我们拼接.</p></li><li><p>使用 PreparedStatement 代码的可读性和可维护性好. </p></li><li><p>PreparedStatement 能最大可能提高性能:</p></li></ol><p>&emsp;– DBServer会对预编译语句提供性能优化. 因为预编译语句有可能被重复调用, 所以语句在被DBServer的编译器编译后的执行代码被缓存下来, 那么下次调用时只要是相同的预编译语句就不需要编译, 只要将参数直接传入编译过的语句执行代码中就会得到执行.</p><p>&emsp;– 在statement语句中, 即使是相同操作但因为数据内容不一样, 所以整个语句本身不能匹配, 没有缓存语句的意义. 事实是没有数据库会对普通语句编译后的执行代码缓存. 这样每执行一次都要对传入的语句编译一次.</p><p>&emsp;– (语法检查, 语义检查, 翻译成二进制命令, 缓存)</p><ol start="4"><li>PreparedStatement 可以有效防止 SQL 注入 </li></ol><h3 id="2-SQL-注入"><a href="#2-SQL-注入" class="headerlink" title="2.SQL 注入"></a>2.SQL 注入</h3><blockquote><ul><li><p>SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查, 而在用户输入数据中注入非法的 SQL 语句段或命令, 从而利用系统的 SQL 引擎完成恶意行为的做法</p></li><li><p>对于 Java 而言, 要防范 SQL 注入, 只要用 PreparedStatement 取代 Statement 就可以了</p></li></ul></blockquote><p>&emsp;&emsp;例, 在数据库的UserInfo表中查询, 是否有某个用户名及对应密码. 用户名为: a’<br>OR PASSWORD = ;密码为:  OR ‘1’=’1’</p><p>用 Statement 方式, 拼接的 SQL 语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> UserName,<span class="keyword">Password</span> <span class="keyword">FROM</span> UserInfo <span class="keyword">WHERE</span> UserName = <span class="string">'a'</span></span><br><span class="line"><span class="keyword">OR</span> <span class="keyword">PASSWORD</span> = <span class="string">' AND Password = '</span> <span class="keyword">OR</span> <span class="string">'1'</span>=<span class="string">'1'</span>;</span><br></pre></td></tr></table></figure><p>而 PreparedStatement 方式, 生成的 SQL 语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> UserName,<span class="keyword">Password</span> <span class="keyword">FROM</span> UserInfo <span class="keyword">WHERE</span> UserName = <span class="string">"a'</span></span><br><span class="line"><span class="string">OR PASSWORD = "</span></span><br><span class="line"><span class="keyword">AND</span> <span class="keyword">Password</span> = <span class="string">" OR '1'='1'"</span>;</span><br></pre></td></tr></table></figure><h2 id="二-使用PreparedStatement"><a href="#二-使用PreparedStatement" class="headerlink" title="二.使用PreparedStatement"></a>二.使用PreparedStatement</h2><h3 id="1-executeUpdate"><a href="#1-executeUpdate" class="headerlink" title="1.executeUpdate()"></a>1.executeUpdate()</h3><blockquote><p>在 JDBCTools类中, 重载之前用Statement写的update(String sql)方法, 重载函数为update(String sql,Object … args).</p><p>这里的sql是带有占位符的SQL语句, 后面利用可变个数形参的方法传递参数. 若用数组的话, 在传递参数的时候还要将那些参数封装为数组.</p><p>这里的SQL语句是 insert delete update 语句, 不能是select语句. 之后用  PreparedStatement 的 executeUpdate() 方法执行生成的 SQL 语句.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTools</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上述update()的重载,以PreparedStatement方式执行SQL</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args:SQL中占位符对应的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String sql,Object ... args)</span> </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = JDBCTools.getConnection();</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i ++) &#123;</span><br><span class="line">ps.setObject(i+<span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line">ps.executeUpdate();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCTools.release(<span class="keyword">null</span>,ps, conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-executeQuery"><a href="#2-executeQuery" class="headerlink" title="2.executeQuery()"></a>2.executeQuery()</h3><blockquote><p>使用 PreparedStatement 的executeQuery()方法, 执行带有 select 的SQL语句.</p><p>当然, 你也可以和执行 JDBCTools 里的update()方法一样, 将查询数据库的代码抽取成一个工具方法, 之后会讲如何写一个通用的查询方法, 放在 JDBCTools 类里面. 我就直接测试了.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FilterInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBCTools</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Student stu = getStudentFromConsole();</span><br><span class="line">addStudent(stu);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> Student <span class="title">getStudentFromConsole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">"请输入学生ID:"</span>);</span><br><span class="line">stu.setId(scanner.nextInt());</span><br><span class="line">System.out.print(<span class="string">"请输入学生Name:"</span>);</span><br><span class="line">stu.setName(scanner.next());</span><br><span class="line">System.out.print(<span class="string">"请输入学生Email:"</span>);</span><br><span class="line">stu.setEmail(scanner.next());</span><br><span class="line">System.out.print(<span class="string">"请输入学生Birth:"</span>);</span><br><span class="line">stu.setDate(Date.valueOf(scanner.next()));</span><br><span class="line">System.out.println(stu.getDate());</span><br><span class="line">scanner.close();</span><br><span class="line"><span class="keyword">return</span> stu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(Student stu)</span> </span>&#123;</span><br><span class="line">String sql = <span class="string">"INSERT INTO Student VALUES(?,?,?,?)"</span>;</span><br><span class="line">JDBCTools.update(sql,stu.getId(),stu.getName(),stu.getEmail(),stu.getDate());</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//上边是测试的 PreparedStatement 实现的 update()方法</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSearchStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> type = getSearchType();</span><br><span class="line">Student stu = searchStudent(type);</span><br><span class="line">showMsg(stu);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showMsg</span><span class="params">(Student stu)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(stu == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"查无此人!"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(stu);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getSearchType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.print(<span class="string">"请输入查询类型:1.id查询 2.姓名查询"</span>);</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> FilterInputStream(System.in)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="keyword">int</span> type = scanner.nextInt();</span><br><span class="line">scanner.close();</span><br><span class="line"><span class="keyword">if</span>(type != <span class="number">1</span> &amp;&amp; type != <span class="number">2</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"输入的查询类型有误!"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">searchStudent</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">String sql = <span class="keyword">null</span>;</span><br><span class="line">Student stu = <span class="keyword">null</span>;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">1</span>) &#123;</span><br><span class="line">System.out.print(<span class="string">"请输入要查询的id:"</span>);</span><br><span class="line"><span class="keyword">int</span> id = scanner.nextInt();</span><br><span class="line">sql = <span class="string">"SELECT * FROM Student WHERE id = ?"</span>;</span><br><span class="line">stu = getStudent(sql,id);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.print(<span class="string">"请输入要查询的Name:"</span>);</span><br><span class="line">String name = scanner.next();</span><br><span class="line">sql = <span class="string">"SELECT * FROM Student WHERE name = '?'"</span>;</span><br><span class="line">stu = getStudent(sql,name);</span><br><span class="line">&#125;</span><br><span class="line">scanner.close();</span><br><span class="line"><span class="keyword">return</span> stu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> Student <span class="title">getStudent</span><span class="params">(String sql,Object ... args)</span> </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">Student stu = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = JDBCTools.getConnection();</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i ++) &#123;</span><br><span class="line">ps.setObject(i+<span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line"><span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line">stu = <span class="keyword">new</span> Student(</span><br><span class="line">rs.getInt(<span class="number">1</span>),</span><br><span class="line">rs.getString(<span class="number">2</span>).trim(),</span><br><span class="line">rs.getString(<span class="number">3</span>).trim(),</span><br><span class="line">rs.getDate(<span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCTools.release(rs, ps, conn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stu;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> JavaSE </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC-以OOP编写JDBC程序</title>
      <link href="/blog/JDBC1-2.html"/>
      <url>/blog/JDBC1-2.html</url>
      
        <content type="html"><![CDATA[<p>以OOP(即面向对象编程)编写 JDBC 程序</p><a id="more"></a><h2 id="1-JDBC工具类"><a href="#1-JDBC工具类" class="headerlink" title="1.JDBC工具类"></a>1.JDBC工具类</h2><blockquote><p>将一些常用的 JDBC 方法封装成一个 JDBC 工具类, 方便管理及调用.</p><p>下面程序中的配置文件 jdbc.properties 必须在当前项目的 src 目录下.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 操作 JDBC 的工具类,封装了一些常用的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTools</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取数据库连接:</span></span><br><span class="line"><span class="comment"> * 通过读取配置文件,根据配置信息从数据库服务器获取一个连接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">InputStream is = JDBCTools.class.getClassLoader().getResourceAsStream(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">pro.load(is);</span><br><span class="line">String url = pro.getProperty(<span class="string">"jdbc"</span>);</span><br><span class="line">String user = pro.getProperty(<span class="string">"user"</span>);</span><br><span class="line">String password = pro.getProperty(<span class="string">"password"</span>);</span><br><span class="line">Class.forName(pro.getProperty(<span class="string">"driver"</span>));</span><br><span class="line">Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的执行SQL更新语句,包括: Insert Delete Update语句, 不能执行select语句</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">Statement state = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = JDBCTools.getConnection();</span><br><span class="line">state = conn.createStatement();</span><br><span class="line">state.executeUpdate(sql);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCTools.release(<span class="keyword">null</span>,state, conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭 ResultSet 和 Statement 和 Connection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> state</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(ResultSet rs,Statement state,Connection conn)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rs != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(state != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">state.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-操作Student数据表中的数据"><a href="#2-操作Student数据表中的数据" class="headerlink" title="2.操作Student数据表中的数据"></a>2.操作Student数据表中的数据</h2><blockquote><p>利用 Java 的对象操作数据表中的记录, 这里的 Java 对象之后会有个专业名词: JavaBean</p><p>处理表的记录时, 不再一个字段一个字段的处理, 而是把它们封装成一个对象, 统一处理.</p><p>可以称为 O-R映射 即 对象与关系(也可以说数据表)之间的映射, 对象的属性与数据表的字段一一对应.</p></blockquote><h3 id="A-DB中的Student表"><a href="#A-DB中的Student表" class="headerlink" title="A.DB中的Student表"></a>A.DB中的Student表</h3><table><thead><tr><th>id</th><th>name</th><th>email</th><th>birth</th></tr></thead><tbody><tr><td>1</td><td>Bob</td><td><a href="mailto:bob@qq.com" target="_blank" rel="noopener">bob@qq.com</a></td><td>1997-01-01</td></tr><tr><td>2</td><td>Jane</td><td><a href="mailto:jane@qq.com" target="_blank" rel="noopener">jane@qq.com</a></td><td>1999-09-09</td></tr><tr><td>3</td><td>Jhon</td><td><a href="mailto:jhon@qq.com" target="_blank" rel="noopener">jhon@qq.com</a></td><td>2000-10-01</td></tr></tbody></table><h3 id="B-Java中的Student对象"><a href="#B-Java中的Student对象" class="headerlink" title="B.Java中的Student对象"></a>B.Java中的Student对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"><span class="keyword">private</span> Date date;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String name, String email, Date date)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.email = email;</span><br><span class="line"><span class="keyword">this</span>.date = date;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> email;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.email = email;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.date = date;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Student [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", email="</span> + email + <span class="string">", date="</span> + date + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-插入一条Student记录"><a href="#C-插入一条Student记录" class="headerlink" title="C.插入一条Student记录"></a>C.插入一条Student记录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBCOOP</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Student stu = getStudentFromConsole();</span><br><span class="line">addStudent(stu);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> Student <span class="title">getStudentFromConsole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">"请输入学生ID:"</span>);</span><br><span class="line">stu.setId(scanner.nextInt());</span><br><span class="line">System.out.print(<span class="string">"请输入学生Name:"</span>);</span><br><span class="line">stu.setName(scanner.next());</span><br><span class="line">System.out.print(<span class="string">"请输入学生Email:"</span>);</span><br><span class="line">stu.setEmail(scanner.next());</span><br><span class="line">System.out.print(<span class="string">"请输入学生Birth:"</span>);</span><br><span class="line">stu.setDate(Date.valueOf(scanner.next()));</span><br><span class="line">System.out.println(stu.getDate());</span><br><span class="line">scanner.close();</span><br><span class="line"><span class="keyword">return</span> stu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(Student stu)</span> </span>&#123;</span><br><span class="line">String sql = <span class="string">"INSERT INTO Student VALUES("</span></span><br><span class="line">+ stu.getId() +<span class="string">",'"</span></span><br><span class="line">+ stu.getName() + <span class="string">"','"</span></span><br><span class="line">+ stu.getEmail() + <span class="string">"','"</span></span><br><span class="line">+ stu.getDate() + <span class="string">"')"</span>;</span><br><span class="line">System.out.println(sql);</span><br><span class="line">JDBCTools.update(sql);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D-查询数据表"><a href="#D-查询数据表" class="headerlink" title="D.查询数据表"></a>D.查询数据表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FilterInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBCOOP</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSearchStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> type = getSearchType();</span><br><span class="line">Student stu = searchStudent(type);</span><br><span class="line">showMsg(stu);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showMsg</span><span class="params">(Student stu)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(stu == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"查无此人!"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(stu);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getSearchType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.print(<span class="string">"请输入查询类型:1.id查询  2.姓名查询"</span>);</span><br><span class="line">        <span class="comment">/*这里注意,若仍采用 Scanner scanner = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">         *当 scanner.close()时 System.in流也会被关闭,之后再用到该流时,</span></span><br><span class="line"><span class="comment">         *会报 java.util.nosuchelementexception 异常</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> FilterInputStream(System.in)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="keyword">int</span> type = scanner.nextInt();</span><br><span class="line">scanner.close();</span><br><span class="line"><span class="keyword">if</span>(type != <span class="number">1</span> &amp;&amp; type != <span class="number">2</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"输入的查询类型有误!"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">searchStudent</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">String sql = <span class="keyword">null</span>;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">1</span>) &#123;</span><br><span class="line">System.out.print(<span class="string">"请输入要查询的id:"</span>);</span><br><span class="line"><span class="keyword">int</span> id = scanner.nextInt();</span><br><span class="line">sql = <span class="string">"SELECT * FROM Student WHERE id = "</span> + id;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.print(<span class="string">"请输入要查询的Name:"</span>);</span><br><span class="line">String name = scanner.next();</span><br><span class="line">sql = <span class="string">"SELECT * FROM Student WHERE name = '"</span> + name +<span class="string">"'"</span>;</span><br><span class="line">&#125;</span><br><span class="line">scanner.close();</span><br><span class="line"><span class="keyword">return</span> getStudent(sql);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> Student <span class="title">getStudent</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">Statement state = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">Student stu = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = JDBCTools.getConnection();</span><br><span class="line">state = conn.createStatement();</span><br><span class="line">rs = state.executeQuery(sql);</span><br><span class="line"><span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line">stu = <span class="keyword">new</span> Student(</span><br><span class="line">rs.getInt(<span class="number">1</span>),</span><br><span class="line">rs.getString(<span class="number">2</span>).trim(),</span><br><span class="line">rs.getString(<span class="number">3</span>).trim(),</span><br><span class="line">rs.getDate(<span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCTools.release(rs, state, conn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stu;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<font style="color:red;">注意: 一个方法A中使用了Scanner, 且在里面把它关闭了, 然后又在方法B里再用Scanner时Scanner in = new Scanner(System.in); 会报 java.util.nosuchelementexception 异常.</font></p><blockquote><p>Java提供的IO包中, 一般都会处理资源级联关闭, 即关闭最外层包装的流, 内层被包被的流也会被关闭.</p><p>在Scanner类中使用了一个InputStreamReader()输入流, 对System.in进行再次包装. 当调用Scanner的close()方法时, 会执行InputStreamReader的关闭操作, 即调用用该包装类的close(). 该操作又会调用其内部包装的Sysetm.in的close操作.</p><p>若想解决关闭Scanner而不关闭System.in, 只需要对传入Scanner构造方法的System.in做下包装就可以了, 新包装的流要注意: 1.不产生新的流资源  2.是一个InputStream的实现类  3.close方法为空实现</p><p>你也可以利用上述方法, 解决其他类似的问题.</p></blockquote><p>如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> FilterInputStream(System.in)&#123;</span><br><span class="line">    <span class="comment">//当关闭到 FilterInputStream 对应的流时, 便不再向内层流关闭</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> JavaSE </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC-DriverManger</title>
      <link href="/blog/JDBC1-1.html"/>
      <url>/blog/JDBC1-1.html</url>
      
        <content type="html"><![CDATA[<p>JDBC——通过DriverManger获取数据库连接</p><a id="more"></a><h2 id="一-驱动管理类"><a href="#一-驱动管理类" class="headerlink" title="一.驱动管理类"></a>一.驱动管理类</h2><p>&emsp;&emsp;之前使用的是原始的方法即 Driver 接口获取数据库连接, 但是我们在开发中一般都用 DriverManger即驱动管理类来实现不同数据库的连接.</p><h3 id="1-建立连接"><a href="#1-建立连接" class="headerlink" title="1.建立连接"></a>1.建立连接</h3><blockquote><ul><li><p>可以调用 DriverManager 类的 getConnection() 方法建立到数据库的连接</p></li><li><p>JDBC URL 用于标识一个被注册的驱动程序, 驱动程序管理器通过这个 URL 选择正确的驱动程序, 从而建立到数据库的连接.</p></li><li><p>JDBC URL的标准由三部分组成, 各部分间用冒号分隔.<br>——jdbc: &lt;子协议&gt;:&lt;子名称&gt;<br>——协议: JDBC URL中的协议总是jdbc<br>——子协议: 子协议用于标识一个数据库驱动程序<br>——子名称: 一种标识数据库的方法. 子名称可以依不同的子协议而变化, 用子名称的目的是为了定位数据库提供足够的信息 </p></li></ul></blockquote><p><img src="imgs\Java\JDBC_09.png" alt="JDBC_09"></p><h3 id="2-加载与注册JDBC驱动"><a href="#2-加载与注册JDBC驱动" class="headerlink" title="2.加载与注册JDBC驱动"></a>2.加载与注册JDBC驱动</h3><blockquote><ul><li><p>加载 JDBC 驱动需调用 Class 类的静态方法 forName(), 向其传递要加载的 JDBC 驱动的类名.</p></li><li><p>DriverManager 类是驱动程序管理器类, 负责管理驱动程序.</p></li><li><p>通常不用显式调用 DriverManager 类的 registerDriver() 方法来注册驱动程序类的实例, 因为 Driver 接口的驱动程序类都包含了静态代码块, 在这个静态代码块中, 会调用DriverManager.registerDriver() 方法来注册自身的一个实例.</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestDriverManger</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.准备连接数据库的4个string</span></span><br><span class="line">String driverClass = <span class="keyword">null</span>;</span><br><span class="line">String url = <span class="keyword">null</span>;</span><br><span class="line">String user = <span class="keyword">null</span>;</span><br><span class="line">String password = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//读取类路径下的 jdbc.properties 文件</span></span><br><span class="line">InputStream in = </span><br><span class="line">getClass().getClassLoader().getResourceAsStream(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">properties.load(in);</span><br><span class="line">driverClass = properties.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">url = properties.getProperty(<span class="string">"jdbc"</span>);</span><br><span class="line">user = properties.getProperty(<span class="string">"user"</span>);</span><br><span class="line">password = properties.getProperty(<span class="string">"password"</span>);</span><br><span class="line">        <span class="comment">//2.加载驱动程序(实际上对应的Driver实现类中有注册驱动的静态代码块)</span></span><br><span class="line">Class.forName(driverClass);</span><br><span class="line">        <span class="comment">//3.通过 DriverManger的getConnection方法获取数据库的连接</span></span><br><span class="line">Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用DriverManger的好处:</p><blockquote><ol><li>可以通过重载的 getConnection() 方法获取数据库连接, 较为方便</li><li>可以同时管理多个驱动程序: 若注册了多个数据库连接, 根据调用 getConnection() 方法时传入的参数来连接不同的数据库, 并返回不同的数据库连接.</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestDriverManger</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String driver1 = <span class="string">"com.microsoft.sqlserver.jdbc.SQLServerDriver"</span>;</span><br><span class="line">String driver2 = <span class="string">"com.mysql.cj.jdbc.Driver"</span>;</span><br><span class="line">String url1 = <span class="string">"jdbc:sqlserver://127.0.0.1:1433;DatabaseName=SPJDB"</span>;</span><br><span class="line">String url2 = <span class="string">"jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false"</span>;</span><br><span class="line">String user1 = <span class="string">"root"</span>;</span><br><span class="line">String user2 = <span class="string">"root"</span>;</span><br><span class="line">String password1 = <span class="string">"root"</span>;</span><br><span class="line">String password2 = <span class="string">"root"</span>;</span><br><span class="line">        </span><br><span class="line">Class.forName(driver1);</span><br><span class="line">Connection conn1 = DriverManager.getConnection(url1, user1, password1);</span><br><span class="line">System.out.println(conn1);</span><br><span class="line"></span><br><span class="line">Class.forName(driver2);</span><br><span class="line">Connection conn2 = DriverManager.getConnection(url2, user2, password2);</span><br><span class="line">System.out.println(conn2);</span><br><span class="line">        conn1.close();</span><br><span class="line">        conn2.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-访问数据库"><a href="#二-访问数据库" class="headerlink" title="二.访问数据库"></a>二.访问数据库</h2><blockquote><ul><li><p>数据库连接被用于向数据库服务器发送命令和 SQL 语句，在连接建立后，需要对数据库进行访问，执行 sql 语句</p></li><li><p>在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式:</p></li></ul><p>&emsp;–Statement</p><p>&emsp;&emsp;–PrepatedStatement</p><p>&emsp;&emsp;&emsp;–CallableStatement</p></blockquote><h3 id="1-Statement"><a href="#1-Statement" class="headerlink" title="1.Statement"></a>1.Statement</h3><blockquote><ul><li><p>通过调用 Connection 对象的 createStatement() 方法获取该对象</p></li><li><p>该对象用于执行静态的 SQL 语句, 并且返回执行结果</p></li><li><p>Statement 接口中定义了下列方法用于执行 SQL 语句:</p></li></ul><p>&emsp;&emsp;–ResultSet excuteQuery(String sql): 传入的sql可以是 select</p><p>&emsp;&emsp;–int excuteUpdate(String sql): 传入的sql可以是 insert update delete, 不能是 select</p></blockquote><h4 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h4><blockquote><p>数据库的更新操作一般指: Insert Delete Update SQL操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestDriverManger</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String driver = <span class="string">"com.microsoft.sqlserver.jdbc.SQLServerDriver"</span>;</span><br><span class="line">String url = <span class="string">"jdbc:sqlserver://localhost:1433;DatabaseName=SPJDB"</span>;</span><br><span class="line">String user = <span class="string">"root"</span>;</span><br><span class="line">String password = <span class="string">"root"</span>;</span><br><span class="line">String sql = <span class="string">"Insert into SPJ values(1,1,2,1000);"</span>;</span><br><span class="line">Class.forName(driver);</span><br><span class="line">Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">Statement statement = conn.createStatement();</span><br><span class="line">statement.executeUpdate(sql);</span><br><span class="line">statement.close();</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在这里, 我们想写一个通用的方法, 该方法可以执行 INSERT UPDATE DELETE 语句. 同时, 我们还想将一些常用的 JDBC 操作封装在一起, 方便管理与使用.</p><p>JDBCTools类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 操作 JDBC 的工具类,封装了一些常用的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTools</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取数据库连接:</span></span><br><span class="line"><span class="comment"> * 通过读取配置文件,根据配置信息从数据库服务器获取一个连接</span></span><br><span class="line"><span class="comment"> * 现在这个方法每执行一次都会获取和释放一次数据库连接,这样不太好,之后会修改</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">InputStream is = JDBCTools.class.getClassLoader().getResourceAsStream(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">pro.load(is);</span><br><span class="line">String url = pro.getProperty(<span class="string">"jdbc"</span>);</span><br><span class="line">String user = pro.getProperty(<span class="string">"user"</span>);</span><br><span class="line">String password = pro.getProperty(<span class="string">"password"</span>);</span><br><span class="line">Class.forName(pro.getProperty(<span class="string">"driver"</span>));</span><br><span class="line">Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭 Statement 和 Connection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> state</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Statement state,Connection conn)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(state != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">state.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TestJDBCTools类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBCTools</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String sql = <span class="string">"DELETE from SPJ where S_num=1 and P_num=1 and J_num=2;"</span>;</span><br><span class="line">update(sql);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的更新方法,包括: Insert Delete Update</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">Statement state = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = JDBCTools.getConnection();</span><br><span class="line">state = conn.createStatement();</span><br><span class="line">state.executeUpdate(sql);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCTools.release(state, conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h4><blockquote><p>我在这里说的查询数据库, 指的是 Select SQL操作</p><p>通过 ResultSet 对象来操作查询的结果集</p><ul><li><p>通过调用 Statement 对象的 excuteQuery() 方法创建该对象</p></li><li><p>ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集, ResultSet 接口由数据库厂商实现</p></li><li><p>ResultSet 对象维护了一个指向当前数据行的游标, 初始的时候, 游标在第一行之前, 可以通过 ResultSet 对象的 next() 方法移动到下一行</p></li><li><p>ResultSet 接口的常用方法:</p></li></ul><p>&emsp;&emsp;&emsp;–boolean next()</p><p>&emsp;&emsp;&emsp;–getXxx() , Xxx 可以是: String Int Time Date …</p><p>&emsp;&emsp;&emsp;……</p></blockquote><p><img src="imgs\Java\JDBC_10.png" alt="JDBC_10"></p><p><img src="imgs\Java\JDBC_11.png" alt="JDBC_11"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBCTools</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">Statement state = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">String sql = <span class="string">"select * from Student"</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = JDBCTools.getConnection();</span><br><span class="line">state = conn.createStatement();</span><br><span class="line">rs = state.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line"><span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">String eamil = rs.getString(<span class="number">3</span>);</span><br><span class="line">Date date = rs.getDate(<span class="number">4</span>);</span><br><span class="line">System.out.print(id+<span class="string">";"</span>);</span><br><span class="line">System.out.print(name+<span class="string">";"</span>);</span><br><span class="line">System.out.print(eamil+<span class="string">";"</span>);</span><br><span class="line">System.out.println(date);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//在这里, 别忘了去修改一下 JDBCTools 类里的 release() 方法</span></span><br><span class="line">JDBCTools.release(rs, state, conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> JavaSE </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC初识</title>
      <link href="/blog/JDBC1-0.html"/>
      <url>/blog/JDBC1-0.html</url>
      
        <content type="html"><![CDATA[<p>JDBC——Java Database Connectivity</p><a id="more"></a><h2 id="一-数据持久化"><a href="#一-数据持久化" class="headerlink" title="一.数据持久化"></a>一.数据持久化</h2><blockquote><p>持久化(persistence): 把数据保存到可掉电式存储设备中以供之后使用. 大多数情况下, 特别是企业级应用, 数据持久化意味着将内存中的数据保存到硬盘上加以”固化”, 而持久化的实现过程大多通过各种关系数据库来完成.</p></blockquote><blockquote><p>持久化的主要应用是将内存中的数据存储在关系型数据库中, 当然也可以存储在磁盘文件、XML数据文件中.</p></blockquote><h2 id="二-Java中的数据存储技术"><a href="#二-Java中的数据存储技术" class="headerlink" title="二.Java中的数据存储技术"></a>二.Java中的数据存储技术</h2><blockquote><p>①  JDBC直接访问数据库<br>②  JDO技术(即Java Data Object)<br>③ 第三方O/R工具, 如: Hibernate, ibatis等</p></blockquote><p>JDBC是Java访问数据库的基石, JDO、Hibernate等只是更好的封装了JDBC.</p><h2 id="三-JDBC基础"><a href="#三-JDBC基础" class="headerlink" title="三.JDBC基础"></a>三.JDBC基础</h2><blockquote><p>JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统</strong>、通用的SQL数据库存取和操作的<strong>公共接口</strong>(一组API), 定义了用来访问数据库的标准Java类库, 使用这个类库可以以一种标准的方法、方便地访问数据库资源.</p><p>JDBC为访问不同的数据库提供了一种<strong>统一的途径</strong>, 为开发者屏蔽了一些细节问题.</p><p>JDBC的目标是使Java程序员使用JDBC可以连接任何<strong>提供了JDBC驱动程序</strong>的数据库系统, 这样就使得程序员无需对特定的数据库系统的特点有过多的了解, 从而大大简化和加快了开发过程.</p><p>JDBC驱动程序由<strong>数据库厂商</strong>实现.</p><p>JDBC编程是一种面向接口的编程, 我们在程序中用的是java.sql下的Connection接口, 但是该接口在java包里并没有具体的实现, 其实现就是JDBC驱动程序.</p></blockquote><p><img src="imgs\Java\JDBC_01.png" alt="JDBC_01"></p><h3 id="1-JDBC体系结构"><a href="#1-JDBC体系结构" class="headerlink" title="1.JDBC体系结构"></a>1.JDBC体系结构</h3><p>JDBC接口(API)包括两个层次:</p><ul><li><p><strong>面向应用的API</strong>: Java API, 抽象接口, 供应用程序开发人员使用(连接数据库, 执行SQL语句, 获得结果).</p></li><li><p><strong>面向数据库的API</strong>: Java Driver API, 供开发商开发数据库驱动程序用.</p></li></ul><p><img src="imgs\Java\JDBC_02.png" alt="JDBC_02"></p><h3 id="2-JDBC驱动程序"><a href="#2-JDBC驱动程序" class="headerlink" title="2.JDBC驱动程序"></a>2.JDBC驱动程序</h3><blockquote><p>JDBC驱动程序: 各个数据库厂商根据JDBC的规范制作的 JDBC 实现类的类库 </p><p>JDBC分类:</p><ul><li>第一类: JDBC-ODBC桥.</li><li>第二类: 部分本地API部分Java的驱动程序.</li><li>第三类: JDBC网络纯Java驱动程序.</li><li><font style="color:red;">第四类: 本地协议的纯 Java 驱动程序.</font></li><li>第三、四两类都是纯Java的驱动程序, 因此, 对于Java开发者来说, 它们在性能、可移植性、功能等方面都有优势.</li></ul></blockquote><p>第一类: JDBC-ODBC桥</p><p><img src="imgs\Java\JDBC_03.png" alt="JDBC_03"></p><p>第二类: 部分本地API部分Java的驱动程序.</p><p><img src="imgs\Java\JDBC_04.png" alt="JDBC_04"></p><p>第三类: JDBC网络纯Java驱动程序. 一般在做JSP网站开发时用.</p><p><img src="imgs\Java\JDBC_05.png" alt="JDBC_05"></p><p>第四类: 本地协议的纯 Java 驱动程序.</p><p><img src="imgs\Java\JDBC_06.png" alt="JDBC_06"></p><p>我们之后主要将的是第四类: 本地协议的纯 Java 驱动程序. 其实, 第三类和第四类差不多.</p><h2 id="四-JDBC-API"><a href="#四-JDBC-API" class="headerlink" title="四.JDBC API"></a>四.JDBC API</h2><blockquote><p>JDBC API 是一系列的接口, 它使得应用程序能够进行数据库联接, 执行SQL语句, 并且得到返回结果.</p></blockquote><p><img src="imgs\Java\JDBC_07.png" alt="JDBC_07"></p><p>&emsp;&emsp;通过Driver Manger我们能获取到代表数据库连接的Connection, 通过Connection我们能获取到用于执行SQL语句的 Statement , 通过Statement 我们能获取到代表查询结果的 Result.</p><h2 id="五-Driver接口"><a href="#五-Driver接口" class="headerlink" title="五.Driver接口"></a>五.Driver接口</h2><blockquote><ul><li>Java.sql.Driver 接口是所有 JDBC 驱动程序需要实现的接口. 这个接口是提供给数据库厂商使用的, 不同数据库厂商提供不同的实现.</li><li>在程序中不需要直接去访问实现了 Driver 接口的类, 而是由驱动程序管理器类(java.sql.DriverManager)去调用这些Driver实现</li><li>但是我们是可以通过Driver接口来获取数据库连接的.</li><li>注意: 数据库的连接是稀缺资源, 用完后必须要关闭连接.</li></ul></blockquote><h3 id="1-将JDBC驱动引入项目"><a href="#1-将JDBC驱动引入项目" class="headerlink" title="1.将JDBC驱动引入项目"></a>1.将JDBC驱动引入项目</h3><ul><li>①下载需要的 JDBC 驱动</li><li>②在项目下新建一个 lib 目录.</li><li>③将用到的 JDBC 驱动(jar文件, 例: mysql-connector-java-8.0.15.jar)放入该目录.</li><li>④在 lib 目录下的 JDBC 驱动上, 右键单击, 依次选择 “构建路径”, “添加至构建路径”.</li><li>之后, JDBC驱动就成功导入项目了, 在 “引用的库” 里面可以看到.</li></ul><p><img src="imgs\Java\JDBC_08.png" alt="JDBC_08"></p><h3 id="2-Driver获取mysql的连接"><a href="#2-Driver获取mysql的连接" class="headerlink" title="2.Driver获取mysql的连接"></a>2.Driver获取mysql的连接</h3><p>注意: 测试时要开启MySQL服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Driver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">        <span class="comment">//以前的mysql JDBC驱动 Driver实现类为: com.mysql.jdbc.Driver</span></span><br><span class="line">Driver driver = <span class="keyword">new</span> com.mysql.cj.jdbc.Driver();</span><br><span class="line">String url = <span class="string">"jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false"</span>;</span><br><span class="line">Properties info = <span class="keyword">new</span> Properties();</span><br><span class="line">info.put(<span class="string">"user"</span>, <span class="string">"root"</span>);</span><br><span class="line">info.put(<span class="string">"password"</span>, <span class="string">"root"</span>);</span><br><span class="line">Connection conn = driver.connect(url, info);</span><br><span class="line">System.out.println(conn);</span><br><span class="line">        conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Driver获取任何数据库的连接"><a href="#3-Driver获取任何数据库的连接" class="headerlink" title="3.Driver获取任何数据库的连接"></a>3.Driver获取任何数据库的连接</h3><blockquote><p>编写一个通用的方法, 在不修改Java源码的情况下, 可以获取任何数据库的连接</p><p>解决方案: 将Driver接口实现类的全类名、要连接数据库的URL、数据库用户名user、用户名密码password放进一个配置文件里.</p><p>通过修改配置文件的方式实现和具体的数据库解耦.</p></blockquote><p>在项目的src目录下, 新建一个 jdbc.properties 文件, 内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#SQL Server DB</span><br><span class="line">driver=com.microsoft.sqlserver.jdbc.SQLServerDriver</span><br><span class="line">jdbc=jdbc:sqlserver://127.0.0.1:1433;DatabaseName=SPJDB</span><br><span class="line">user=root</span><br><span class="line">password=root</span><br><span class="line"></span><br><span class="line">#MySQL DB</span><br><span class="line">#driver=com.mysql.jdbc.Driver</span><br><span class="line">#driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">#jdbcUrl=jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><br><span class="line">#user=root</span><br><span class="line">#password=root</span><br><span class="line"></span><br><span class="line">#Oracle DB</span><br><span class="line">#driver=oracle.jdbc.driver.OracleDriver</span><br><span class="line">#jdbcUrl=jdbc:oracle:thin:@localhost:1521:orcl</span><br><span class="line">#user=scott</span><br><span class="line">#password=java</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Driver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注意: 这里用到了 junit 单元测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(getConnection());</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String driverClass = <span class="keyword">null</span>;</span><br><span class="line">String jdbcUrl = <span class="keyword">null</span>;</span><br><span class="line">String user = <span class="keyword">null</span>;</span><br><span class="line">String password = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//读取类路径下的 jdbc.properties 文件</span></span><br><span class="line">InputStream in = </span><br><span class="line">getClass().getClassLoader().getResourceAsStream(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">properties.load(in);</span><br><span class="line">driverClass = properties.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">jdbcUrl = properties.getProperty(<span class="string">"jdbc"</span>);</span><br><span class="line">user = properties.getProperty(<span class="string">"user"</span>);</span><br><span class="line">password = properties.getProperty(<span class="string">"password"</span>);</span><br><span class="line">        <span class="comment">//利用反射, 实例化全类名对应的类 即 创建不同驱动的Driver对象</span></span><br><span class="line">Driver driver = </span><br><span class="line">(Driver) Class.forName(driverClass).newInstance();</span><br><span class="line">Properties info = <span class="keyword">new</span> Properties();</span><br><span class="line">info.put(<span class="string">"user"</span>, user);</span><br><span class="line">info.put(<span class="string">"password"</span>, password);</span><br><span class="line">Connection connection = driver.connect(jdbcUrl, info);</span><br><span class="line"><span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你只需关闭properties文件里某个数据库配置的注释, 注释其他的数据库配置. 就可以得到不同的数据库连接</p>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> JavaSE </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery中的动画</title>
      <link href="/blog/jQuery1-6.html"/>
      <url>/blog/jQuery1-6.html</url>
      
        <content type="html"><![CDATA[<p>jQuery中的简单动画</p><a id="more"></a><h2 id="一-hide-与show"><a href="#一-hide-与show" class="headerlink" title="一.hide()与show()"></a>一.hide()与show()</h2><blockquote><p>通过hide()与show()方法实现动画, 其中hide()相当于css(“display”,”none”).</p><p>以上两个方法不带任何参数时没有任何动画效果, 可以通过添加一个速度参数使元素”动起来”. 这两个方法会同时改变内容的高度、宽度、透明度</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.panel</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 400px;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.head</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 400px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.head</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="undefined">            cursor: pointer;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 400px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#98C8EF</span>;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">".head"</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">".content"</span>).show(<span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">            &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">".content"</span>).hide(<span class="number">1000</span>);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"head"</span>&gt;</span>什么是jQuery?<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">            jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（或JavaScript框架）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二-slideDown-与slideUp"><a href="#二-slideDown-与slideUp" class="headerlink" title="二.slideDown()与slideUp()"></a>二.slideDown()与slideUp()</h2><blockquote><p>这两个方法只会改变元素的高度, 也可以传一个速度参数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html其余代码同上</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">".head"</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">".content"</span>).slideDown(<span class="number">1000</span>);</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">".content"</span>).slideUp(<span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="三-fadeIn-与fadeOut"><a href="#三-fadeIn-与fadeOut" class="headerlink" title="三.fadeIn()与fadeOut()"></a>三.fadeIn()与fadeOut()</h2><blockquote><p>这两个方法只会改变元素的透明度</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html其余代码同上</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">".head"</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">".content"</span>).fadeIn();</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">".content"</span>).fadeOut();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="四-切换元素的可见性"><a href="#四-切换元素的可见性" class="headerlink" title="四.切换元素的可见性"></a>四.切换元素的可见性</h2><h3 id="1-toggle"><a href="#1-toggle" class="headerlink" title="1.toggle()"></a>1.toggle()</h3><blockquote><p>直接切换元素可见状态, 不传参数的话, 没有动画的效果.传一个速度参数, 便可看见动画的效果</p><p>这个方法相当于show()与hide()方法的组合</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html其余代码同上</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">".head"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">".content"</span>).toggle(<span class="string">"slow"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-slideToggle"><a href="#2-slideToggle" class="headerlink" title="2.slideToggle()"></a>2.slideToggle()</h3><blockquote><p>通过高度的变化来切换元素的可见状态</p><p>想当于slideDown()与slideUp()方法的组合</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html其余代码同上</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">".head"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">".content"</span>).slideToggle(<span class="string">"slow"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-fadeToggle"><a href="#3-fadeToggle" class="headerlink" title="3.fadeToggle()"></a>3.fadeToggle()</h3><blockquote><p>通过透明度来切换元素的可见状态</p><p>相当于fadeIn()与fadeOut()方法的组合</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html其余代码同上</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">".head"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">".content"</span>).fadeToggle(<span class="string">"slow"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-fadeTo"><a href="#4-fadeTo" class="headerlink" title="4.fadeTo()"></a>4.fadeTo()</h3><blockquote><p>把元素的透明度以渐近的方式调整到指定值(0-1之间)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html其余代码同上</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">".content"</span>).show();</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">    $(<span class="string">".head"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//每次点击透明度减少0.2</span></span><br><span class="line">        $(<span class="string">".content"</span>).fadeTo(<span class="string">"slow"</span>,i);</span><br><span class="line">        i -= <span class="number">0.2</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery中的事件</title>
      <link href="/blog/jQuery1-5.html"/>
      <url>/blog/jQuery1-5.html</url>
      
        <content type="html"><![CDATA[<p>jQuery中的事件</p><a id="more"></a><h2 id="一-加载DOM"><a href="#一-加载DOM" class="headerlink" title="一.加载DOM"></a>一.加载DOM</h2><blockquote><p>在页面加载完毕后, 浏览器会通过JS为DOM元素添加事件. 在常规JS代码中, 通常使用window.onload方法, 而在jQuery中使用$(document).ready()方法, 可简写为$().</p></blockquote><blockquote><p>两者区别:</p><ol><li>window.onload必须等待网页中的所有内容加载完毕后(包括图片)才能执行其中代码, 而且只会有一个window.onload会执行, 因为后续修改window.onload会覆盖之前的</li><li>$(document).ready()在网页中的DOM结构绘制完毕之后便会执行, 可能DOM元素关联的东西并没有加载完成, 而且这个函数可编写多个, 这多个中的代码均会执行.</li></ol></blockquote><h2 id="二-绑定事件"><a href="#二-绑定事件" class="headerlink" title="二.绑定事件"></a>二.绑定事件</h2><p>html部分:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        *&#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.panel</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 400px;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.head</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 400px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.head</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="undefined">            cursor: pointer;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 400px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#98C8EF</span>;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"head"</span>&gt;</span>什么是jQuery?<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">            jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（或JavaScript框架）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-直接绑定"><a href="#1-直接绑定" class="headerlink" title="1.直接绑定"></a>1.直接绑定</h3><blockquote><p>is()方法: 用来判断给定的某个jQuery对象是否符合指定的jQuery选择器</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">".head"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> flag = $(<span class="string">".content"</span>).is(<span class="string">":hidden"</span>);</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            $(<span class="string">".content"</span>).show();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $(<span class="string">".content"</span>).hide();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-bind-绑定"><a href="#2-bind-绑定" class="headerlink" title="2.bind()绑定"></a>2.bind()绑定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">".head"</span>).bind(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> flag = $(<span class="string">".content"</span>).is(<span class="string">":hidden"</span>);</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            $(<span class="string">".content"</span>).show();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $(<span class="string">".content"</span>).hide();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="三-合成事件"><a href="#三-合成事件" class="headerlink" title="三.合成事件"></a>三.合成事件</h2><blockquote><p>hover(): 模拟光标悬停事件. 当光标移动到元素上时, 会触发指定的第一个函数, 当光标移出这个元素时, 会触发指定的第二个函数.</p><p>toggle(): 用于模拟鼠标连续单击事件. 第一次单击元素, 触发第一个函数, 再次单击同一个元素, 触发第二个函数. 之后依次类推.  现在废除了之前说的作用, 只用来切换元素的可见性</p></blockquote><h3 id="1-hover"><a href="#1-hover" class="headerlink" title="1.hover()"></a>1.hover()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html代码还是上方的</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">".head"</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">".content"</span>).show();</span><br><span class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">".content"</span>).hide();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="四-移除事件"><a href="#四-移除事件" class="headerlink" title="四.移除事件"></a>四.移除事件</h2><blockquote><p>unbind()方法:<br>移除某按钮上所有的click事件: $(“#btn”).unbind(“click”);<br>移除某按钮上所有的事件: $(“#btn”).unbind();</p><p>one()方法:<br>该方法可以为元素绑定处理函数. 当处理函数触发一次后, 便会被立即删除. 即在每个对象上, 事件处理函数只会被执行一次.</p></blockquote><h2 id="五-事件冒泡"><a href="#五-事件冒泡" class="headerlink" title="五.事件冒泡"></a>五.事件冒泡</h2><blockquote><p>事件会按照DOM层次结构像水泡一样不断向上, 直到传递到顶端</p><p>解决: 在事件处理函数中返回false, 会对事件停止冒泡, 还可以停止元素的默认行为.</p></blockquote><p>由于事件的冒泡, 以下例子中, 点击p标签会向上传递点击事件, body和div的点击事件也会被触发.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        p&#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            background-color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"body"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">"body click"</span>);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">".content"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">"div click"</span>);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">"p click"</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//return false;//阻止事件冒泡</span></span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>body</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>div</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六-事件对象的属性"><a href="#六-事件对象的属性" class="headerlink" title="六.事件对象的属性"></a>六.事件对象的属性</h2><blockquote><p>事件对象: 当事件被触发时, 事件对象就被创建了. 在程序中使用事件对象, 只需要为事件对象的响应函数添加一个参数来接收该事件对象. 该事件对象只有事件处理函数才能访问到. 事件处理函数执行完毕后, 事件对象便被销毁.</p><p>常用到的事件对象的属性:</p><p>event.pageX, event.pageY: 获取光标相对于页面(而不是浏览器窗口)的x,y坐标</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery的DOM</title>
      <link href="/blog/jQuery1-4.html"/>
      <url>/blog/jQuery1-4.html</url>
      
        <content type="html"><![CDATA[<p>jQUery中的DOM操作</p><a id="more"></a><h2 id="一-DOM简介"><a href="#一-DOM简介" class="headerlink" title="一.DOM简介"></a>一.DOM简介</h2><blockquote><p>DOM(Document Object Model—文档对象模型): 一种与浏览器、平台、语言无关的接口, 使用该接口可以轻松地访问页面中所有的标准组件</p><p>DOM操作的分类:</p><ul><li>DOM Core: DOM Core并不专属于JS, 任何一种支持DOM的程序设计语言都可以使用它. 它的用途并非仅限于处理网页, 也可以用来处理任何一种用标记语言编写的文档, 如:XML</li><li>HTML DOM: 使用JS和DOM为HTML文件编写脚本时, 有许多专属于HTML-DOM的属性</li><li>CSS-DOM: 针对于CSS操作, 在JS中, CSS-DOM主要用于获取和设置style对象的各种属性</li></ul></blockquote><h2 id="二-jQuery操作HTML-DOM"><a href="#二-jQuery操作HTML-DOM" class="headerlink" title="二.jQuery操作HTML-DOM"></a>二.jQuery操作HTML-DOM</h2><h3 id="1-查找结点"><a href="#1-查找结点" class="headerlink" title="1.查找结点"></a>1.查找结点</h3><blockquote><ol><li>查找属性结点: 通过jQuery选择器完成</li><li>操作属性节点: 查找到元素对应节点后, 通过jQuery对象的attr()方法来获取它的各属性值</li><li>操作文本节点: 通过text()方法</li></ol></blockquote><h3 id="2-创建节点"><a href="#2-创建节点" class="headerlink" title="2.创建节点"></a>2.创建节点</h3><blockquote><p>使用jQuery的工厂函数$(str); 会根据传入的html格式str字符串, 创建一个DOM对象, 并把这个DOM对象包装成一个jQuery对象返回.</p><p>注意: </p><ol><li>创建的新元素节点不会被自动添加到文档中, 需要手动调用jQuery的方法插入到当前文档.</li><li>当创建单个元素时, 标签开始, 必须要结束该标签.例: $(“<p></p>“)</li></ol><p>创建文本节点就是在创建元素节点时直接将文本内容写进去; 创建属性节点也是这样. </p></blockquote><h3 id="3-插入节点"><a href="#3-插入节点" class="headerlink" title="3.插入节点"></a>3.插入节点</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>append()</td><td>向每个匹配的元素的内容的结尾处追加内容</td></tr><tr><td>appendTo()</td><td>将每个匹配的元素追加到指定元素的内部的结尾处</td></tr><tr><td>prepend()</td><td>向每个匹配的元素的内容的开始处插入内容</td></tr><tr><td>prependTo()</td><td>将每个匹配的元素插入到指定元素的内部的开始处</td></tr></tbody></table><p>这些方法插入的节点都将成为文档中某个节点的子节点.</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>after()</td><td>向每个匹配的元素的之后插入内容</td></tr><tr><td>insertAfter()</td><td>将匹配的元素的插入到指定的元素之后</td></tr><tr><td>before()</td><td>向每个匹配的元素的之前插入内容</td></tr><tr><td>insertBefore()</td><td>将匹配的元素的插入到指定的元素之首</td></tr></tbody></table><p>以上方法不但能将新创建的DOM元素插入到文档中, 也能对原有的DOM元素进行移动.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面两种方法等价:</span></span><br><span class="line">$(<span class="string">"#id"</span>).append(<span class="string">"&lt;p&gt;我是追加的内容&lt;/p&gt;"</span>);</span><br><span class="line">$(<span class="string">"&lt;p&gt;我是追加的内容&lt;/p&gt;"</span>).appendTo($(<span class="string">"#id"</span>));</span><br><span class="line"><span class="comment">//prepend与prependTo和上述方法类似</span></span><br><span class="line"><span class="comment">//after与insertAfter和上述方法类似</span></span><br><span class="line"><span class="comment">//before与insertBefore和上述方法类似</span></span><br></pre></td></tr></table></figure><h3 id="4-删除节点"><a href="#4-删除节点" class="headerlink" title="4.删除节点"></a>4.删除节点</h3><blockquote><p>remove(): 从DOM中删除所有匹配的元素, 传入的参数用于根据jQuery表达式来筛选元素. 当某个节点用remove()方法删除后, 该节点以及所包含的所有后代节点将被同时删除. 这个方法的返回值是一个指向已被删除的节点的引用.</p></blockquote><blockquote><p>empty(): 清空节点—清空元素中的所有后代节点(不包括属性节点).</p></blockquote><h3 id="5-复制节点"><a href="#5-复制节点" class="headerlink" title="5.复制节点"></a>5.复制节点</h3><blockquote><p>clone(): 克隆匹配的DOM元素, 返回值为克隆后的副本. 此时复制的节点不具有任何行为.</p><p>clone(true): 复制元素的同时也可复制元素中的事件.</p></blockquote><h3 id="6-替换节点"><a href="#6-替换节点" class="headerlink" title="6.替换节点"></a>6.替换节点</h3><blockquote><p>replaceWith(): 将所有匹配到的元素都替换为指定的HTML或DOM元素</p><p>replaceAll(): 颠倒了的replaceWith()方法, 与append()与appendTo()方法类似</p><p>注意: 若在替换之前, 已在元素上绑定了事件, 替换之后原先绑定的事件会与原来的元素一起消失.</p><p>若想互换文档中的两个节点的话, 要先克隆其中一个节点.</p></blockquote><h3 id="7-包裹节点"><a href="#7-包裹节点" class="headerlink" title="7.包裹节点"></a>7.包裹节点</h3><blockquote><p>做一些网页特效时, 往往会用到这些方法.</p><p>wrap(): 将匹配到的所有元素一个个用其他元素包裹起来</p><p>wrapAll(): 将匹配到的所有元素作为整体用一个元素包裹起来</p><p>wrapInner(): 将每一个匹配元素的内容用其他结构化标记包裹起来</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例:</span></span><br><span class="line">$(<span class="string">"li"</span>).wrap(<span class="string">"&lt;font color='red'&gt;&lt;/font&gt;"</span>);</span><br><span class="line"><span class="comment">//之后所有的li将变为:&lt;font color='red'&gt;&lt;li&gt;...&lt;/li&gt;&lt;/font&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三-jQuery操作CSS-DOM"><a href="#三-jQuery操作CSS-DOM" class="headerlink" title="三.jQuery操作CSS-DOM"></a>三.jQuery操作CSS-DOM</h2><h3 id="1-操作class属性"><a href="#1-操作class属性" class="headerlink" title="1.操作class属性"></a>1.操作class属性</h3><blockquote><p>获取和设置class属性都可以使用attr()方法, 也可以使用专门的</p></blockquote><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>addClass()</td><td>为class属性添加一个值</td></tr><tr><td>removeClass()</td><td>从匹配元素中删除全部或指定class属性的值</td></tr><tr><td>toggleClass()</td><td>切换class属性的值, 有则删除, 无则添加</td></tr><tr><td>hasClass()</td><td>判断元素class属性是否有某个值</td></tr></tbody></table><h3 id="2-操作元素样式"><a href="#2-操作元素样式" class="headerlink" title="2.操作元素样式"></a>2.操作元素样式</h3><blockquote><p>操作元素的css样式, 均可通过 css() 方法实现</p><ol><li>通过opacity属性操作元素透明度: css(“opacity”,value);</li><li>通过width和height属性操作元素宽高, 也可直接用width()和height()方法操作</li></ol><p>获取元素在当前视窗中的相对位移: offset()方法. 其返回的对象包含两个属性: top和left. 该方法只对可见元素有效</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery选择器续2</title>
      <link href="/blog/jQuery1-3.html"/>
      <url>/blog/jQuery1-3.html</url>
      
        <content type="html"><![CDATA[<p>jQuery过滤选择器续</p><a id="more"></a><h2 id="1-子元素过滤选择器"><a href="#1-子元素过滤选择器" class="headerlink" title="1.子元素过滤选择器"></a>1.子元素过滤选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td>:nth-child(index/even/odd/equation)</td><td>选取每个父元素下的第index个子元素或奇偶元素(index&gt;=1)</td><td>集合元素</td></tr><tr><td>:first-child</td><td>选取每个父元素的第一个子元素</td><td>集合元素</td></tr><tr><td>:last-child</td><td>选取每个父元素的最后一个子元素</td><td>集合元素</td></tr><tr><td>:only-child</td><td>若某元素是其父元素中唯一的子元素, 那么它将被匹配</td><td>集合元素</td></tr></tbody></table><blockquote><p>:nth-child()详解:</p><ul><li>:nth-child(even/odd):能选取每个父元素下的索引值为偶/奇数的元素</li><li>:nth-child(2):能选取每个父元素下的索引值为2的元素</li><li>:nth-child(3n):能选取每个父元素下索引值为3的倍数的元素</li><li>:nth-child(3n+1):能选取每个父元素下索引值为3n+1的元素</li></ul><p>选取子元素时, 需要在选择器前添加一个空格</p></blockquote><p>html部分:</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        div, span, p &#123;</span></span><br><span class="line"><span class="undefined">            width: 140px;</span></span><br><span class="line"><span class="undefined">            height: 140px;</span></span><br><span class="line"><span class="undefined">            margin: 5px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: <span class="selector-id">#000</span> 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            font-size: 17px;</span></span><br><span class="line"><span class="undefined">            font-family: Verdana;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.mini</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 55px;</span></span><br><span class="line"><span class="undefined">            height: 55px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="undefined">            font-size: 12px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.hide</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选取每个class为one的div父元素下的第2个子元素."</span> <span class="attr">id</span>=<span class="string">"btn1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选取每个class为one的div父元素下的第一个子元素."</span> <span class="attr">id</span>=<span class="string">"btn2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选取每个class为one的div父元素下的最后一个子元素."</span> <span class="attr">id</span>=<span class="string">"btn3"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"如果class为one的div父元素下的仅仅只有一个子元素，那么选中这个子元素."</span> <span class="attr">id</span>=<span class="string">"btn4"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">id</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        id 为 one,class 为 one 的div</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">id</span>=<span class="string">"two"</span> <span class="attr">title</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">        id为two,class为one,title为test的div</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"other"</span>&gt;</span>class为mini,title为other<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"test"</span>&gt;</span>class为mini,title为test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"tesst"</span>&gt;</span>class为mini,title为tesst<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:none;"</span> <span class="attr">class</span>=<span class="string">"none"</span>&gt;</span>style的display为"none"的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span>class为"hide"的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        包含input的type为"hidden"的div<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"123456789"</span> <span class="attr">size</span>=<span class="string">"8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mover"</span>&gt;</span>正在执行动画的div元素.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><p>JS部分:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//选取子元素, 需要在选择器前添加一个空格. </span></span><br><span class="line">$(<span class="string">"div.one :nth-child(2)"</span>).css(<span class="string">"background"</span>, <span class="string">"#ffbbaa"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">"div.one :first-child"</span>).css(<span class="string">"background"</span>, <span class="string">"#ffbbaa"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">"#btn3"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">"div.one :last-child"</span>).css(<span class="string">"background"</span>, <span class="string">"#ffbbaa"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">"#btn4"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">"div.one :only-child"</span>).css(<span class="string">"background"</span>, <span class="string">"#ffbbaa"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-表单对象属性过滤选择器"><a href="#2-表单对象属性过滤选择器" class="headerlink" title="2.表单对象属性过滤选择器"></a>2.表单对象属性过滤选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td>:enabled</td><td>选取所有可用元素</td><td>集合元素</td></tr><tr><td>:disabled</td><td>选取所有不可用元素</td><td>集合元素</td></tr><tr><td>:checked</td><td>选取所有被选中的元素(单选框,复选框)</td><td>集合元素</td></tr><tr><td>:selected</td><td>选取所有被选中选项元素(下拉列表)</td><td>集合元素</td></tr></tbody></table><p>html部分:</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        div, span, p &#123;</span></span><br><span class="line"><span class="undefined">            width: 140px;</span></span><br><span class="line"><span class="undefined">            height: 140px;</span></span><br><span class="line"><span class="undefined">            margin: 5px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: <span class="selector-id">#000</span> 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            font-size: 17px;</span></span><br><span class="line"><span class="undefined">            font-family: Verdana;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.mini</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 55px;</span></span><br><span class="line"><span class="undefined">            height: 55px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="undefined">            font-size: 12px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.hide</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>表单对象属性过滤选择器<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>对表单内 可用input 赋值操作.<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>对表单内 不可用input 赋值操作.<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn3"</span>&gt;</span>获取多选框选中的个数.<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn4"</span>&gt;</span>获取多选框选中的内容.<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn5"</span>&gt;</span>获取下拉框选中的内容.<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form1"</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">        可用元素: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"add"</span> <span class="attr">value</span>=<span class="string">"可用文本框1"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        不可用元素: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">disabled</span>=<span class="string">"true"</span> <span class="attr">value</span>=<span class="string">"不可用文本框"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        可用元素: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"che"</span> <span class="attr">value</span>=<span class="string">"可用文本框2"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        不可用元素: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">disabled</span>=<span class="string">"true"</span> <span class="attr">value</span>=<span class="string">"不可用文本框"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        多选框: <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"newsletter"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> <span class="attr">value</span>=<span class="string">"test1"</span> /&gt;</span>test1</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"newsletter"</span> <span class="attr">value</span>=<span class="string">"test2"</span> /&gt;</span>test2</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"newsletter"</span> <span class="attr">value</span>=<span class="string">"test3"</span> /&gt;</span>test3</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"newsletter"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> <span class="attr">value</span>=<span class="string">"test4"</span> /&gt;</span>test4</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"newsletter"</span> <span class="attr">value</span>=<span class="string">"test5"</span> /&gt;</span>test5</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        下拉列表1: <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span> <span class="attr">style</span>=<span class="string">"height: 100px"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>浙江<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>辽宁<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>湖北<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        下拉列表2: <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"test2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>浙江<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>辽宁<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>湖北<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><p>js部分:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//使所有的可用的单行文本框的 value 值变为 已重新赋值</span></span><br><span class="line">        alert($(<span class="string">":text:enabled"</span>).val());</span><br><span class="line">        $(<span class="string">":text:enabled"</span>).val(<span class="string">"已重新赋值"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">":text:disabled"</span>).val(<span class="string">"www.baidu.com"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn3"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> num = </span><br><span class="line">            $(<span class="string">":checkbox[name='newsletter']:checked"</span>).length;</span><br><span class="line">        alert(num);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn5"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//实际被选择的不是 select, 而是 select 的 option 子节点</span></span><br><span class="line">        <span class="comment">//所以要加一个 空格. </span></span><br><span class="line">        <span class="comment">//var len = $("select :selected").length</span></span><br><span class="line">        <span class="comment">//alert(len);</span></span><br><span class="line">        <span class="comment">//因为 $("select :selected") 选择的是一个数组</span></span><br><span class="line">        <span class="comment">//当该数组中有多个元素时, 通过 .val() 方法就只能获取第一个被选择的值了. </span></span><br><span class="line">        <span class="comment">//alert($("select :selected").val());</span></span><br><span class="line">        <span class="comment">//jQuery 对象遍历的方式使 each, 在 each 内部的 this 是正在</span></span><br><span class="line">        <span class="comment">//得到的 DOM 对象, 而不是一个 jQuery 对象</span></span><br><span class="line">        $(<span class="string">"select :selected"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="keyword">this</span>.value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn4"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">":checkbox[name='newsletter']:checked"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="keyword">this</span>.value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="3-表单选择器"><a href="#3-表单选择器" class="headerlink" title="3.表单选择器"></a>3.表单选择器</h1><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td>:input</td><td>选取所有的input, textarea,select,button元素</td><td>集合元素</td></tr><tr><td>:text</td><td>选取所有的单行文本框</td><td>集合元素</td></tr><tr><td>:password</td><td>选取所有的密码框元素</td><td>集合元素</td></tr><tr><td>:radio</td><td>选取所有的单选框</td><td>集合元素</td></tr><tr><td>:checkbox</td><td>选取所有的多选框</td><td>集合元素</td></tr><tr><td>:submit</td><td>选取所有的提交按钮</td><td>集合元素</td></tr><tr><td>:image</td><td>选取所有的图像按钮</td><td>集合元素</td></tr><tr><td>:reset</td><td>选取所有的重置按钮</td><td>集合元素</td></tr><tr><td>:button</td><td>选取所有的按钮</td><td>集合元素</td></tr><tr><td>:file</td><td>选取所有的上传域</td><td>集合元素</td></tr><tr><td>:hidden</td><td>选取所有的不可见元素</td><td>集合元素</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery选择器续</title>
      <link href="/blog/jQuery1-2.html"/>
      <url>/blog/jQuery1-2.html</url>
      
        <content type="html"><![CDATA[<p>jQuery选择器续</p><a id="more"></a><p>过滤选择器</p><h2 id="1-内容过滤选择器"><a href="#1-内容过滤选择器" class="headerlink" title="1.内容过滤选择器"></a>1.内容过滤选择器</h2><blockquote><p>内容过滤选择器的过滤规则主要体现在它所包含的子元素和文本上</p></blockquote><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td>:contains(text)</td><td>选取含有文本内容为text的元素</td><td>集合元素</td></tr><tr><td>:empty</td><td>选取不包含子元素或文本为空的元素</td><td>集合元素</td></tr><tr><td>:has(selector)</td><td>选取含有选择器所匹配的元素的元素</td><td>集合元素</td></tr><tr><td>:parent</td><td>选取含有子元素或者文本的元素</td><td>集合元素</td></tr></tbody></table><p>html部分:</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        div, span, p &#123;</span></span><br><span class="line"><span class="undefined">            width: 140px;</span></span><br><span class="line"><span class="undefined">            height: 140px;</span></span><br><span class="line"><span class="undefined">            margin: 5px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: <span class="selector-id">#000</span> 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            font-size: 17px;</span></span><br><span class="line"><span class="undefined">            font-family: Verdana;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.mini</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 55px;</span></span><br><span class="line"><span class="undefined">            height: 55px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="undefined">            font-size: 12px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.hide</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择 含有文本 'di' 的 div 元素"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择不包含子元素(或者文本元素) 的 div 空元素"</span> <span class="attr">id</span>=<span class="string">"btn2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择含有 class 为 mini 元素的 div 元素"</span> <span class="attr">id</span>=<span class="string">"btn3"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择含有子元素(或者文本元素)的div元素"</span> <span class="attr">id</span>=<span class="string">"btn4"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">id</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        id 为 one,class 为 one 的div</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">id</span>=<span class="string">"two"</span> <span class="attr">title</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">        id为two,class为one,title为test的div</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"other"</span>&gt;</span>class为mini,title为other<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"test"</span>&gt;</span>class为mini,title为test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"tesst"</span>&gt;</span>class为mini,title为tesst<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:none;"</span> <span class="attr">class</span>=<span class="string">"none"</span>&gt;</span>style的display为"none"的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span>class为"hide"的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        包含input的type为"hidden"的div<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">size</span>=<span class="string">"8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mover"</span>&gt;</span>正在执行动画的div元素.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><p>JS部分:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div:contains('di')"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div:empty"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn3"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div:has(.mini)"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn4"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div:parent"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">        <span class="comment">//$("div:not(:empty)").css("background", "#bfa");</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-可见性过滤选择器"><a href="#2-可见性过滤选择器" class="headerlink" title="2.可见性过滤选择器"></a>2.可见性过滤选择器</h2><blockquote><p>可见性过滤选择器是根据元素的可见和不可见状态来选择相应的元素</p><p>可见选择器: hidden不仅包括样式属性display为none的元素, 也包含文本隐藏域(\&lt;input type=’hidden’/>)和 visible:hidden之类的元素</p></blockquote><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td>:hidden</td><td>选取所有不可见元素</td><td>集合元素</td></tr><tr><td>:visible</td><td>选取所有可见元素</td><td>集合元素</td></tr></tbody></table><p>html部分:</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        div, span, p &#123;</span></span><br><span class="line"><span class="undefined">            width: 140px;</span></span><br><span class="line"><span class="undefined">            height: 140px;</span></span><br><span class="line"><span class="undefined">            margin: 5px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: <span class="selector-id">#000</span> 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            font-size: 17px;</span></span><br><span class="line"><span class="undefined">            font-family: Verdana;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.mini</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 55px;</span></span><br><span class="line"><span class="undefined">            height: 55px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="undefined">            font-size: 12px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.hide</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选取所有可见的  div 元素"</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择所有不可见的 div 元素"</span> <span class="attr">id</span>=<span class="string">"btn2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择所有不可见的 input 元素"</span> <span class="attr">id</span>=<span class="string">"btn3"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">id</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        id 为 one,class 为 one 的div</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">id</span>=<span class="string">"two"</span> <span class="attr">title</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">        id为two,class为one,title为test的div</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"other"</span>&gt;</span>class为mini,title为other<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"test"</span>&gt;</span>class为mini,title为test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"tesst"</span>&gt;</span>class为mini,title为tesst<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:none;"</span> <span class="attr">class</span>=<span class="string">"none"</span>&gt;</span>style的display为"none"的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span>class为"hide"的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        包含input的type为"hidden"的div</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"123456789000"</span> <span class="attr">size</span>=<span class="string">"8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mover"</span>&gt;</span>正在执行动画的div元素.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><p>JS部分:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div:visible"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//alert($("div:hidden").length);</span></span><br><span class="line">        <span class="comment">//show(time):可以使不可见的元素变为可见,time表示时间,以ms为单位</span></span><br><span class="line">        <span class="comment">//jQuery的很多方法支持方法的连缀,即一个方法的返回值仍然是调用该</span></span><br><span class="line">        <span class="comment">//方法的 jQuery 对象:可以继续调用该对象的其他方法.</span></span><br><span class="line">        $(<span class="string">"div:hidden"</span>).show(<span class="number">2000</span>).css(<span class="string">"background"</span>,<span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn3"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//attr()方法,传一个参数表示获取属性值</span></span><br><span class="line">        <span class="comment">//val() 方法可以返回某一个表单元素的 value 属性值. </span></span><br><span class="line">        alert($(<span class="string">"input:hidden"</span>).val());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-属性过滤选择器"><a href="#3-属性过滤选择器" class="headerlink" title="3.属性过滤选择器"></a>3.属性过滤选择器</h2><blockquote><p>属性过滤选择器的过滤规则是通过元素的属性来获取相应的元素, 属性过滤选择器不以”:”开头</p></blockquote><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td>[attribute]</td><td>选取拥有此属性的元素</td><td>集合元素</td></tr><tr><td>[attribute=value]</td><td>选取指定属性的值为value的元素</td><td>集合元素</td></tr><tr><td>[attribute!=value]</td><td>选取指定属性的值不等于value的元素</td><td>集合元素</td></tr><tr><td>[attribute^=value]</td><td>选取指定属性的值以value开始的元素</td><td>集合元素</td></tr><tr><td>[attribute$=value]</td><td>选取指定属性的值以value结束的元素</td><td>集合元素</td></tr><tr><td>[attribute*=value]</td><td>选取指定属性的值含有value的元素</td><td>集合元素</td></tr><tr><td>[selector1]…[selectorn]</td><td>用属性选择器合并成一个复合属性选择器,满足多个条件,每选择一次,缩小一次范围</td><td>集合元素</td></tr></tbody></table><p>html部分:</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        div, span, p &#123;</span></span><br><span class="line"><span class="undefined">            width: 140px;</span></span><br><span class="line"><span class="undefined">            height: 140px;</span></span><br><span class="line"><span class="undefined">            margin: 5px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: <span class="selector-id">#000</span> 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            font-size: 17px;</span></span><br><span class="line"><span class="undefined">            font-family: Verdana;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.mini</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 55px;</span></span><br><span class="line"><span class="undefined">            height: 55px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="undefined">            font-size: 12px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.hide</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选取含有 属性title 的div元素."</span> <span class="attr">id</span>=<span class="string">"btn1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选取 属性title值等于'test'的div元素."</span> <span class="attr">id</span>=<span class="string">"btn2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选取 属性title值不等于'test'的div元素(没有属性title的也将被选中)."</span> <span class="attr">id</span>=<span class="string">"btn3"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选取 属性title值 以'te'开始 的div元素."</span> <span class="attr">id</span>=<span class="string">"btn4"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选取 属性title值 以'est'结束 的div元素."</span> <span class="attr">id</span>=<span class="string">"btn5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选取 属性title值 含有'es'的div元素."</span> <span class="attr">id</span>=<span class="string">"btn6"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"组合属性选择器,首先选取有属性id的div元素，然后在结果中 选取属性title值 含有'es'的 div 元素."</span> <span class="attr">id</span>=<span class="string">"btn7"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选取 含有 title 属性值, 且title 属性值不等于 test 的 div 元素."</span> <span class="attr">id</span>=<span class="string">"btn8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">id</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        id 为 one,class 为 one 的div</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">id</span>=<span class="string">"two"</span> <span class="attr">title</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">        id为two,class为one,title为test的div</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"other"</span>&gt;</span>class为mini,title为other<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"test"</span>&gt;</span>class为mini,title为test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"tesst"</span>&gt;</span>class为mini,title为tesst<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:none;"</span> <span class="attr">class</span>=<span class="string">"none"</span>&gt;</span>style的display为"none"的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span>class为"hide"的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        包含input的type为"hidden"的div<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"123456789"</span> <span class="attr">size</span>=<span class="string">"8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mover"</span>&gt;</span>正在执行动画的div元素.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><p>JS部分:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div[title]"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div[title='test']"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn3"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//选取的元素中包含没有 title 的 div 元素. </span></span><br><span class="line">        $(<span class="string">"div[title!='test']"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn4"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div[title^='te']"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn5"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div[title$='est']"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn6"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div[title*='es']"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn7"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div[id][title*='es']"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn8"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div[title][title!='test']"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery选择器</title>
      <link href="/blog/jQuery1-1.html"/>
      <url>/blog/jQuery1-1.html</url>
      
        <content type="html"><![CDATA[<p>jQuery选择器</p><a id="more"></a><blockquote><p>选择器是jQuery的根基, 在jQuery中, 对事件处理, 遍历DOM和Ajax操作都依赖于选择器</p><p>jQuery选择器的优点:</p><ul><li>写法简洁</li><li>完善的事件处理机制</li></ul></blockquote><h2 id="一-基本选择器"><a href="#一-基本选择器" class="headerlink" title="一.基本选择器"></a>一.基本选择器</h2><blockquote><p>基本选择器是jQuery中最常用的选择器, 也是最简单的选择器, 它通过元素的id, class 和标签名来查找DOM元素(注意: 在一个网页中id只能用一次, class允许重复)</p></blockquote><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td>$(“#id”)</td><td>根据id匹配一个元素</td><td>单个元素</td></tr><tr><td>$(“.class”)</td><td>根据class匹配多个元素</td><td>集合元素</td></tr><tr><td>$(“element”)</td><td>根据元素名匹配元素</td><td>集合元素</td></tr><tr><td>$(“*”)</td><td>匹配所有元素</td><td>集合元素</td></tr><tr><td>$(“selector1,…,selectorn”)</td><td>将每一个选择器匹配到的元素合并一起返回</td><td>集合元素</td></tr></tbody></table><p>上述选择器直接放在 $(“”) 的引号之间</p><h3 id="1-基本选择器示例"><a href="#1-基本选择器示例" class="headerlink" title="1.基本选择器示例"></a>1.基本选择器示例</h3><p>html部分:</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        div, span, p &#123;</span></span><br><span class="line"><span class="undefined">            width: 140px;</span></span><br><span class="line"><span class="undefined">            height: 140px;</span></span><br><span class="line"><span class="undefined">            margin: 5px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: <span class="selector-id">#000</span> 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            font-size: 17px;</span></span><br><span class="line"><span class="undefined">            font-family: Verdana;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.mini</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 55px;</span></span><br><span class="line"><span class="undefined">            height: 55px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="undefined">            font-size: 12px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.hide</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择 id 为 one 的元素"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择 class 为 mini 的所有元素"</span> <span class="attr">id</span>=<span class="string">"btn2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择 元素名是 div 的所有元素"</span> <span class="attr">id</span>=<span class="string">"btn3"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择 所有的元素"</span> <span class="attr">id</span>=<span class="string">"btn4"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择 所有的 span 元素和id为two的元素"</span> <span class="attr">id</span>=<span class="string">"btn5"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">id</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        id 为 one,class 为 one 的div</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">id</span>=<span class="string">"two"</span> <span class="attr">title</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">        id为two,class为one,title为test的div</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"other"</span>&gt;</span>class为mini,title为other<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"test"</span>&gt;</span>class为mini,title为test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"tesst"</span>&gt;</span>class为mini,title为tesst<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:none;"</span> <span class="attr">class</span>=<span class="string">"none"</span>&gt;</span>style的display为"none"的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span>class为"hide"的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        包含input的type为"hidden"的div<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">size</span>=<span class="string">"8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"span"</span>&gt;</span>^^span元素^^<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><p>JS部分:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一定不要忘记引入jQuery库</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"#one"</span>).css(<span class="string">"background-color"</span>,<span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">".mini"</span>).css(<span class="string">"background-color"</span>,<span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn3"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div"</span>).css(<span class="string">"background-color"</span>,<span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn4"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"*"</span>).css(<span class="string">"background-color"</span>,<span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn5"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"span,#two"</span>).css(<span class="string">"background-color"</span>,<span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="二-层次选择器"><a href="#二-层次选择器" class="headerlink" title="二.层次选择器"></a>二.层次选择器</h2><blockquote><p>若想通过DOM元素之间的层次关系来获取特定的元素, 例如: 后代元素 子元素 相邻元素 兄弟元素等, 则需要用层次选择器.</p></blockquote><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td>$(“ancestor descendant”)</td><td>选取ancestor的所有descendant(后代)元素</td><td>集合元素</td></tr><tr><td>$(“parent &gt; child”)</td><td>选取parent的所有child(子)元素</td><td>集合元素</td></tr><tr><td>$(“prev + next”)</td><td>选取紧接在prev元素后的下一个next元素</td><td>集合元素</td></tr><tr><td>$(“prev ~ siblings”)</td><td>选取prev元素后的所有siblings元素</td><td>集合元素</td></tr></tbody></table><blockquote><p>注意: $(“prev ~ siblings”)选择器只能选择#prev元素后的同辈元素; 而jQuery中的 siblings()方法与前后位置无关, 只要是同辈节点即可选取.</p><p>> + - ~ 前后都有一个空格</p></blockquote><h3 id="1-层次选择器示例"><a href="#1-层次选择器示例" class="headerlink" title="1.层次选择器示例"></a>1.层次选择器示例</h3><p>html部分:</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        div, span, p &#123;</span></span><br><span class="line"><span class="undefined">            width: 140px;</span></span><br><span class="line"><span class="undefined">            height: 140px;</span></span><br><span class="line"><span class="undefined">            margin: 5px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: <span class="selector-id">#000</span> 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            font-size: 17px;</span></span><br><span class="line"><span class="undefined">            font-family: Verdana;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.mini</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 55px;</span></span><br><span class="line"><span class="undefined">            height: 55px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="undefined">            font-size: 12px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.hide</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择 body 内的所有 div 元素"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"在 body 内, 选择子元素是 div 的."</span> <span class="attr">id</span>=<span class="string">"btn2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择 id 为 one 的下一个 div 元素"</span> <span class="attr">id</span>=<span class="string">"btn3"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择 id 为 two 的元素后面的所有 div 兄弟元素"</span> <span class="attr">id</span>=<span class="string">"btn4"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择 id 为 two 的元素所有 div 兄弟元素"</span> <span class="attr">id</span>=<span class="string">"btn5"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择 id 为 one 的下一个 span 元素"</span> <span class="attr">id</span>=<span class="string">"btn6"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择 id 为 two 的元素前边的所有的 div 兄弟元素"</span> <span class="attr">id</span>=<span class="string">"btn7"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">id</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        id 为 one,class 为 one 的div</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">id</span>=<span class="string">"two"</span> <span class="attr">title</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">        id为two,class为one,title为test的div</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"other"</span>&gt;</span>class为mini,title为other<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"test"</span>&gt;</span>class为mini,title为test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"tesst"</span>&gt;</span>class为mini,title为tesst<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:none;"</span> <span class="attr">class</span>=<span class="string">"none"</span>&gt;</span>style的display为"none"的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span>class为"hide"的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        包含input的type为"hidden"的div<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">size</span>=<span class="string">"8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"span"</span>&gt;</span>^^span元素^^<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"span"</span>&gt;</span>--span元素--<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><p>JS部分:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"body div"</span>).css(<span class="string">"background-color"</span>,<span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"body &gt; div"</span>).css(<span class="string">"background-color"</span>,<span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn3"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"#one + div"</span>).css(<span class="string">"background-color"</span>,<span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn4"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"#two ~ div"</span>).css(<span class="string">"background-color"</span>,<span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn5"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"#two"</span>).siblings(<span class="string">"div"</span>).css(<span class="string">"background-color"</span>,<span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn6"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//下面的选择器选择的是与 #one 相邻的 span 元素</span></span><br><span class="line">        <span class="comment">//若 span 与 #one 不相邻,则选择器无效</span></span><br><span class="line">        <span class="comment">//$("#one + span").css("background-color","#bfa");</span></span><br><span class="line">        $(<span class="string">"#one"</span>).nextAll(<span class="string">"span:first"</span>).css(<span class="string">"background-color"</span>,<span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn7"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"#two"</span>).prevAll(<span class="string">"div"</span>).css(<span class="string">"background-color"</span>,<span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="三-过滤选择器"><a href="#三-过滤选择器" class="headerlink" title="三.过滤选择器"></a>三.过滤选择器</h2><blockquote><p>通过特定的规则来筛选出所需的DOM元素, 该选择器都以 “:” 开头</p><p>按不同过滤规则, 过滤选择器可分为: 基本过滤、内容过滤、可见性过滤、属性过滤、子元素过滤和表单对象属性过滤选择器.</p></blockquote><h3 id="1-基本过滤选择器"><a href="#1-基本过滤选择器" class="headerlink" title="1.基本过滤选择器"></a>1.基本过滤选择器</h3><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td>:first</td><td>选取第一个元素</td><td>单个元素</td></tr><tr><td>:last</td><td>选取最后一个元素</td><td>集合元素</td></tr><tr><td>:not(selector)</td><td>去除所有与给定选择器匹配的元素</td><td>集合元素</td></tr><tr><td>:even</td><td>选取索引为偶数的所有元素, 索引从0开始</td><td>集合元素</td></tr><tr><td>:odd</td><td>选取索引为奇数的所有元素, 索引从0开始</td><td>集合元素</td></tr><tr><td>:eq(index)</td><td>选取索引等于index, 索引从0开始</td><td>集合元素</td></tr><tr><td>:gt(index)</td><td>选取索引大于index, 索引从0开始</td><td>集合元素</td></tr><tr><td>:lt(index)</td><td>选取索引小于index, 索引从0开始</td><td>集合元素</td></tr><tr><td>:header</td><td>选取所有的标题元素, 如: h1,h2等</td><td>集合元素</td></tr><tr><td>:animated</td><td>选取当前正在执行动画的所有元素</td><td>集合元素</td></tr></tbody></table><p>示例: html部分:</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        div, span, p &#123;</span></span><br><span class="line"><span class="undefined">            width: 140px;</span></span><br><span class="line"><span class="undefined">            height: 140px;</span></span><br><span class="line"><span class="undefined">            margin: 5px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: <span class="selector-id">#000</span> 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            font-size: 17px;</span></span><br><span class="line"><span class="undefined">            font-family: Verdana;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.mini</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 55px;</span></span><br><span class="line"><span class="undefined">            height: 55px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="undefined">            font-size: 12px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.hide</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择第一个 div 元素"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择最后一个 div 元素"</span> <span class="attr">id</span>=<span class="string">"btn2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择class不为 one 的所有 div 元素"</span> <span class="attr">id</span>=<span class="string">"btn3"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择索引值为偶数的 div 元素"</span> <span class="attr">id</span>=<span class="string">"btn4"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择索引值为奇数的 div 元素"</span> <span class="attr">id</span>=<span class="string">"btn5"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择索引值为大于 3 的 div 元素"</span> <span class="attr">id</span>=<span class="string">"btn6"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择索引值为等于 3 的 div 元素"</span> <span class="attr">id</span>=<span class="string">"btn7"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择索引值为小于 3 的 div 元素"</span> <span class="attr">id</span>=<span class="string">"btn8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择所有的标题元素"</span> <span class="attr">id</span>=<span class="string">"btn9"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择当前正在执行动画的所有元素"</span> <span class="attr">id</span>=<span class="string">"btn10"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"选择 id 为 two 的下一个 span 元素"</span> <span class="attr">id</span>=<span class="string">"btn11"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>基本选择器.<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">id</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        id 为 one,class 为 one 的div</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">id</span>=<span class="string">"two"</span> <span class="attr">title</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">        id为two,class为one,title为test的div</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"other"</span>&gt;</span>class为mini,title为other<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"test"</span>&gt;</span>class为mini,title为test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span>&gt;</span>class为mini<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini"</span> <span class="attr">title</span>=<span class="string">"tesst"</span>&gt;</span>class为mini,title为tesst<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:none;"</span> <span class="attr">class</span>=<span class="string">"none"</span>&gt;</span>style的display为"none"的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span>class为"hide"的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        包含input的type为"hidden"的div<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">size</span>=<span class="string">"8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"span"</span>&gt;</span>^^span元素 111^^<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"span"</span>&gt;</span>^^span元素 222^^<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mover"</span>&gt;</span>正在执行动画的div元素.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><p>JS部分:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//之后会说jQuery的动画</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">anmateIt</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"#mover"</span>).slideToggle(<span class="string">"slow"</span>, anmateIt);</span><br><span class="line">    &#125;</span><br><span class="line">    anmateIt();</span><br><span class="line">    $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div:first"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div:last"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn3"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div:not(.one)"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn4"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div:even"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn5"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div:odd"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn6"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div:gt(3)"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn7"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div:eq(3)"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn8"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"div:lt(3)"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn9"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">":header"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn10"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">":animated"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn11"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"#two"</span>).nextAll(<span class="string">"span:first"</span>).css(<span class="string">"background"</span>, <span class="string">"#bfa"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery简介</title>
      <link href="/blog/jQuery1-0.html"/>
      <url>/blog/jQuery1-0.html</url>
      
        <content type="html"><![CDATA[<p>jQuery——write less, do more</p><a id="more"></a><h2 id="一-jQuery简介"><a href="#一-jQuery简介" class="headerlink" title="一.jQuery简介"></a>一.jQuery简介</h2><blockquote><p>为了简化JS开发, 出现了一些JS库. 这些库封装了很多预定义的对象和实用函数. 能帮助使用者建立有高难度交互的Web 2.0特性的富客户端页面, 并兼容大部分浏览器.</p><p>常见的JS库: prototype、dojo、Ext JS、mootools、jQuery</p></blockquote><blockquote><p>jQuery是继prototype之后又一个优秀的JS库</p><p>jQuery理念: 写的少, 做的多. 优点:</p><ul><li>轻量级</li><li>强大的选择器</li><li>出色的DOM操作封装</li><li>可靠的事件处理机制</li><li>完善的Ajax</li><li>出色的浏览器兼容性</li><li>链式操作方式<br>……</li></ul></blockquote><h2 id="二-jQuery的Hello-World"><a href="#二-jQuery的Hello-World" class="headerlink" title="二.jQuery的Hello World"></a>二.jQuery的Hello World</h2><blockquote><p>应用jQuery, 第一步就是引入jQuery库</p><p>jQuery的 $(function(){}) 就相当于 JS 的window.onload</p><p>jQuery的神奇之处: 有非常多的、非常有用的选择器</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.必须引入jQuery库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//1.选取btn按钮</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//2.为id为btn添加onclick响应函数</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//3.弹出Hello World!</span></span></span><br><span class="line"><span class="javascript">                alert(<span class="string">"Hello World!"</span>);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三-jQuery对象"><a href="#三-jQuery对象" class="headerlink" title="三.jQuery对象"></a>三.jQuery对象</h2><blockquote><p>jQuery对象就是通过jQuery的 $() 包装的DOM对象后产生的对象</p><p>jQuery对象是jQuery特有的. jQuery对象可以使用jQuery里的方法, 例: $(“#box”).html()</p><p>jQuery对象无法使用DOM对象的任何方法, 同样DOM对象无法使用jQuery对象里的任何方法</p><p>约定: 若获取的对象为jQuery对象, 在变量面前加上$表示.例: var $variable = jQuery对象;<br>var variable = DOM对象;</p></blockquote><h3 id="1-jQuery对象—-gt-DOM对象"><a href="#1-jQuery对象—-gt-DOM对象" class="headerlink" title="1.jQuery对象—&gt;DOM对象"></a>1.jQuery对象—&gt;DOM对象</h3><blockquote><p>jQuery对象不能用DOM中的方法, 但若jQuery没有封装想要的方法, 不得不用DOM中的方法时, 要将jQUery对象转化为DOM对象.</p><p>①jQuery对象是一个数组对象, 可以通过[index]的方法的到对应的DOM对象.<br>var $cr = $(“#cr”);<br>var cr = $cr[0];</p><p>②使用jQuery中的get(index)方法得到相应的DOM对象<br>var $cr = $(“#cr”);<br>var cr = $cr.get(0);</p></blockquote><h3 id="2-DOM对象—-gt-jQuery对象"><a href="#2-DOM对象—-gt-jQuery对象" class="headerlink" title="2.DOM对象—&gt;jQuery对象"></a>2.DOM对象—&gt;jQuery对象</h3><blockquote><p>对于一个DOM对象, 只需要用 $() 把DOM对象包装起来, 就可以得到一个jQuery对象, 之后就可以用jQuery对象的方法.</p><p>var cr = document.getElementById(“cr”);<br>var $cr = $(cr);</p></blockquote><h2 id="四-jQuery对象的几个常用方法"><a href="#四-jQuery对象的几个常用方法" class="headerlink" title="四.jQuery对象的几个常用方法"></a>四.jQuery对象的几个常用方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>val([value])</td><td>获取或设置表单元素的value属性值</td></tr><tr><td>attr(name[,val])</td><td>获取或设置元素节点的指定属性值</td></tr><tr><td>each()</td><td>对jQuery对象进行遍历,其参数为function,函数内部this代表当前DOM对象</td></tr><tr><td>text([str])</td><td>获取或设置元素节点的文本节点的值</td></tr><tr><td>html([str])</td><td>获取或设置元素的内部html代码</td></tr><tr><td>height()</td><td>设置元素CSS的高度</td></tr><tr><td>width()</td><td>设置元素CSS的宽度</td></tr><tr><td>css(attr,val)</td><td>设置元素指定属性(attr)的值为val</td></tr><tr><td>removeAttr()</td><td>删除指定元素的指定属性</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax-jQuery</title>
      <link href="/blog/Ajax1-2.html"/>
      <url>/blog/Ajax1-2.html</url>
      
        <content type="html"><![CDATA[<p>利用jQuery实现Ajax</p><a id="more"></a><p>jQuery中的Ajax, 最底层$.ajax() 第二层$.load() $.get() $.post(), 第三层$.getScript() $.getJSON()</p><p>最常用的方法是$.load() $.get() $.post()</p><h2 id="一-load"><a href="#一-load" class="headerlink" title="一.$.load()"></a>一.$.load()</h2><blockquote><p>load()方法是jQuery中最为简单和常见的Ajax方法, 能载入远程的HTML代码并插入到DOM中.<br>我们只需用jQuery选择器为HTML片段指定目标位置即可.<br>默认使用 GET 方式 - 传递附加参数时自动转换为 POST 方式</p><p>如果我们只需要返回的全部HTML代码的一部分, 可以将url参数设置为”url selector”(注意url与选择器间有一个空格)</p><p>任何一个HTML的节点都可以使用load()方法来加载Ajax, 结果将直接插入到该节点中的innerHTML中</p></blockquote><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>待装入 HTML 网页网址</td></tr><tr><td>data(可选,对象)</td><td>发送至服务器的 key/value 数据. 在jQuery 1.3中也可以接受一个字符串了.</td></tr><tr><td>callback(可选)</td><td>载入成功时回调函数</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>exer<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        window.onload = function() &#123;</span></span><br><span class="line"><span class="undefined">            $("a").click(function()&#123;</span></span><br><span class="line"><span class="undefined">                var url = this.href;</span></span><br><span class="line"><span class="undefined">                //var url = this.href + " a";//只选择返回的html代码中的a</span></span><br><span class="line"><span class="undefined">                //var args = &#123;"time":new Date()&#125;;//args为JSON格式</span></span><br><span class="line"><span class="undefined">                //若向本地服务器发送POST请求时,本地服务器需要具备处理POST请求的能力</span></span><br><span class="line"><span class="undefined">                $(".detail").load(url);//get请求</span></span><br><span class="line"><span class="undefined">                //$(".detail").load(url,args);//post请求</span></span><br><span class="line"><span class="undefined">                return false;</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .brief &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        .brief a&#123;</span></span><br><span class="line"><span class="undefined">            font-size: 20px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        .detail &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"brief"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sun.html"</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"zhu.html"</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sha.html"</span>&gt;</span>沙和尚<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"detail"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二-get-和-post"><a href="#二-get-和-post" class="headerlink" title="二.$.get()和$.post()"></a>二.$.get()和$.post()</h2><blockquote><p>$.get()方法使用GET方式来进行异步请求. 结构: $.get(url[,data][,callback][,type])</p><p>$.get()方法中的回调函数只有两个参数: data表示返回的数据, 可以是XML、JSON、HTML等; textstatus表示请求状态, 其值可能是: success, error, notmodify, timeout 4种</p><p>请求成功时可调用回调函数, 如果需要在出错时执行函数, 请使用 $.ajax()</p><p>$.get()和$.post()方法是jQuery中的全局函数, 而find()等方法都是对jQuery对象进行操作的方法.</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td>待载入页面的URL地址</td></tr><tr><td>data</td><td>待发送 Key/value 参数</td></tr><tr><td>callback</td><td>载入成功时回调函数</td></tr><tr><td>type</td><td>返回内容格式:xml, html, script, json, text, _default</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        $(function()&#123;</span></span><br><span class="line"><span class="undefined">            $("a").click(function()&#123;</span></span><br><span class="line"><span class="undefined">                var url = this.href;</span></span><br><span class="line"><span class="undefined">                var args = &#123;"time":new Date()&#125;;</span></span><br><span class="line"><span class="undefined">                $.get(url,args,function(data)&#123;</span></span><br><span class="line"><span class="undefined">                    //现在的$.get()方法会根据url识别data格式,此处为xml</span></span><br><span class="line"><span class="undefined">                    //用$(data)包装data,变为jQuery对象</span></span><br><span class="line"><span class="undefined">                    //若data为json格式,这样用:var name = data.person.name;</span></span><br><span class="line"><span class="undefined">                    var name = $(data).find("name").text();</span></span><br><span class="line"><span class="undefined">                    var website = $(data).find("website").text();</span></span><br><span class="line"><span class="undefined">                    var address = $(data).find("address").text();</span></span><br><span class="line"><span class="undefined">                    $(".detail").empty()</span></span><br><span class="line"><span class="xml">                        .append("<span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名:"+name+"<span class="tag">&lt;/<span class="name">p</span>&gt;</span>")</span></span><br><span class="line"><span class="xml">                        .append("<span class="tag">&lt;<span class="name">p</span>&gt;</span>网址:<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"+ website +"</span> <span class="attr">target</span>=<span class="string">'_blank'</span>&gt;</span>简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>")</span></span><br><span class="line"><span class="xml">                        .append("<span class="tag">&lt;<span class="name">p</span>&gt;</span>住址:"+address+"<span class="tag">&lt;/<span class="name">p</span>&gt;</span>");</span></span><br><span class="line"><span class="undefined">                &#125;);//为了明确,建议在第四个参数处指明返回数据的格式,例:"json"</span></span><br><span class="line"><span class="undefined">                return false;</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .brief &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        .brief a&#123;</span></span><br><span class="line"><span class="undefined">            font-size: 20px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        .detail &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"brief"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sun.xml"</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"zhu.xml"</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sha.xml"</span>&gt;</span>沙和尚<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"detail"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><font style="color:red;font-weight:bold;font-size:1.2em;">$.post()方法和$.get()方法类似, 但是若向本地服务器发送POST请求, 本地服务器需要具备处理POST请求的能力</font>]]></content>
      
      
      <categories>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax数据格式</title>
      <link href="/blog/Ajax1-1.html"/>
      <url>/blog/Ajax1-1.html</url>
      
        <content type="html"><![CDATA[<p>Ajax——数据格式</p><a id="more"></a><p>三种数据格式: XML、JSON、HTML</p><h2 id="一-HTML格式"><a href="#一-HTML格式" class="headerlink" title="一.HTML格式"></a>一.HTML格式</h2><blockquote><p>HTML由一些普通文本组成.若服务器通过XMLHttpRequest发送HTML, 文本将存储在responseText属性中.</p><p>可以直接将responseText赋值给节点的innerHTML属性.</p><p>优点:</p><ol><li>从服务器发送的HTML代码在浏览器端不需要用JS再解析</li><li>HTML的可读性好</li><li>HTML代码块与innerHTML属性搭配, 效率高</li></ol><p>缺点:</p><ol><li>若需通过Ajax更新一篇文档的多个部分, HTML不合适</li><li>innerHTML并非DOM标准</li></ol></blockquote><p>同目录下四个html文件: index.html、sun.html、zhu.html、sha.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> briefA = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; briefA.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                briefA[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">                    request.open(<span class="string">"GET"</span>, <span class="keyword">this</span>.href, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                    request.send(<span class="literal">null</span>);</span></span><br><span class="line"><span class="javascript">                    request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(request.readyState == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span>(request.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">                                <span class="built_in">document</span>.getElementsByClassName(<span class="string">"detail"</span>)[<span class="number">0</span>].innerHTML = request.responseText;</span></span><br><span class="line"><span class="undefined">                            &#125;</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">                &#125;;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.brief</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.brief</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="undefined">            font-size: 20px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.detail</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"brief"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sun.html"</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"zhu.html"</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sha.html"</span>&gt;</span>沙和尚<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"detail"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--sun.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名:孙悟空<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>网址:<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://baike.baidu.com/item/%E5%AD%99%E6%82%9F%E7%A9%BA/5576?fr=aladdin"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>住址:花果山<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--zhu.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名:猪八戒<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>网址:<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://baike.baidu.com/item/%E7%8C%AA%E5%85%AB%E6%88%92/769?fr=aladdin"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>住址:高老庄<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--sha.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名:沙和尚<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>网址:<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://baike.baidu.com/item/%E6%B2%99%E6%82%9F%E5%87%80/29248?fromtitle=%E6%B2%99%E5%92%8C%E5%B0%9A&amp;fromid=6472043&amp;fr=aladdin"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>住址:流沙河<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二-XML"><a href="#二-XML" class="headerlink" title="二.XML"></a>二.XML</h2><blockquote><p>XML就是为了传输数据而生的<br>优点:</p><ol><li>XML是一种通用的数据格式</li><li>XML可以为数据自定义标记</li><li>利用DOM就可以完全掌控文档</li></ol><p>缺点:</p><ol><li>若XML文档来自服务器, 就必须得保证文档文档含有正确的部首信息. 若文档类型不正确, 那么responseXML的值将为空</li><li>当浏览器接收到的XML很大时, DOM解析可能会很复杂</li></ol></blockquote><p>同目录下四个文件: index.html、sun.xml、zhu.xml、sha.xml</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> briefA = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> detail = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"detail"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; briefA.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                briefA[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">                    request.open(<span class="string">"GET"</span>, <span class="keyword">this</span>.href, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                    request.send(<span class="literal">null</span>);</span></span><br><span class="line"><span class="javascript">                    request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(request.readyState == <span class="number">4</span>&amp;&amp;request.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//1.接受XML格式数据</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> result = request.responseXML;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//2.解析XML数据</span></span></span><br><span class="line"><span class="undefined">                            /* 目标格式</span></span><br><span class="line"><span class="javascript"> * <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript"> * <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>网址:<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript"> * <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>住址:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="undefined"> */</span></span><br><span class="line"><span class="javascript">                            detail.innerHTML = <span class="string">""</span>;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> name = result.getElementsByTagName(<span class="string">"name"</span>)[<span class="number">0</span>].firstChild.nodeValue;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> web = result.getElementsByTagName(<span class="string">"website"</span>)[<span class="number">0</span>].firstChild.nodeValue;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> address = result.getElementsByTagName(<span class="string">"address"</span>)[<span class="number">0</span>].firstChild.nodeValue;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> p1 = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="javascript">                            p1.innerHTML = <span class="string">"姓名:"</span>+name;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> p2 = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="javascript">                            p2.innerHTML = <span class="string">"网址:"</span>;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> p3 = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="javascript">                            p3.innerHTML = <span class="string">"住址:"</span> + address;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span></span><br><span class="line"><span class="undefined">                            a.href = web;</span></span><br><span class="line"><span class="javascript">                            a.target = <span class="string">"_blank"</span>;</span></span><br><span class="line"><span class="javascript">                            a.innerHTML = <span class="string">"简介"</span>;</span></span><br><span class="line"><span class="undefined">                            p2.appendChild(a);</span></span><br><span class="line"><span class="undefined">                            detail.appendChild(p1);</span></span><br><span class="line"><span class="undefined">                            detail.appendChild(p2);</span></span><br><span class="line"><span class="undefined">                            detail.appendChild(p3);</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">                &#125;;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.brief</span> &#123;<span class="attribute">width</span>: <span class="number">200px</span>;<span class="attribute">margin</span>: <span class="number">0</span> auto;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.brief</span> <span class="selector-tag">a</span>&#123;<span class="attribute">font-size</span>: <span class="number">20px</span>;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.detail</span> &#123;<span class="attribute">width</span>: <span class="number">200px</span>;<span class="attribute">margin</span>: <span class="number">0</span> auto;&#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"brief"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sun.xml"</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"zhu.xml"</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sha.xml"</span>&gt;</span>沙和尚<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"detail"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--sun.xml--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--一定不要忘记XML的部首信息--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">detail</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">website</span>&gt;</span>https://baike.baidu.com/item/%E5%AD%99%E6%82%9F%E7%A9%BA/5576?fr=aladdin<span class="tag">&lt;/<span class="name">website</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span>花果山<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">detail</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--zhu.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">detail</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">website</span>&gt;</span>https://baike.baidu.com/item/%E7%8C%AA%E5%85%AB%E6%88%92/769?fr=aladdin<span class="tag">&lt;/<span class="name">website</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span>高老庄<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">detail</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--sha.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">detail</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>沙和尚<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">website</span>&gt;</span>https://baike.baidu.com/item/%E6%B2%99%E6%82%9F%E5%87%80/29248?fr=aladdin<span class="tag">&lt;/<span class="name">website</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span>流沙河<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">detail</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三-JSON"><a href="#三-JSON" class="headerlink" title="三.JSON"></a>三.JSON</h2><blockquote><p>优点:</p><ol><li>也是一种数据传输的格式, JSON与XML很相似, 但是JSON更轻巧</li><li>JSON不需要从服务端发送含有特定内容类型的首部信息.</li></ol><p>缺点:</p><ol><li>语法严谨</li><li>代码不太易读</li><li>用eval函数解析JSON字符串存在风险</li></ol></blockquote><p>同目录下四个文件: index.html、sun.json、zhu.json、sha.json</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> briefA = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> detail = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"detail"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; briefA.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                briefA[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">                    request.open(<span class="string">"GET"</span>, <span class="keyword">this</span>.href, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                    request.send(<span class="literal">null</span>);</span></span><br><span class="line"><span class="javascript">                    request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(request.readyState == <span class="number">4</span>&amp;&amp;request.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//1.接受json格式数据</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> result = request.responseText;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(result);</span></span><br><span class="line"><span class="javascript">                            detail.innerHTML = <span class="string">""</span>;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> p1 = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="javascript">                            p1.innerHTML = <span class="string">"姓名:"</span>+obj.person.name;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> p2 = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="javascript">                            p2.innerHTML = <span class="string">"网址:"</span>;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> p3 = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="javascript">                            p3.innerHTML = <span class="string">"住址:"</span> + obj.person.address;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span></span><br><span class="line"><span class="undefined">                            a.href = obj.person.website;</span></span><br><span class="line"><span class="javascript">                            a.target = <span class="string">"_blank"</span>;</span></span><br><span class="line"><span class="javascript">                            a.innerHTML = <span class="string">"简介"</span>;</span></span><br><span class="line"><span class="undefined">                            p2.appendChild(a);</span></span><br><span class="line"><span class="undefined">                            detail.appendChild(p1);</span></span><br><span class="line"><span class="undefined">                            detail.appendChild(p2);</span></span><br><span class="line"><span class="undefined">                            detail.appendChild(p3);</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">                &#125;;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.brief</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.brief</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="undefined">            font-size: 20px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.detail</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"brief"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sun.json"</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"zhu.json"</span>&gt;</span>猪八戒<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sha.json"</span>&gt;</span>沙和尚<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"detail"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"person"</span>:&#123;</span><br><span class="line"><span class="attr">"name"</span>:<span class="string">"孙悟空"</span>,</span><br><span class="line"><span class="attr">"website"</span>:<span class="string">"https://baike.baidu.com/item/%E5%AD%99%E6%82%9F%E7%A9%BA/5576?fr=aladdin"</span>,</span><br><span class="line"><span class="attr">"address"</span>:<span class="string">"花果山"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"person"</span>:&#123;</span><br><span class="line"><span class="attr">"name"</span>:<span class="string">"猪八戒"</span>,</span><br><span class="line"><span class="attr">"website"</span>:<span class="string">"https://baike.baidu.com/item/%E7%8C%AA%E5%85%AB%E6%88%92/769?fr=aladdin"</span>,</span><br><span class="line"><span class="attr">"address"</span>:<span class="string">"高老庄"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"person"</span>:&#123;</span><br><span class="line"><span class="attr">"name"</span>:<span class="string">"沙和尚"</span>,</span><br><span class="line"><span class="attr">"website"</span>:<span class="string">"https://baike.baidu.com/item/%E6%B2%99%E6%82%9F%E5%87%80/29248?fr=aladdin"</span>,</span><br><span class="line"><span class="attr">"address"</span>:<span class="string">"流沙河"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax简介</title>
      <link href="/blog/Ajax1-0.html"/>
      <url>/blog/Ajax1-0.html</url>
      
        <content type="html"><![CDATA[<p>AJAX简介</p><a id="more"></a><h2 id="一-什么是AJAX"><a href="#一-什么是AJAX" class="headerlink" title="一.什么是AJAX"></a>一.什么是AJAX</h2><blockquote><p>AJAX, 即Asynchronous JavaScript and XML(异步的 JavaScript 和 XML).<br>AJAX 不是新的编程语言, 而是一种使用现有标准的新方法或技术<br>AJAX 是与服务器交换数据并更新部分网页的艺术, 在不重新加载整个页面的情况下.</p></blockquote><p>现在, 凡是允许浏览器与服务器通信而无须刷新当前页面的技术都被称作Ajax.<br>Ajax最早是由Google使用的.</p><h3 id="1-如何实现Ajax"><a href="#1-如何实现Ajax" class="headerlink" title="1.如何实现Ajax"></a>1.如何实现Ajax</h3><ul><li>Flash</li><li>Java applet</li><li>框架: 如果使用一组框架构造了一个网页, 可以只更新其中一个框架, 而不必惊动整个页面</li><li>隐藏的iframe</li><li>XMLHttpRequest: 该对象是对JS的一个扩展, 可以使网页与服务器进行通信. 这是创建Ajax应用的最佳选择</li></ul><p>实际上, 通常把Ajax当成XMLHttpRequest</p><h3 id="2-Ajax原理"><a href="#2-Ajax原理" class="headerlink" title="2.Ajax原理"></a>2.Ajax原理</h3><p><img src="imgs\JS\ajax.png" alt="ajax"></p><h3 id="3-Ajax工具包"><a href="#3-Ajax工具包" class="headerlink" title="3.Ajax工具包"></a>3.Ajax工具包</h3><blockquote><p>Ajax并不是一项新技术, 它实际上是几种技术, 每种技术各尽其职, 以一种全新的方式聚合在一起.</p></blockquote><ul><li>服务端语言: 服务器需具备向浏览器发送特定信息的能力. Ajax与服务器端语言无关</li><li>XML(eXtensible Markup Language, 可扩展标记语言)是一种描述数据的格式. Ajax程序需要某种格式化的格式来在服务器和客户端之间传递消息, XML是其中一种选择.</li><li>XHTML(eXtensible HyperText Markup Language,可扩展超文本标记语言)(现在是HTML5.0)和CSS(Cascading Style Sheets,层叠样式表)标准化呈现在前端</li><li>DOM(Document Object Model,文档对象模型)实现动态的显示和交互</li><li>使用XMLHttpRequest对象进行异步数据读取</li><li>使用JS绑定和处理数据</li></ul><h3 id="4-Ajax的缺陷"><a href="#4-Ajax的缺陷" class="headerlink" title="4.Ajax的缺陷"></a>4.Ajax的缺陷</h3><ul><li>由JS和Ajax引擎导致的浏览器的兼容问题</li><li>页面局部刷新, 导致后退等功能失效</li><li>对流媒体的支持没有Flash、Java applet好</li><li>一些手持设备(如手机等)支持性差</li></ul><h2 id="二-XMLHttpRequest"><a href="#二-XMLHttpRequest" class="headerlink" title="二.XMLHttpRequest"></a>二.XMLHttpRequest</h2><blockquote><ul><li>XMLHttpRequest最早在IE5中以ActiveX组建形式出现, 非W3C标准</li><li>创建XMLHttpRequest对象的方法不一样: IE5将其实现为一个ActiveX对象, 其他浏览器实现为一个本地JS对象</li><li>虽然在不同浏览器上的实现方法是兼容的, 但是XMLHttpRequest实例的属性和方法是相同的.</li></ul></blockquote><h3 id="1-创建方式"><a href="#1-创建方式" class="headerlink" title="1.创建方式"></a>1.创建方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHTTPObject</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequset)&#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.ActiveXObject)&#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-XMLHttpRequest的方法和属性"><a href="#2-XMLHttpRequest的方法和属性" class="headerlink" title="2.XMLHttpRequest的方法和属性"></a>2.XMLHttpRequest的方法和属性</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>open(“method”,”url”)</td><td>建立对服务器的调用.Method参数可以是GET、POST或PUT.URL参数可以是相对URL或绝对URL</td></tr><tr><td>send(content)</td><td>向服务器发送请求</td></tr><tr><td>setRequestHeader(“header”,”value”)</td><td>把指定首部设置为所提供的值, 在设置任何首部之前必须调用open()</td></tr><tr><td>abort()</td><td>停止当前请求</td></tr><tr><td>getResponseHeader(‘’header’’)</td><td>返回指定首部的值</td></tr><tr><td>getAllResponseHeaders()</td><td>把http请求的所有响应首部作为键/值返回</td></tr></tbody></table><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>onreadystatechange</td><td>每个状态的改变都会触发这个事件的处理器, 通常会调用一个JS函数</td></tr><tr><td>readyState</td><td>请求状态, 有五个: 0-&gt;未初始化, 1-&gt;正在加载, 2-&gt;已经加载, 3-&gt;交互中, 4-&gt;完成.</td></tr><tr><td>responseText</td><td>服务器的响应, 表示一个串</td></tr><tr><td>responseXML</td><td>服务器的响应, 表示为XML, 这个对象可解析为DOM对象</td></tr><tr><td>status</td><td>服务器的http状态码(200-&gt;OK, 404-&gt;NotFound, 等)</td></tr><tr><td>statusText</td><td>http状态码的相应文本(OK或NotFound, 等)</td></tr></tbody></table><h3 id="3-简单的发送请求"><a href="#3-简单的发送请求" class="headerlink" title="3.简单的发送请求"></a>3.简单的发送请求</h3><blockquote><ul><li>利用XMLHttpRequest实例与服务器通信包含以下3个关键部分:</li></ul><ol><li>onreadystatechange事件处理函数</li><li>open方法</li><li>send方法</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//1.获取a节点并为其添加一个onclick响应函数</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>)[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//3.创建一个 XMLHttpRequest 对象</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">                <span class="comment">//4.准备发送请求的数据: url</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> url = <span class="keyword">this</span>.href;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> method = <span class="string">"GET"</span>;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//5.调用 XMLHttpRequest 对象的open方法,准备请求</span></span></span><br><span class="line"><span class="undefined">                request.open(method,url);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//6.调用 XMLHttpRequest 对象的send方法,发送请求</span></span></span><br><span class="line"><span class="javascript">                request.send(<span class="literal">null</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//7.为 XMLHttpRequest 对象添加 onreadystatechange响应函数</span></span></span><br><span class="line"><span class="javascript">                request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//8.判断响应是否完成: XMLHttpRequest 对象的readyState属性值为4时</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(request.readyState==<span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//9.再判断响应是否可用:  XMLHttpRequest 对象status属性值为200</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(request.status==<span class="number">200</span>||request.status==<span class="number">304</span>)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//10.打印相应结果: responseText</span></span></span><br><span class="line"><span class="undefined">                            alert(request.responseText);</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//2.取消a节点的默认行为</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在html文件的同级目录下的ajax.txt文件,内容:Hello Ajax!--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"ajax.txt"</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><font style="color:red;font-size:1.2em;font-weight:bold;">注意: readyState 的值为4时响应成功, 但并不代表响应可用, 当status值表示响应可用时才可使用</font><blockquote><p>onreadystatechange:</p><ul><li>该事件处理函数由服务器触发, 而不是用户触发</li><li>在Ajax执行过程中, 服务器会通知客户端当前的通信状态. 这依靠更新 XMLHttpRequest 对象的readyState属性来实现. 改变readyState属性是服务器对客户端连续操作的一种方式. 每次readyState属性值的改变都会触发onreadystatechange事件</li></ul></blockquote><blockquote><p>open(method,url,asynch):</p><ul><li>该方法允许我们用一个Ajax调用向服务器发送请求(其实是建立一个请求).</li><li>method: 请求类型, 类似”GET”或”POST”的字符串. 若只想从服务器获取信息, 而不需发送信息, 使用GET(GET请求也可通过URL附加的查询字符串来发送数据, 但有长度限制). 若需向服务器发送数据, 用POST请求.</li><li>某些情况下, 有些浏览器会把多个XMLHttpRequest请求的结果缓存在同一个URL下. 如果对每个请求的响应不同, 就会带来不好的效果. 此时, 我们会在请求的URL后附加时间戳, 来确保URL的唯一性, 起到禁用缓存的效果.</li><li>asynch: 表示请求是否异步, 一般取默认值true</li></ul></blockquote><blockquote><p>send(data):<br>GET请求时, data = null; POST请求时, data为相应数据.</p></blockquote><h3 id="4-POST请求"><a href="#4-POST请求" class="headerlink" title="4.POST请求"></a>4.POST请求</h3><p>只需要在GET的基础上将method改为”POST”,并在open()和send()方法之间添加下面语句:</p><p>setRequestHeader(“ContentType”,”application/x-www-form-urlencoded”);</p><font style="color:red;font-size:1.2em;font-weight:bold;">注意: 在开发过程中, 我们一般不用原生的方式来向服务器发送请求.一般用框架来实现, 例如: JQuery等</font>]]></content>
      
      
      <categories>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS-JSON</title>
      <link href="/blog/JS-JSON.html"/>
      <url>/blog/JS-JSON.html</url>
      
        <content type="html"><![CDATA[<p>JSON — JavaScript Object Notation</p><a id="more"></a><h2 id="一-JSON简介"><a href="#一-JSON简介" class="headerlink" title="一.JSON简介"></a>一.JSON简介</h2><ul><li>JSON 指的是 JavaScript 对象表示法(JavaScript Object Notation)</li><li><p>JSON 是一个特殊的字符串, 它能被任意编程语言识别, 并可转换为任意语言中的对象</p></li><li><p>JSON 是轻量级的文本数据交换格式</p></li><li>JSON 使用 JavaScript 语法来描述数据对象, 但是 JSON 仍然独立于语言和平台. JSON 解析器和JSON 库支持许多不同的编程语言.</li></ul><h3 id="1-JSON与XML"><a href="#1-JSON与XML" class="headerlink" title="1.JSON与XML"></a>1.JSON与XML</h3><p>JSON类似 XML(也是用来进行数据交换的)</p><ul><li>JSON 是纯文本</li><li>JSON 具有“自我描述性”(人类可读)</li><li>JSON 具有层级结构(值中存在值)</li><li>JSON 可通过 JavaScript 进行解析</li><li>JSON 数据可使用 AJAX 进行传输</li></ul><p>相比 XML 的不同之处</p><ul><li>没有结束标签</li><li>更短</li><li>读写的速度更快</li><li>能够使用内建的 JavaScript eval() 方法进行解析</li><li>使用数组</li><li>不使用保留字</li></ul><font style="color:red;font-size:1.2em;font-weight:bold">现在都用JS的JSON工具类来解析JSON</font><h2 id="二-JSON语法"><a href="#二-JSON语法" class="headerlink" title="二.JSON语法"></a>二.JSON语法</h2><p>   JSON 语法是 JavaScript 对象表示法语法的子集</p><ul><li>数据在名称/值对中</li><li>数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><h3 id="1-JSON名值对"><a href="#1-JSON名值对" class="headerlink" title="1.JSON名值对"></a>1.JSON名值对</h3><p>JSON 数据的书写格式是: 名称/值对.</p><blockquote><p>名称/值对包括字段名称(<font style="color:red;">必须在双引号中</font>), 后面写一个冒号, 然后是值:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"firstName"</span> : <span class="string">"John"</span>;</span><br><span class="line"><span class="comment">//上面就等价于JS语句</span></span><br><span class="line">firstName = <span class="string">"John"</span>;</span><br></pre></td></tr></table></figure><h3 id="2-JSON的值"><a href="#2-JSON的值" class="headerlink" title="2.JSON的值"></a>2.JSON的值</h3><ul><li>数字(整数或浮点数)</li><li>字符串(在双引号中)</li><li>逻辑值(true 或 false)</li><li>数组(在方括号中)</li><li>对象(在花括号中)</li><li>null</li></ul><h3 id="3-JSON对象"><a href="#3-JSON对象" class="headerlink" title="3.JSON对象"></a>3.JSON对象</h3><blockquote><p>JSON 对象在花括号中书写:<br>对象可以包含多个名称/值对:</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'&#123;"name":"孙悟空","age":500,"sex":"男","status":true&#125;'</span><br></pre></td></tr></table></figure><h3 id="4-JSON数组"><a href="#4-JSON数组" class="headerlink" title="4.JSON数组"></a>4.JSON数组</h3><blockquote><p>   JSON 数组在方括号中书写:</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'[1,2,3,4,5]'</span><br></pre></td></tr></table></figure><p>JSON对象与数组可以嵌套</p><h3 id="5-JSON文件"><a href="#5-JSON文件" class="headerlink" title="5.JSON文件"></a>5.JSON文件</h3><ul><li>JSON 文件的文件类型是 “.json”</li><li>JSON 文本的 MIME 类型是 “application/json”</li></ul><h2 id="三-JSON与JS对象转换"><a href="#三-JSON与JS对象转换" class="headerlink" title="三.JSON与JS对象转换"></a>三.JSON与JS对象转换</h2><h3 id="1-JSON—-gt-JS对象"><a href="#1-JSON—-gt-JS对象" class="headerlink" title="1.JSON—&gt;JS对象"></a>1.JSON—&gt;JS对象</h3><blockquote><p>JSON.parse()方法:<br>将指定JSON字符串转换为JS对象并返回</p><p>eval()函数:<br>这个函数可以用来执行一段字符串形式的JS代码, 并将执行结果返回</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//法1:</span></span><br><span class="line"><span class="keyword">var</span> jstr = <span class="string">'&#123;"name":"孙悟空","age":500,"sex":"男","status":true&#125;'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(jstr);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> obj);<span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name);<span class="comment">//孙悟空</span></span><br><span class="line"><span class="comment">//IE7及以下浏览器不支持JSON类,可以用法2</span></span><br><span class="line"><span class="comment">//法2:</span></span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">eval</span>(<span class="string">"("</span>+jstr+<span class="string">")"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> obj2);<span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.name);<span class="comment">//孙悟空</span></span><br></pre></td></tr></table></figure><h3 id="2-JS对象—-gt-JSON"><a href="#2-JS对象—-gt-JSON" class="headerlink" title="2.JS对象—&gt;JSON"></a>2.JS对象—&gt;JSON</h3><blockquote><p>JSON.stringify()方法:<br>将指定JS对象转换为JSON字符串并返回</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">"孙悟空"</span>,<span class="attr">age</span>:<span class="number">500</span>,<span class="attr">sex</span>:<span class="string">"男"</span>,<span class="attr">status</span>:<span class="literal">true</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> jstr = <span class="built_in">JSON</span>.stringify(obj);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> jstr);<span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(jstr);<span class="comment">//'&#123;"name":"孙悟空","age":500,"sex":"男","status":true&#125;'</span></span><br></pre></td></tr></table></figure><p>若想兼容IE7及以下浏览器, 可以引入外部JS(文件里实现了JSON工具类)</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSclassName</title>
      <link href="/blog/JSclassName.html"/>
      <url>/blog/JSclassName.html</url>
      
        <content type="html"><![CDATA[<p>JS基础—类的相关操作</p><a id="more"></a><h2 id="一-JS直接修改style属性"><a href="#一-JS直接修改style属性" class="headerlink" title="一.JS直接修改style属性"></a>一.JS直接修改style属性</h2><blockquote><ul><li><p>通过style属性来修改元素的样式, 每修改一个样式, 浏览器需要重新渲染一次页面</p></li><li><p>这样的话, 执行性能是比较差的, 而且当我们要修改很多样式时, 用这种方式也很不方便</p></li><li><p>过多的使用这种方法, 网页的行为与表现也很大程度上耦合了</p></li><li><p>而我们希望, 一行JS代码就可以同时修改多个样式.</p></li><li>这时我们可以准备两套(或多套)CSS样式, 当需要修改时, 直接用JS替换为另一套就可以了</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> btn01 = <span class="built_in">document</span>.getElementById(<span class="string">"btn01"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="javascript">            btn01.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                box.style.width = <span class="number">200</span> + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="javascript">                box.style.height = <span class="number">200</span> + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="javascript">                box.style.backgroundColor = <span class="string">"yellowgreen"</span>;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.b1</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            background-color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn01"</span>&gt;</span>修改样式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">class</span>=<span class="string">"b1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二-修改class属性"><a href="#二-修改class属性" class="headerlink" title="二.修改class属性"></a>二.修改class属性</h2><blockquote><p>我们可以通过修改元素的class属性来间接修改样式, 这样一来, 我们只需一行代码, 就可同时修改多个样式, 浏览器也只需重新渲染一次, 性能提升, 这种方式也可使表现和行为进一步分离.</p><p>在开发的过程中, 能通过class属性修改样式, 尽量这样使用.</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> btn01 = <span class="built_in">document</span>.getElementById(<span class="string">"btn01"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="javascript">            btn01.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                box.className = <span class="string">"b2"</span>;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.b1</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 300px;</span></span><br><span class="line"><span class="undefined">            background-color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.b2</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: yellowgreen;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn01"</span>&gt;</span>修改样式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">class</span>=<span class="string">"b1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三-操作元素的class属性"><a href="#三-操作元素的class属性" class="headerlink" title="三.操作元素的class属性"></a>三.操作元素的class属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为元素的class属性添加一个值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">obj,cname</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!hasClass(obj,cname))&#123;</span><br><span class="line">        obj.className += <span class="string">" "</span>+cname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断元素class属性是否有某个值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">obj,cname</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//利用正则表达式检测</span></span><br><span class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\b"</span>+cname+<span class="string">"\\b"</span>);</span><br><span class="line">    <span class="keyword">return</span> reg.test(obj.className);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除元素class属性中的某个值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">obj,cname</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//利用正则表达式替换为空串</span></span><br><span class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\b"</span>+cname+<span class="string">"\\b"</span>);</span><br><span class="line">    obj.className = obj.className.replace(reg,<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//替换元素class属性中的某个值(有则删除,无则添加)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleClass</span>(<span class="params">obj,cname</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(hasClass(obj,cname))&#123;</span><br><span class="line">        removeClass(obj,cname);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        addClass(obj,cname);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSBOM定时器</title>
      <link href="/blog/JSBOM1-1.html"/>
      <url>/blog/JSBOM1-1.html</url>
      
        <content type="html"><![CDATA[<p>window对象的定时器</p><a id="more"></a><h2 id="一-setInterval"><a href="#一-setInterval" class="headerlink" title="一.setInterval()"></a>一.setInterval()</h2><p>如果我们希望一段程序可以每隔一段时间执行一次, 这就用到了我们的定时器.</p><blockquote><p>setInterval()<br>—— 可以将一个函数每隔一段时间执行一次.<br>—— 参数:1. 回调函数, 该函数每隔一段时间会被调用一次<br>—— 2. 调用回调函数的时间间隔<br>—— 返回值: 一个Number型的数字, 这个数字作为定时器的唯一标识<br>—— 注意, 第一次调用回调函数会等一个参数时间间隔</p><p>clearInterval(timer) 可以关闭一个timer标识的setInterval()定时器</p></blockquote><h3 id="1-定时调用示例"><a href="#1-定时调用示例" class="headerlink" title="1.定时调用示例"></a>1.定时调用示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> text = <span class="built_in">document</span>.getElementById(<span class="string">"text"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> num = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                text.innerHTML = num++;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(num==<span class="number">11</span>)&#123;</span></span><br><span class="line"><span class="undefined">                    clearInterval(timer);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,500);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-移动div"><a href="#2-移动div" class="headerlink" title="2.移动div"></a>2.移动div</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> div = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> speed = <span class="number">10</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">switch</span> (div) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="number">37</span>:box.style.left = box.offsetLeft - speed + <span class="string">"px"</span>;<span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="number">38</span>:box.style.top = box.offsetTop - speed + <span class="string">"px"</span>;<span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="number">39</span>:box.style.left = box.offsetLeft + speed + <span class="string">"px"</span>;<span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="number">40</span>:box.style.top = box.offsetTop + speed + <span class="string">"px"</span>;<span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;, 30);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (event.altKey)speed = <span class="number">100</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">else</span> speed = <span class="number">10</span>;</span></span><br><span class="line"><span class="undefined">                div = event.keyCode;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.onkeyup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                    div = 0;</span></span><br><span class="line"><span class="undefined">                &#125;;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"width:100px;height:100px;background-color:red;position:absolute;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二-延时调用"><a href="#二-延时调用" class="headerlink" title="二.延时调用"></a>二.延时调用</h2><blockquote><p>延时调用: 延时调用一个函数, 不会马上执行, 而是隔一段时间之后在执行, 且只会执行一次</p><p>延时调用与定时调用的区别, 定时调用会多次调用回调函数, 延时调用只会调用一次</p><p>延时调用和定时调用实际上可以互相代替</p><p>延时调用用setTimeout()函数实现</p></blockquote><h2 id="1-setTimeout"><a href="#1-setTimeout" class="headerlink" title="1.setTimeout()"></a>1.setTimeout()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num++);<span class="comment">//1s后打印</span></span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line">cleanTimeout(timer);<span class="comment">//关闭定时器</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSBOM简介</title>
      <link href="/blog/JSBOM1-0.html"/>
      <url>/blog/JSBOM1-0.html</url>
      
        <content type="html"><![CDATA[<p>JSBOM简介</p><a id="more"></a><h2 id="一-BOM简介"><a href="#一-BOM简介" class="headerlink" title="一.BOM简介"></a>一.BOM简介</h2><blockquote><p>BOM<br>—— 即浏览器对象模型<br>—— BOM可以使我们通过JS来操作浏览器</p><p>BOM对象:<br>—— Window, 代表的是整个浏览器窗口, 同时window也是网页中的全局对象<br>—— Navigator, 代表当前浏览器的信息, 通过该对象可以识别不同浏览器<br>—— Location, 代表当前浏览器的地址栏信息, 通过它可以获取地址栏信息, 或者操作浏览器跳转页面<br>—— History, 代表浏览器的历史记录, 由于隐私, 该对象不能获取到具体的历史记录, 只能操作浏览器向前或向后翻页且该操作只在当次访问时有效.<br>—— Screen, 代表用户的屏幕信息, 通过它可以获取到用户的显示器相关信息(一般用于手机端)</p><p>以上BOM对象在浏览器中都是作为window对象的属性保存, 可以通过window对象调用, 也可以直接调用.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.navigator);</span><br><span class="line"><span class="built_in">console</span>.log(location);</span><br><span class="line"><span class="built_in">console</span>.log(history);</span><br><span class="line"><span class="built_in">console</span>.log(screen);</span><br></pre></td></tr></table></figure><h2 id="二-Navigator"><a href="#二-Navigator" class="headerlink" title="二.Navigator"></a>二.Navigator</h2><ul><li>代表的是当前浏览器的信息, 通过该对象可以识别不同的浏览器</li><li>由于历史原因, Navigator对象中的大部分属性都已无法帮助我们识别不同的浏览器</li><li>一般我们使用userAgent(用户代理即浏览器)来判断浏览器信息, 它是一个字符串, 存储着浏览器的信息, 不同的浏览器有不同的userAgent, 但用userAgent不能区分IE11</li><li>若通过userAgent不能判断, 还可以用一些浏览器中特有的对象或属性, 来判断浏览器信息, 比如: IE特有的ActiveXObject</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*navigator.userAgent</span></span><br><span class="line"><span class="comment"> *chrome:Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36</span></span><br><span class="line"><span class="comment"> *IE8:Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)</span></span><br><span class="line"><span class="comment"> *IE9:Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)</span></span><br><span class="line"><span class="comment"> *IE10:Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)</span></span><br><span class="line"><span class="comment"> *IE11:Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; rv:11.0) like Gecko</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"ActiveXObject"</span> <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</span><br><span class="line">    alert(<span class="string">"你是IE"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="regexp">/firefox/i</span>.test(navigator.userAgent))&#123;</span><br><span class="line">    alert(<span class="string">"你是火狐"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="regexp">/chrome/i</span>.test(navigator.userAgent))&#123;</span><br><span class="line">    alert(<span class="string">"你是谷歌"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-History"><a href="#三-History" class="headerlink" title="三.History"></a>三.History</h2><table><thead><tr><th>属性或方法</th><th>描述</th></tr></thead><tbody><tr><td>length</td><td>返回浏览器历史列表中的URL数量</td></tr><tr><td>back()</td><td>加载history列表中的前一个 URL</td></tr><tr><td>forward()</td><td>加载history列表中的下一个 URL</td></tr><tr><td>go()</td><td>加载history列表中的某个具体页面(参数决定)</td></tr></tbody></table><blockquote><p>history方法的功能相当于浏览器的前进和后退按钮的功能</p><p>go() 参数(整数): 1 相当于forward(); -1 相当于back(); 2 前进两次</p></blockquote><h2 id="四-location"><a href="#四-location" class="headerlink" title="四.location"></a>四.location</h2><blockquote><p>代表地址栏信息, 若直接打印location, 则可以打印出地址栏当前页面的完整URL</p><p>若直接将location修改为一个绝对地址或相对地址, 则当前页面会自动跳转到该路径, 并会生成相应的历史记录.</p></blockquote><table><thead><tr><th>属性或方法</th><th>描述</th></tr></thead><tbody><tr><td>href</td><td>设置或返回完整的 URL</td></tr><tr><td>host</td><td>设置或返回主机名和当前 URL 的端口号</td></tr><tr><td>hostname</td><td>设置或返回当前 URL 的主机名</td></tr><tr><td>port</td><td>设置或返回当前 URL 的端口号</td></tr><tr><td>pathname</td><td>设置或返回当前 URL 的路径部分</td></tr><tr><td>protocol</td><td>设置或返回当前 URL 的协议</td></tr><tr><td>search</td><td>设置或返回从问号(?)开始的URL(查询部分)</td></tr><tr><td>assign()</td><td>加载新的文档, 相当于修改location</td></tr><tr><td>reload()</td><td>重新加载当前文档</td></tr><tr><td>replace()</td><td>用新的文档替换当前文档</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jump = <span class="built_in">document</span>.getElementById(<span class="string">"jump"</span>);</span></span><br><span class="line"><span class="javascript">            jump.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// location = "index.html";</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// location = "https://www.baidu.com";</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 和修改location一样</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// location.assign("https://www.baidu.com");</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 效果和assign()类似,但不会产生历史记录</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// location.replace("https://www.baidu.com");</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 刷新当前页面,和浏览器刷新按钮以及F5一样,若参数为true,则会强制刷新页面缓存</span></span></span><br><span class="line"><span class="javascript">                location.reload(<span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"jump"</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSDOM事件续</title>
      <link href="/blog/JSDOM1-6.html"/>
      <url>/blog/JSDOM1-6.html</url>
      
        <content type="html"><![CDATA[<p>JSDOM事件续</p><a id="more"></a><h2 id="一-事件的传播"><a href="#一-事件的传播" class="headerlink" title="一.事件的传播"></a>一.事件的传播</h2><blockquote><p>事件的传播分为三个阶段:<br>——1.捕获阶段<br>——– 在捕获阶段时, 从最外层的祖先元素, 向目标元素进行事件捕获, 但此时默认不会触发事件<br>——2.目标阶段<br>——– 事件捕获到目标元素, 捕获结束, 并开始在目标元素上触发事件<br>——3.冒泡阶段<br>——– 事件从目标元素向他的祖先元素传递, 依次触发祖先元素上的相应事件</p><p>如果希望在捕获阶段就触发事件, 可以将addEventListener()方法中的第三个参数设置为true, 但一般情况下, 我们不会这么做, 所以一般这个参数都是false</p><p>IE8及以下浏览器没有捕获阶段</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">obj,event,callback</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(obj.addEventListener)&#123;</span></span><br><span class="line"><span class="javascript">                obj.addEventListener(event,callback,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                obj.attachEvent(<span class="string">"on"</span>+event,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                    callback.call(obj);</span></span><br><span class="line"><span class="undefined">                &#125;);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box2 = <span class="built_in">document</span>.getElementById(<span class="string">"box2"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box3 = <span class="built_in">document</span>.getElementById(<span class="string">"box3"</span>);</span></span><br><span class="line"><span class="javascript">            bind(box1,<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="keyword">this</span>.id);&#125;);</span></span><br><span class="line"><span class="javascript">            bind(box2,<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="keyword">this</span>.id);&#125;);</span></span><br><span class="line"><span class="javascript">            bind(box3,<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="keyword">this</span>.id);&#125;);</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#box1</span>&#123;<span class="attribute">width</span>: <span class="number">300px</span>;<span class="attribute">height</span>: <span class="number">300px</span>;<span class="attribute">background-color</span>: <span class="number">#bfc</span>;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#box2</span>&#123;<span class="attribute">width</span>: <span class="number">200px</span>;<span class="attribute">height</span>: <span class="number">200px</span>;<span class="attribute">background-color</span>: red;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#box3</span>&#123;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">background-color</span>: yellow;&#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span>box1</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span>box2</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box3"</span>&gt;</span>box3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二-拖拽"><a href="#二-拖拽" class="headerlink" title="二.拖拽"></a>二.拖拽</h2><ul><li>流程:</li><li>——1.鼠标在被拖拽元素上按下时, 开始拖拽  onmousedown</li><li>——2.鼠标移动时, 被拖拽元素跟随鼠标移动 onmousemove</li><li>——3.鼠标松开时, 被拖拽元素固定在当前位置 onmouseup</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">obj</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//1.鼠标在obj上按下时,开始拖拽</span></span></span><br><span class="line"><span class="javascript">            obj.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//设置obj捕获第一次onmousedown事件</span></span></span><br><span class="line"><span class="undefined">                obj.setCapture &amp;&amp; obj.setCapture();</span></span><br><span class="line"><span class="javascript">                event = event||<span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> ol = event.clientX - obj.offsetLeft;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> ot = event.clientY - obj.offsetTop;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//2.obj随鼠标移动</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    event = event||<span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> top = event.clientY - ol;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> left = event.clientX - ot;</span></span><br><span class="line"><span class="javascript">                    obj.style.left = left + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="javascript">                    obj.style.top = top + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="undefined">                &#125;;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//3.鼠标松开,固定obj</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//鼠标松开时,取消obj对鼠标按下的捕获</span></span></span><br><span class="line"><span class="undefined">                    obj.releaseCapture &amp;&amp; obj.releaseCapture();</span></span><br><span class="line"><span class="undefined">                &#125;;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//当我们拖拽网页中的内容时,浏览器会默认到搜索引擎中搜索该内容</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//此时会导致拖拽异常,可以通过return false;取消搜索</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//IE8及以下不支持,可以用setCapture()实现</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box2 = <span class="built_in">document</span>.getElementById(<span class="string">"box2"</span>);</span></span><br><span class="line"><span class="undefined">            draw(box1);</span></span><br><span class="line"><span class="undefined">            draw(box2);</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#box1</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#FF0000</span>;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#box2</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#bfa</span>;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            left: 200px;</span></span><br><span class="line"><span class="undefined">            top: 200px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>文本内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三-滚轮事件"><a href="#三-滚轮事件" class="headerlink" title="三.滚轮事件"></a>三.滚轮事件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">obj,event,callback</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(obj.addEventListener)&#123;</span></span><br><span class="line"><span class="javascript">                obj.addEventListener(event,callback,<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                obj.attachEvent(<span class="string">"on"</span>+event,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                    callback.call(obj);</span></span><br><span class="line"><span class="undefined">                &#125;);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//一般浏览器添加滚轮事件</span></span></span><br><span class="line"><span class="javascript">            box1.onmousewheel = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(event.wheelDelta&gt;<span class="number">0</span>||event.detail&lt;<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    box1.style.height = box1.clientHeight - <span class="number">10</span> + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                    box1.style.height = box1.clientHeight + <span class="number">10</span> + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//取消Firefox附带滚动条的默认行为</span></span></span><br><span class="line"><span class="undefined">                event.preventDefault &amp;&amp; event.preventDefault();</span></span><br><span class="line"><span class="javascript">                <span class="comment">//取消附带滚动条的默认行为</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//Firefox添加滚轮事件</span></span></span><br><span class="line"><span class="javascript">            bind(box1,<span class="string">"DomMouseScroll"</span>,box1.onmousewheel);</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#box1</span>&#123;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">background-color</span>: red;&#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四-键盘事件"><a href="#四-键盘事件" class="headerlink" title="四.键盘事件"></a>四.键盘事件</h2><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>onkeydown</td><td>某个键盘的键被按下</td></tr><tr><td>onkeyup</td><td>某个键盘的键被松开</td></tr><tr><td>onkeypress</td><td>某个键盘的键被按下或按住</td></tr></tbody></table><blockquote><p>键盘事件一般绑定给一些可以获取焦点的对象(一般为表单项)或者document</p><p>对于onkeydown事件来说, 若一直按着某个键不松手, 则事件一直在被触发;当它被连续触发时, 第一次和第二次触发之间会间隔稍微长一些, 之后触发很快; 这种设计是为了防止误操作</p></blockquote><table><thead><tr><th>键盘事件属性</th><th>描述</th></tr></thead><tbody><tr><td>altKey</td><td>返回当事件被触发时，”ALT” 是否被按下</td></tr><tr><td>ctrlKey</td><td>返回当事件被触发时，”CTRL” 键是否被按下</td></tr><tr><td>shiftKey</td><td>返回当事件被触发时，”SHIFT” 键是否被按下</td></tr><tr><td>keyCode</td><td>对于keypress事件, 该属性声明了被敲击的键生成的Unicode字符码. 对于keydown和keyup事件, 它指定了被敲击的键的虚拟键盘码. 虚拟键盘码可能和使用的键盘的布局相关.</td></tr></tbody></table><h3 id="1-键盘事件示例"><a href="#1-键盘事件示例" class="headerlink" title="1.键盘事件示例"></a>1.键盘事件示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> text = <span class="built_in">document</span>.getElementById(<span class="string">"text"</span>);</span></span><br><span class="line"><span class="javascript">            text.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                event = event||<span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//主键区数字:48-57,数字键区:96-105</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//禁止在文本框中输入数字</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(event.keyCode&gt;=<span class="number">48</span>&amp;&amp;event.keyCode&lt;=<span class="number">57</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//取消在文本框中输出文本的默认行为</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(event.keyCode&gt;=<span class="number">96</span>&amp;&amp;event.keyCode&lt;=<span class="number">105</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(event.ctrlKey&amp;&amp;event.keyCode==<span class="number">65</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"ctrl + A 被按下"</span>);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-使用键盘移动div"><a href="#2-使用键盘移动div" class="headerlink" title="2.使用键盘移动div"></a>2.使用键盘移动div</h3><p>这里用键盘移动div有个小问题, 假如一直按着→键, div在第一次移动之后会有一点卡顿(这时为了防止按键的误操作), 但这不是我们希望的, 之后会用定时器解决这个问题.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                event = event||<span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> speed = <span class="number">10</span>;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//按住alt键加速</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(event.altKey)&#123;</span></span><br><span class="line"><span class="undefined">                    speed = 50;</span></span><br><span class="line"><span class="javascript">                &#125;<span class="comment">//左:37 上:38 右:40 下:41</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">switch</span>(event.keyCode)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="number">37</span>:box.style.left = box.offsetLeft - speed + <span class="string">"px"</span>;<span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="number">38</span>:box.style.top = box.offsetTop - speed + <span class="string">"px"</span>;<span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="number">39</span>:box.style.left = box.offsetLeft + speed + <span class="string">"px"</span>;<span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="number">40</span>:box.style.top = box.offsetTop + speed + <span class="string">"px"</span>;<span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;background-color: red;position: absolute;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSDOM事件</title>
      <link href="/blog/JSDOM1-5.html"/>
      <url>/blog/JSDOM1-5.html</url>
      
        <content type="html"><![CDATA[<p>DOM事件</p><a id="more"></a><h2 id="一-事件对象"><a href="#一-事件对象" class="headerlink" title="一.事件对象"></a>一.事件对象</h2><blockquote><p>事件对象: 当事件对应的响应函数被触发时, 浏览器每次都会将一个事件对象作为实参传递进响应函数, 在事件对象中封装了当前事件相关的一切信息, 比如: 鼠标坐标、键盘哪个按键被按下、鼠标滚轮滚动方向。。。</p><p>IE8及以下浏览器, 响应函数被触发时, 浏览器不会传递事件对象, 而把事件对象作为window对象的属性保存</p></blockquote><table><thead><tr><th>事件句柄</th><th>描述</th></tr></thead><tbody><tr><td>onmousemove</td><td>鼠标被移动</td></tr><tr><td>onunload</td><td>用户退出页面</td></tr><tr><td>onfocus</td><td>元素获得焦点</td></tr></tbody></table><table><thead><tr><th>鼠标属性</th><th>描述</th></tr></thead><tbody><tr><td>clientX</td><td>返回当事件被触发时，鼠标指针的水平坐标</td></tr><tr><td>clientY</td><td>返回当事件被触发时，鼠标指针的垂直坐标</td></tr><tr><td>pageX</td><td>鼠标相当于当前页面的水平坐标(IE9+)</td></tr><tr><td>pageY</td><td>鼠标相当于当前页面的垂直坐标(IE9+)</td></tr></tbody></table><font style="color:red;font-size:1.2em;font-weight:bold;">注意: 所有的html代码, 均可直接复制, 然后粘贴到<a href="http://www.w3school.com.cn/tiy/t.asp?f=html_intro" target="_blank" rel="noopener">W3School</a> 代码区, 点击提交代码在线执行.</font><h3 id="1-div随鼠标移动"><a href="#1-div随鼠标移动" class="headerlink" title="1.div随鼠标移动"></a>1.div随鼠标移动</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> move = <span class="built_in">document</span>.getElementById(<span class="string">"move"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                event = event||<span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> st = <span class="built_in">document</span>.body.scrollTop||<span class="built_in">document</span>.documentElement.scrollTop;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> sl = <span class="built_in">document</span>.body.scrollLeft||<span class="built_in">document</span>.documentElement.scrollLeft;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> left = event.clientX + sl;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> top = event.clientY + st;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//clientY是相对于浏览器原点鼠标的垂直坐标,</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//当页面中有滚动条时会出现错误,需要修改坐标</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//你可以将+sl或+st去掉试试</span></span></span><br><span class="line"><span class="javascript">                move.style.left = left + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="javascript">                move.style.top = top + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        body&#123;</span></span><br><span class="line"><span class="undefined">            height: 1000px;</span></span><br><span class="line"><span class="undefined">            width: 2000px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#move</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            background-color: red;</span></span><br><span class="line"><span class="css">            <span class="comment">/*开启定位,否则设置div的left和top没用*/</span></span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"move"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二-事件的冒泡"><a href="#二-事件的冒泡" class="headerlink" title="二.事件的冒泡"></a>二.事件的冒泡</h2><blockquote><p>所谓事件冒泡, 就是指事件的向上传导, 当后代元素上的事件被触发时, 其祖先元素的相同事件也会被触发</p><p>而在开发中, 大部分情况下冒泡都是有用的, 但是有时候我们不希望事件冒泡.</p><p>取消冒泡: 通过将事件对象的cancelBubble属性设置为true, 即可取消冒泡.</p></blockquote><p>例: 取消id为box的div的onmousemove事件的冒泡, 红色的div则不能随鼠标移动到box上</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> move = <span class="built_in">document</span>.getElementById(<span class="string">"move"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                event = event||<span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> st = <span class="built_in">document</span>.body.scrollTop||<span class="built_in">document</span>.documentElement.scrollTop;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> sl = <span class="built_in">document</span>.body.scrollLeft||<span class="built_in">document</span>.documentElement.scrollLeft;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> left = event.clientX + sl;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> top = event.clientY + st;</span></span><br><span class="line"><span class="javascript">                move.style.left = left + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="javascript">                move.style.top = top + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="javascript">            box.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                event = event||<span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//取消box的onmousemove的冒泡</span></span></span><br><span class="line"><span class="javascript">                event.cancelBubble = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        *&#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        body&#123;</span></span><br><span class="line"><span class="undefined">            height: 1000px;</span></span><br><span class="line"><span class="undefined">            width: 2000px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#move</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            background-color: red;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"width: 400px;height: 400px;background-color: #bfa;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"move"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><h2 id="三-事件的委派"><a href="#三-事件的委派" class="headerlink" title="三.事件的委派"></a>三.事件的委派</h2><blockquote><p>所谓事件委派, 就是指将事件统一绑定给元素的共同的祖先元素, 这样当后代元素上的事件触发时, 会一直冒泡到祖先元素, 从而通过祖先元素的响应函数来处理事件, 但是这样的话有时候我们点击页面往往会出现不可预料的结果: 我们不知道到底是什么触发了这个事件.</p><p>事件委派就是利用了事件冒泡, 通过委派可以减少事件的绑定次数, 提高程序性能</p></blockquote><ul><li>通过事件对象的target属性, 可以获取触发此次事件的对象</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> btn01 = <span class="built_in">document</span>.getElementById(<span class="string">"btn01"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> u1 = <span class="built_in">document</span>.getElementById(<span class="string">"u1"</span>);</span></span><br><span class="line"><span class="javascript">            btn01.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span></span><br><span class="line"><span class="xml">                li.innerHTML = "<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'javascript:;'</span> <span class="attr">class</span>=<span class="string">'link'</span>&gt;</span>新超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span>";</span></span><br><span class="line"><span class="undefined">                u1.appendChild(li);</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="javascript">            u1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="undefined">                alert(event.target);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (event.target.className.match(<span class="regexp">/\blink\b/</span>)) &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">"我是ul的单击响应函数"</span>);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn01"</span>&gt;</span>添加超链接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"u1"</span> <span class="attr">style</span>=<span class="string">"background-color: #bfa;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"linkkk"</span>&gt;</span>超链接一<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"link"</span>&gt;</span>超链接二<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"link"</span>&gt;</span>超链接三<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四-事件的绑定"><a href="#四-事件的绑定" class="headerlink" title="四.事件的绑定"></a>四.事件的绑定</h2><ul><li>使用  对象.事件 = 响应函数; 形式为元素绑定事件响应函数, 只能同时为一个元素的一个事件绑定一个响应函数, 不能绑定多个, 若绑定了多个, 则最后绑定的函数生效.</li><li>但是, 在有的时候, 我们就希望为一个元素的相同事件绑定多个响应函数, 此时可用元素的addEventListener()方法绑定响应函数</li></ul><blockquote><p>addEventListener()<br>—— 参数:1.事件的字符串, 不要on, 例 :”onclick”应为”click”<br>——2.回调函数, 当事件触发时调用<br>——3.是否在捕获阶段触发事件, 需要一个布尔值, 一般传false<br>可以绑定多个响应函数, 事件被触发时, 顺序执行绑定的响应函数<br>IE8及以下要用attachEvent()方法代替, 但它的执行顺序与addEventListener()方法相反</p></blockquote><p>addEventListener()中的this是绑定该事件的对象, 而attachEvent()中的this是window</p><blockquote><p>想要兼容各种浏览器, 就需要自己写一个方法:<br>——参数:<br>——obj 要绑定事件的对象<br>——eventStr 要绑定事件的字符串(不要”on”)<br>——callback 回调函数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">obj,event,callback</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(obj.addEventListener)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//大部分浏览器</span></span></span><br><span class="line"><span class="javascript">                obj.addEventListener(event,callback,<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//IE8及以下</span></span></span><br><span class="line"><span class="undefined">                /* 修改回调函数中的this为传入的obj对象</span></span><br><span class="line"><span class="javascript"> * <span class="keyword">this</span>是由调用方式决定的</span></span><br><span class="line"><span class="javascript"> * 通过callback.call(obj)方式可以修改调用方法时的<span class="keyword">this</span></span></span><br><span class="line"><span class="undefined"> */</span></span><br><span class="line"><span class="javascript">                obj.attachEvent(<span class="string">"on"</span>+event,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                    callback.call(obj);</span></span><br><span class="line"><span class="undefined">                &#125;);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> btn01 = <span class="built_in">document</span>.getElementById(<span class="string">"btn01"</span>);</span></span><br><span class="line"><span class="javascript">            bind(btn01,<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="keyword">this</span>);</span></span><br><span class="line"><span class="undefined">                alert(1);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="javascript">            bind(btn01,<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                alert(2);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn01"</span>&gt;</span>bind()<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM操作网页样式</title>
      <link href="/blog/JSDOM1-4.html"/>
      <url>/blog/JSDOM1-4.html</url>
      
        <content type="html"><![CDATA[<p>通过JS的DOM操作网页的样式</p><a id="more"></a><h2 id="一-JS操作元素内联样式"><a href="#一-JS操作元素内联样式" class="headerlink" title="一.JS操作元素内联样式"></a>一.JS操作元素内联样式</h2><ul><li>语法: <font style="color:red;font-weight:bold;">元素.style.样式名 = 样式值;</font></li><li>注意: 若CSS样式名中含有-, 例: background-color(即背景)</li><li>&emsp;&emsp;这种名称在JS中不允许, 需要将其改为驼峰命名, 例: backgroundColor</li><li>&emsp;&emsp;即, 去掉样式名中的-, 并将-后的字母改为大写.</li><li>忘记的话, 可以查看W3School手册中的CSS样式</li></ul><font style="font-size:1.2em;font-weight:bold;">注意: 通过JSDOM操作元素的style属性读取或修改的样式都是内联样式, 不能读或改CSS的样式, 内联样式拥有较高的优先级, 所以通过JS修改的样式会立即执行.</font><p>&emsp;&emsp;<font style="font-size:1.2em;font-weight:bold;">但是, 若在样式中写了 !important ,则此时样式会有最高的优先级, 无法用JS覆盖该样式. 所以尽量不要用 !important 声明样式.</font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"box"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn01"</span>);</span></span><br><span class="line"><span class="javascript">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">box.style.width = <span class="string">"300px"</span>;</span></span><br><span class="line"><span class="javascript">box.style.height = <span class="string">"300px"</span>;</span></span><br><span class="line"><span class="javascript">box.style.backgroundColor = <span class="string">"yellow"</span>;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="undefined">width: 100px;</span></span><br><span class="line"><span class="undefined">height: 100px;</span></span><br><span class="line"><span class="undefined">/*</span></span><br><span class="line"><span class="undefined"> *若在red后加!important,</span></span><br><span class="line"><span class="undefined"> *JS不能通过style修改背景颜色</span></span><br><span class="line"><span class="undefined"> */</span></span><br><span class="line"><span class="undefined">background-color: red !important;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn01"</span>&gt;</span>修改样式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二-读取元素的生效样式"><a href="#二-读取元素的生效样式" class="headerlink" title="二.读取元素的生效样式"></a>二.读取元素的生效样式</h2><ul><li>语法: <font style="color:red;font-weight:bold;">元素.currentStyle.样式名;</font></li><li>currentStyle只有IE和Opera支持, 通过currentStyle读取元素样式, 若改样式没有值, 则返回其默认值, 如: currentStyle.width 为auto</li><li>别的浏览器(IE9+)可以用window的getComputeStyle方法</li><li>&emsp;&emsp;该方法返回一个对象, 该对象封装了指定元素对应的样式</li><li>&emsp;&emsp;参数: ①要获取样式的元素②可以传递一个伪元素, 一般传null</li><li>&emsp;&emsp;通过该对象读取的样式没有值, 也会返回默认值, 但有点不一样, 它返回的为具体的值.</li></ul><p>&emsp;&emsp;<font style="color:red;font-size:1.2em;">注意: 通过currentStyle和getComputeStyle()方式只能读取元素的样式, 不能修改.要想修改样式, 必须使用style属性</font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"box"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn01"</span>);</span></span><br><span class="line"><span class="javascript">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> css = <span class="built_in">window</span>.getComputedStyle(box, <span class="literal">null</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> w = css.width;<span class="comment">//w为多少px</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> h = css.height;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//正常浏览器的方式(IE8及一下):</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> bgc = css.backgroundColor;<span class="comment">//bgc为rgb值</span></span></span><br><span class="line"><span class="javascript">alert(<span class="string">"宽:"</span> + w + <span class="string">";高:"</span> + h + <span class="string">";背景色:"</span> + bgc);</span></span><br><span class="line"><span class="javascript">                    w = box.currentStyle.with;<span class="comment">//w为auto</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//IE浏览器的方式:</span></span></span><br><span class="line"><span class="javascript">                    bgc = box.currentStyle.backgroundColor;<span class="comment">//bgc为样式的值</span></span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="undefined">height: 100px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn01"</span>&gt;</span>显示样式值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三-getStyle"><a href="#三-getStyle" class="headerlink" title="三.getStyle()"></a>三.getStyle()</h2><ul><li>二中提到的获取元素样式的方式, currentStyle只支持IE, 而getComputedStyle()方式不支持IE8及一下.</li><li>我们可以自己定义一个函数getStyle(), 用来获取指定元素的样式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            background-color: rgb(255, 0, 0);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn01"</span>&gt;</span>显示样式值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj, name</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//一般浏览器调用</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> getComputedStyle(obj, <span class="literal">null</span>)[name];</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//IE8及一下时调用</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> obj.currentStyle[name];</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"box"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn01"</span>);</span></span><br><span class="line"><span class="javascript">        btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> w = getStyle(box,<span class="string">"width"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> h = getStyle(box,<span class="string">"height"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> bgc = getStyle(box,<span class="string">"backgroundColor"</span>);</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"宽:"</span> + w + <span class="string">";高:"</span> + h + <span class="string">";背景色:"</span> + bgc);</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四-其他样式相关属性"><a href="#四-其他样式相关属性" class="headerlink" title="四.其他样式相关属性"></a>四.其他样式相关属性</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>element.clientHeight</td><td>返回元素的可见高度</td></tr><tr><td>element.clientWidth</td><td>返回元素的可见宽度</td></tr><tr><td>element.offsetHeight</td><td>返回元素的高度</td></tr><tr><td>element.offsetWidth</td><td>返回元素的宽度</td></tr><tr><td>element.offsetParent</td><td>返回元素的偏移容器</td></tr><tr><td>element.offsetLeft</td><td>返回元素的水平偏移位置</td></tr><tr><td>element.offsetTop</td><td>返回元素的垂直偏移位置</td></tr><tr><td>element.scrollHeight</td><td>返回元素的整体高度</td></tr><tr><td>element.scrollWidth</td><td>返回元素的整体宽度</td></tr><tr><td>element.scrollLeft</td><td>返回元素左边缘与视图之间的距离</td></tr><tr><td>element.scrollTop</td><td>返回元素上边缘与视图之间的距离</td></tr></tbody></table><blockquote><p>clientHeight、clientWidth: 获取元素可见宽度、高度值(返回数字, 不包括px), 不能修改<br>可见高度和宽度指内容区和内边距(width/height+padding)</p><p>offsetHeight、offsetWidth: 获取元素整个的宽度、高度(可见+boder)</p><p>offsetParent: 获取当前元素的定位父元素, 即距当前元素最近的开启了定位的祖先元素, 若所有的祖先元素都没开启定位, 则返回body.</p><p>offsetLeft、offsetTop: 获取当前元素相对于定位父元素的偏移量</p><p>scrollHeight、scrollWidth: 获取元素整个滚动区域的高度、宽度</p><p>scrollLeft、scrollTop: 获取滚动条滚动的距离, 注意: chrome认为浏览器的滚动条是body的, 火狐等浏览器认为浏览器的滚动条是html的.</p></blockquote><blockquote><p>当scrollHeight - scrollTop == clientHeight时, 说明垂直滚动条已经滚动到底<br>当scrollWidth - scrollLeft == clientWidth时, 说明水平滚动条已经滚动到底</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSDOM查询补充</title>
      <link href="/blog/JSDOM1-3.html"/>
      <url>/blog/JSDOM1-3.html</url>
      
        <content type="html"><![CDATA[<p>DOM查询的剩余方法</p><a id="more"></a><h1 id="一-document属性"><a href="#一-document属性" class="headerlink" title="一.document属性"></a>一.document属性</h1><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>body</td><td>对应网页的body标签</td></tr><tr><td>documentElement</td><td>对应网页的html根标签</td></tr><tr><td>all</td><td>对应网页中的所有标签</td></tr></tbody></table><h1 id="1-获取body"><a href="#1-获取body" class="headerlink" title="1.获取body"></a>1.获取body</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//①通过getElementsByTagName()获取</span></span><br><span class="line">    <span class="keyword">var</span> body1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(body);<span class="comment">//object HTMLBodyElement</span></span><br><span class="line">    <span class="comment">//②通过document的body属性获取</span></span><br><span class="line">    <span class="keyword">var</span> body2 = <span class="built_in">document</span>.body;</span><br><span class="line">    <span class="built_in">console</span>.log(body1==body2);<span class="comment">//true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>获取html根标签同理, 但用属性获取时要用document.documentElement获取</p><h2 id="2-获取页面中的所有元素"><a href="#2-获取页面中的所有元素" class="headerlink" title="2.获取页面中的所有元素"></a>2.获取页面中的所有元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//①通过getElementsByTagName()</span></span><br><span class="line">    <span class="keyword">var</span> all1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"*"</span>);</span><br><span class="line">    <span class="comment">//②通过all属性获取</span></span><br><span class="line">    <span class="keyword">var</span> all2 = <span class="built_in">document</span>.all;</span><br><span class="line">    <span class="built_in">console</span>.log(all1==all2);<span class="comment">//false</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; all1.length;i ++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(all1[i]==all2[i]);<span class="comment">//true</span></span><br><span class="line">        <span class="built_in">console</span>.log(all1[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二-其他DOM查询方法"><a href="#二-其他DOM查询方法" class="headerlink" title="二.其他DOM查询方法"></a>二.其他DOM查询方法</h2><table><thead><tr><th style="text-align:left">方法</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left">getElementsByClassName()</td><td>根据元素的class属性值查询一组节点对象</td></tr><tr><td style="text-align:left">querySelector()</td><td>根据CSS选择器来查询第一个满足条件的元素节点对象</td></tr><tr><td style="text-align:left">querySelectorAll()</td><td>根据CSS选择器来查询所有满足条件的元素节点对象</td></tr></tbody></table><h2 id="1-getElementsByClassName"><a href="#1-getElementsByClassName" class="headerlink" title="1.getElementsByClassName()"></a>1.getElementsByClassName()</h2><p>根据元素的class属性值查询一组节点对象, 兼容性IE9+</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mybox"</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> boxs = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(boxs);<span class="comment">//object HTMLCollection</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(boxs[<span class="number">0</span>].innerText);<span class="comment">//One</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-querySelector"><a href="#2-querySelector" class="headerlink" title="2.querySelector()"></a>2.querySelector()</h2><ul><li>参数: 内容为CSS选择器的字符串</li><li>该方法只会查询满足条件的第一个元素对象</li><li>兼容性IE8+. 可以用来代替getElementsByClassName()方法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">".box"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(box.innerText);<span class="comment">//One</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-querySelectorAll"><a href="#3-querySelectorAll" class="headerlink" title="3.querySelectorAll()"></a>3.querySelectorAll()</h2><ul><li>和querySelector()方法类似, 只是它的返回值是一个数组</li><li>即使满足条件的元素只有一个, 返回的也是数组</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mybox"</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelectorAll(<span class="string">"#mybox"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(box);<span class="comment">//object NodeList</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(box[<span class="number">0</span>].innerText);<span class="comment">//Three</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三-DOM增删改"><a href="#三-DOM增删改" class="headerlink" title="三.DOM增删改"></a>三.DOM增删改</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>appendChild()</td><td>把新的子节点添加到指定节点</td></tr><tr><td>removeChild()</td><td>删除子节点</td></tr><tr><td>replaceChild()</td><td>替换子节点</td></tr><tr><td>insertBefore()</td><td>在指定的子节点前面插入新的子节点</td></tr><tr><td>createElement()</td><td>创建元素节点</td></tr><tr><td>createTextNode()</td><td>创建文本节点。</td></tr></tbody></table><h3 id="1-html"><a href="#1-html" class="headerlink" title="1.html"></a>1.html</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">@<span class="keyword">CHARSET</span> <span class="string">"UTF-8"</span>;</span></span><br><span class="line"><span class="undefined">body &#123;</span></span><br><span class="line"><span class="undefined">width: 800px;</span></span><br><span class="line"><span class="undefined">margin-left: auto;</span></span><br><span class="line"><span class="undefined">margin-right: auto;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">button &#123;</span></span><br><span class="line"><span class="undefined">width: 300px;</span></span><br><span class="line"><span class="undefined">margin-bottom: 10px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-id">#btnList</span> &#123;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-id">#total</span> &#123;</span></span><br><span class="line"><span class="undefined">width: 450px;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">ul &#123;</span></span><br><span class="line"><span class="undefined">list-style-type: none;</span></span><br><span class="line"><span class="undefined">margin: 0px;</span></span><br><span class="line"><span class="undefined">padding: 0px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.inner</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="undefined">border-style: solid;</span></span><br><span class="line"><span class="undefined">border-width: 1px;</span></span><br><span class="line"><span class="undefined">padding: 5px;</span></span><br><span class="line"><span class="undefined">margin: 5px;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#99ff99</span>;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="undefined">width: 400px;</span></span><br><span class="line"><span class="undefined">border-style: solid;</span></span><br><span class="line"><span class="undefined">border-width: 1px;</span></span><br><span class="line"><span class="undefined">margin-bottom: 10px;</span></span><br><span class="line"><span class="undefined">padding: 10px;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"total"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">你喜欢哪个城市?</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"bj"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>东京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>首尔<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"btnList"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn01"</span>&gt;</span>创建一个"广州"节点,添加到#city下<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn02"</span>&gt;</span>将"广州"节点插入到#bj前面<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn03"</span>&gt;</span>使用"广州"节点替换#bj节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn04"</span>&gt;</span>删除#bj节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn05"</span>&gt;</span>读取#city内的HTML代码<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn06"</span>&gt;</span>设置#bj内的HTML代码<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn07"</span>&gt;</span>创建一个"广州"节点,添加到#city下<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><h3 id="2-创建追加节点"><a href="#2-创建追加节点" class="headerlink" title="2.创建追加节点"></a>2.创建追加节点</h3><ul><li>appendChild() 将一个节点追加到指定加点之后</li><li>createElement() 创建指定名字的元素节点</li><li>createTextNode() 创建指定内容的文本节点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myClick</span>(<span class="params">idStr, fun</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(idStr);</span><br><span class="line">    btn.onclick = fun;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个"广州"节点,添加到#city下</span></span><br><span class="line">    myClick(<span class="string">"btn01"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> city = <span class="built_in">document</span>.getElementById(<span class="string">"city"</span>);</span><br><span class="line">        <span class="keyword">var</span> gz = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">        <span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(<span class="string">"广州"</span>);</span><br><span class="line">        gz.appendChild(text);</span><br><span class="line">        city.appendChild(gz);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//读取#city内的HTML代码</span></span><br><span class="line">    myClick(<span class="string">"btn02"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> city = <span class="built_in">document</span>.getElementById(<span class="string">"city"</span>);</span><br><span class="line">        alert(city.innerHTML);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//设置#bj内的HTML代码</span></span><br><span class="line">    myClick(<span class="string">"btn06"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> bj = <span class="built_in">document</span>.getElementById(<span class="string">"bj"</span>);</span><br><span class="line">        bj.innerHTML = <span class="string">"日本"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//向city中添加广州</span></span><br><span class="line">    myClick(<span class="string">"btn06"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> city = <span class="built_in">document</span>.getElementById(<span class="string">"city"</span>);</span><br><span class="line">        <span class="keyword">var</span> gz = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">        <span class="comment">//不再创建文本节点</span></span><br><span class="line">        gz.innerHTML = <span class="string">"广州"</span>;</span><br><span class="line">        city.appendChild(gz);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-插入替换删除节点"><a href="#3-插入替换删除节点" class="headerlink" title="3.插入替换删除节点"></a>3.插入替换删除节点</h3><ul><li>insertBefore() 由父元素调用, 在第二个参数节点之前插入新节点(第一个参数)</li><li>replaceChild() 由父元素调用, 将第二个参数节点替换为新节点(第一个参数)</li><li>removeChild() 由父元素调用, 删除指定元素节点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//将"广州"节点插入到#bj前面</span></span><br><span class="line">    myClick(<span class="string">"btn02"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> city = <span class="built_in">document</span>.getElementById(<span class="string">"city"</span>);</span><br><span class="line">        <span class="keyword">var</span> bj = <span class="built_in">document</span>.getElementById(<span class="string">"bj"</span>);</span><br><span class="line">        <span class="keyword">var</span> gz = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">        gz.innerHTML = <span class="string">"广州"</span>;</span><br><span class="line">        city.insertBefore(gz,bj);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//使用"广州"节点替换#bj节点</span></span><br><span class="line">    myClick(<span class="string">"btn03"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> city = <span class="built_in">document</span>.getElementById(<span class="string">"city"</span>);</span><br><span class="line">        <span class="keyword">var</span> bj = <span class="built_in">document</span>.getElementById(<span class="string">"bj"</span>);</span><br><span class="line">        <span class="keyword">var</span> gz = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">        gz.innerHTML = <span class="string">"广州"</span>;</span><br><span class="line">        city.replaceChild(gz,bj);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//删除#bj节点</span></span><br><span class="line">    myClick(<span class="string">"btn04"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> city = <span class="built_in">document</span>.getElementById(<span class="string">"city"</span>);</span><br><span class="line">        <span class="keyword">var</span> bj = <span class="built_in">document</span>.getElementById(<span class="string">"bj"</span>);</span><br><span class="line">        city.removeChild(bj);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSDOM练习</title>
      <link href="/blog/JSDOM1-2.html"/>
      <url>/blog/JSDOM1-2.html</url>
      
        <content type="html"><![CDATA[<p>JS DOM实现切换图片、多选框全选</p><a id="more"></a><h1 id="一-图片切换"><a href="#一-图片切换" class="headerlink" title="一.图片切换"></a>一.图片切换</h1><h2 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式:"></a>CSS样式:</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">background-color</span>: yellowgreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="html的body"><a href="#html的body" class="headerlink" title="html的body:"></a>html的body:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"info"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/1.jpg"</span> <span class="attr">alt</span>=<span class="string">"冰棍"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"prev"</span>&gt;</span>上一张<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"next"</span>&gt;</span>下一张<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分析: 想要实现点击按钮时图片的切换, 只需给按钮添加一个点击事件, 点击时修改一下img标签的src就好了.</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片:"></a>图片:</h2><p><img src="imgs\JS\1.jpg" alt="1"></p><p><img src="imgs\JS\2.jpg" alt="2"></p><p><img src="imgs\JS\3.jpg" alt="3"></p><p><img src="imgs\JS\4.jpg" alt="4"></p><p><img src="imgs\JS\5.jpg" alt="5"></p><h2 id="JS实现图片切换"><a href="#JS实现图片切换" class="headerlink" title="JS实现图片切换:"></a>JS实现图片切换:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取相应元素</span></span><br><span class="line">    <span class="keyword">var</span> prev = <span class="built_in">document</span>.getElementById(<span class="string">"prev"</span>);</span><br><span class="line">    <span class="keyword">var</span> next = <span class="built_in">document</span>.getElementById(<span class="string">"next"</span>);</span><br><span class="line">    <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">"info"</span>);</span><br><span class="line">    <span class="comment">//添加图片的src</span></span><br><span class="line">    <span class="keyword">var</span> imgSrcs = [<span class="string">"img/1.jpg"</span>,<span class="string">"img/2.jpg"</span>,<span class="string">"img/3.jpg"</span>,<span class="string">"img/4.jpg"</span>,<span class="string">"img/5.jpg"</span>];</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">"一共"</span>+imgSrcs.length+<span class="string">"张图片,当前第"</span>;</span><br><span class="line">    info.innerHTML = str + (index+<span class="number">1</span>) + <span class="string">"张"</span>;</span><br><span class="line">    <span class="comment">//点击上一张的事件</span></span><br><span class="line">    prev.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(--index==<span class="number">-1</span>)&#123;</span><br><span class="line">            index = imgSrcs.length<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        img.src = imgSrcs[index];</span><br><span class="line">        info.innerHTML = str + (index+<span class="number">1</span>) + <span class="string">"张"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//点击下一张的事件</span></span><br><span class="line">    next.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(++index==imgSrcs.length)&#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        img.src = imgSrcs[index];</span><br><span class="line">        info.innerHTML = str + (index+<span class="number">1</span>) + <span class="string">"张"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="二-全选练习"><a href="#二-全选练习" class="headerlink" title="二.全选练习"></a>二.全选练习</h1><p>html的body:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        你爱好的运动是？<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkedAllBox"</span> /&gt;</span>全选/全不选 </span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"items"</span> <span class="attr">value</span>=<span class="string">"足球"</span> /&gt;</span>足球</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"items"</span> <span class="attr">value</span>=<span class="string">"篮球"</span> /&gt;</span>篮球</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"items"</span> <span class="attr">value</span>=<span class="string">"羽毛球"</span> /&gt;</span>羽毛球</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"items"</span> <span class="attr">value</span>=<span class="string">"乒乓球"</span> /&gt;</span>乒乓球</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"checkedAllBtn"</span> <span class="attr">value</span>=<span class="string">"全　选"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"checkedNoBtn"</span> <span class="attr">value</span>=<span class="string">"全不选"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"checkedRevBtn"</span> <span class="attr">value</span>=<span class="string">"反　选"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"sendBtn"</span> <span class="attr">value</span>=<span class="string">"提　交"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><font style="color:red;font-size:1.2em;font-weight:bold;">注意: 网页中的checkedAllBox多选框, 当点击选中它时, 下面的所有多选框也选中, 当点击取消选中它时, 下面的所有多选框也取消选中; 还得保证, 如果下面的多选框全部选中, 则checkedAllBox也选中, 如果下面的多选框没有全部选中, 则它也不选中.</font><h2 id="1-全选按钮"><a href="#1-全选按钮" class="headerlink" title="1.全选按钮"></a>1.全选按钮</h2><p>通过W3School离线手册查询JS对象里的HTML对象\&lt;input> checkbox, 可知它有属性checked表示现在多选框的选中状态.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取全选按钮</span></span><br><span class="line">    <span class="keyword">var</span> allBtn = <span class="built_in">document</span>.getElementById(<span class="string">"checkedAllBtn"</span>);</span><br><span class="line">    <span class="comment">//获取所有多选框</span></span><br><span class="line">    <span class="keyword">var</span> items = <span class="built_in">document</span>.getElementsByName(<span class="string">"items"</span>);</span><br><span class="line">    <span class="comment">//获取checkedAllBox多选框</span></span><br><span class="line">    <span class="keyword">var</span> checkedAllBox = <span class="built_in">document</span>.getElementById(<span class="string">"checkedAllBox"</span>);</span><br><span class="line">    allBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; items.length;i ++)&#123;</span><br><span class="line">            items[i].checked = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//选中checkedAllBox</span></span><br><span class="line">        checkedAllBox.checked = <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-全不选按钮"><a href="#2-全不选按钮" class="headerlink" title="2.全不选按钮"></a>2.全不选按钮</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取全不选按钮</span></span><br><span class="line">    <span class="keyword">var</span> noBtn = <span class="built_in">document</span>.getElementById(<span class="string">"checkedNoBtn"</span>);</span><br><span class="line">    <span class="comment">//获取所有多选框与checkedAllBox,共用之前的代码</span></span><br><span class="line">    <span class="keyword">var</span> items = <span class="built_in">document</span>.getElementsByName(<span class="string">"items"</span>);</span><br><span class="line">    <span class="keyword">var</span> checkedAllBox = <span class="built_in">document</span>.getElementById(<span class="string">"checkedAllBox"</span>);</span><br><span class="line">    noBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; items.length;i ++)&#123;</span><br><span class="line">            items[i].checked = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//取消选中checkedAllBox</span></span><br><span class="line">        checkedAllBox.checked = <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-反选"><a href="#3-反选" class="headerlink" title="3.反选"></a>3.反选</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取反选按钮</span></span><br><span class="line">    <span class="keyword">var</span> revBtn = <span class="built_in">document</span>.getElementById(<span class="string">"checkedRevBtn"</span>);</span><br><span class="line">    <span class="comment">//获取所有多选框与checkedAllBox,共用之前的代码</span></span><br><span class="line">    <span class="keyword">var</span> items = <span class="built_in">document</span>.getElementsByName(<span class="string">"items"</span>);</span><br><span class="line">    <span class="keyword">var</span> checkedAllBox = <span class="built_in">document</span>.getElementById(<span class="string">"checkedAllBox"</span>);</span><br><span class="line">    revBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">            items[i].checked = !items[i].checked;</span><br><span class="line">            flag += items[i].checked;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果所有多选框选中,选中checkedAllBox</span></span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">4</span>)checkedAllBox.checked = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> checkedAllBox.checked = <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-提交"><a href="#4-提交" class="headerlink" title="4.提交"></a>4.提交</h2><p>点击提交按钮时, 弹出选中的value属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取提交按钮</span></span><br><span class="line">    <span class="keyword">var</span> submitBtn = <span class="built_in">document</span>.getElementById(<span class="string">"sendBtn"</span>);</span><br><span class="line">    <span class="comment">//获取所有多选框,共用之前的代码</span></span><br><span class="line">    <span class="keyword">var</span> items = <span class="built_in">document</span>.getElementsByName(<span class="string">"items"</span>);</span><br><span class="line">    submitBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(items[i].checked)&#123;</span><br><span class="line">                alert(items[i].value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-checkedAllBox"><a href="#5-checkedAllBox" class="headerlink" title="5.checkedAllBox"></a>5.checkedAllBox</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取所有多选框与checkedAllBox,共用之前的代码</span></span><br><span class="line">    <span class="keyword">var</span> items = <span class="built_in">document</span>.getElementsByName(<span class="string">"items"</span>);</span><br><span class="line">    <span class="keyword">var</span> checkedAllBox = <span class="built_in">document</span>.getElementById(<span class="string">"checkedAllBox"</span>);</span><br><span class="line">    checkedAllBox.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//同步所有多选框</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">            items[i].checked = <span class="keyword">this</span>.checked;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-点击多选框"><a href="#6-点击多选框" class="headerlink" title="6.点击多选框"></a>6.点击多选框</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取所有多选框与checkedAllBox,共用之前的代码</span></span><br><span class="line">    <span class="keyword">var</span> items = <span class="built_in">document</span>.getElementsByName(<span class="string">"items"</span>);</span><br><span class="line">    <span class="keyword">var</span> checkedAllBox = <span class="built_in">document</span>.getElementById(<span class="string">"checkedAllBox"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">        <span class="comment">//给每个多选框绑定单击响应函数</span></span><br><span class="line">        items[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//点击多选框时,同步checkedAllBox</span></span><br><span class="line">            checkedAllBox.checked = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; items.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!items[j].checked)&#123;</span><br><span class="line">                    checkedAllBox.checked = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSDOM基础查询</title>
      <link href="/blog/JSDOM1-1.html"/>
      <url>/blog/JSDOM1-1.html</url>
      
        <content type="html"><![CDATA[<p>JS的DOM基础查询</p><a id="more"></a><h1 id="一-获取元素节点"><a href="#一-获取元素节点" class="headerlink" title="一.获取元素节点"></a>一.获取元素节点</h1><p>元素节点, 即HTML标签对象</p><p>DOM(document)对象的方法:</p><table><thead><tr><th>方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>getElementById()</td><td style="text-align:left">返回对拥有指定 id 的第一个对象的引用</td></tr><tr><td>getElementsByName()</td><td style="text-align:left">返回带有指定name属性的对象集合</td></tr><tr><td>getElementsByTagName()</td><td style="text-align:left">返回带有指定标签名的对象集合</td></tr><tr><td>write()</td><td style="text-align:left">向文档写 HTML 表达式 或 JavaScript 代码</td></tr><tr><td>writeln()</td><td style="text-align:left">等同于 write() 方法, 不同的是在每个表达式之后写一个换行符</td></tr></tbody></table><p>通过例子, 看一下获取元素节点的三个DOM方法</p><p>样式表:</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">CHARSET</span> <span class="string">"UTF-8"</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: auto;</span><br><span class="line"><span class="attribute">margin-right</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#btnList</span> &#123;</span><br><span class="line"><span class="attribute">float</span>:left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#total</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line"><span class="attribute">float</span>:left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="attribute">list-style-type</span>: none;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inner</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="attribute">border-style</span>: solid;</span><br><span class="line"><span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#99ff99</span>;</span><br><span class="line"><span class="attribute">float</span>:left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inner</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">400px</span>;</span><br><span class="line"><span class="attribute">border-style</span>: solid;</span><br><span class="line"><span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>html的body:</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"total"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>你喜欢哪个城市?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"bj"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>东京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>首尔<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>你喜欢哪款单机游戏?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"game"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"rl"</span>&gt;</span>红警<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>实况<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>极品飞车<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>魔兽<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>你手机的操作系统是?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"phone"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>IOS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"android"</span>&gt;</span>Android<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Windows Phone<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></span><br><span class="line">            gender:</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"hello"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"male"</span> /&gt;</span> Male</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"hello"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"female"</span> /&gt;</span> Female</span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> name:</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"abcde"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"btnList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn01"</span>&gt;</span>查找#bj节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn02"</span>&gt;</span>查找所有li节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn03"</span>&gt;</span>查找name=gender的所有节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn04"</span>&gt;</span>查找#city下所有li节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn05"</span>&gt;</span>返回#city的所有子节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn06"</span>&gt;</span>返回#phone的第一个子节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn07"</span>&gt;</span>返回#bj的父节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn08"</span>&gt;</span>返回#android的前一个兄弟节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><h2 id="1-getElementById"><a href="#1-getElementById" class="headerlink" title="1.getElementById"></a>1.getElementById</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//为id为btn01的按钮绑定一个单击响应函数</span></span><br><span class="line">    <span class="keyword">var</span> btn01 = <span class="built_in">document</span>.getElementById(<span class="string">"btn01"</span>);</span><br><span class="line">    btn01.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//查找id为bj的节点</span></span><br><span class="line">        <span class="keyword">var</span> bj = <span class="built_in">document</span>.getElementById(<span class="string">"bj"</span>);</span><br><span class="line">        <span class="comment">//innerHTML 通过这个属性可以获取到元素内部的html代码</span></span><br><span class="line">        alert(bj.innerHTML);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-getElementsByTagName"><a href="#2-getElementsByTagName" class="headerlink" title="2.getElementsByTagName"></a>2.getElementsByTagName</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//为id为btn02的按钮绑定一个单击响应函数</span></span><br><span class="line">    <span class="keyword">var</span> btn02 = <span class="built_in">document</span>.getElementById(<span class="string">"btn02"</span>);</span><br><span class="line">    btn02.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//查找所有li节点</span></span><br><span class="line">        <span class="comment">//getElementsByTagName()可以根据标签名来获取一组元素节点对象</span></span><br><span class="line">        <span class="comment">//这个方法会给我们返回一个类数组对象,所有查询到的元素都会封装到对象中</span></span><br><span class="line">        <span class="comment">//即使查询到的元素只有一个,也会封装到数组中返回</span></span><br><span class="line">        <span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">            alert(lis[i].innerHTML);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-getElementsByName"><a href="#3-getElementsByName" class="headerlink" title="3.getElementsByName"></a>3.getElementsByName</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//为id为btn03的按钮绑定一个单击响应函数</span></span><br><span class="line">    <span class="keyword">var</span> btn03 = <span class="built_in">document</span>.getElementById(<span class="string">"btn03"</span>);</span><br><span class="line">    btn03.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//查找name属性,值为gender的所有节点</span></span><br><span class="line">        <span class="keyword">var</span> inputs = <span class="built_in">document</span>.getElementsByName(<span class="string">"gender"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; inputs.length; i++) &#123;</span><br><span class="line">            <span class="comment">/* innerHTML用于获取元素内部的HTML代码的</span></span><br><span class="line"><span class="comment"> * 对于自结束标签,这个属性没有意义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">            <span class="comment">/* 如果需要读取自结束标签的属性</span></span><br><span class="line"><span class="comment"> * 直接使用 元素.属性名</span></span><br><span class="line"><span class="comment"> * 例: 元素.id 元素.name 元素.value</span></span><br><span class="line"><span class="comment"> * 注意: class属性不能采用这种方式</span></span><br><span class="line"><span class="comment"> * 读取class属性时需要使用 元素.className</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">            <span class="keyword">var</span> str = <span class="string">"class=\""</span>+inputs[i].className+</span><br><span class="line">                <span class="string">"\" type=\""</span>+inputs[i].type+<span class="string">"\" name=\""</span>+</span><br><span class="line">                inputs[i].name+<span class="string">"\" value=\""</span>+inputs[i].value+<span class="string">"\""</span>;</span><br><span class="line">            alert(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二-获取元素节点的子节点"><a href="#二-获取元素节点的子节点" class="headerlink" title="二.获取元素节点的子节点"></a>二.获取元素节点的子节点</h1><p>通过具体的元素节点调用:</p><table><thead><tr><th>方法或属性</th><th>简介</th></tr></thead><tbody><tr><td>getElementsByTagName()</td><td>返回当前节点的指定标签名的所有后代节点</td></tr><tr><td>childNodes属性</td><td>表示当前节点的所有子节点(包括文本节点)</td></tr><tr><td>children属性</td><td>表示当前节点的所有子元素(即HTML标签)</td></tr><tr><td>firstChild属性</td><td>表示当前节点的第一个子节点</td></tr><tr><td>lastChild属性</td><td>表示当前节点的最后一个子节点</td></tr></tbody></table><h2 id="1-获取某个元素的所有指定节点"><a href="#1-获取某个元素的所有指定节点" class="headerlink" title="1.获取某个元素的所有指定节点"></a>1.获取某个元素的所有指定节点</h2><p>接着上述的练习:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//为id为btn04的按钮绑定一个单击响应函数</span></span><br><span class="line">    <span class="keyword">var</span> btn04 = <span class="built_in">document</span>.getElementById(<span class="string">"btn04"</span>);</span><br><span class="line">    btn04.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//查找#city下所有li节点</span></span><br><span class="line">        <span class="comment">//获取id为city的元素</span></span><br><span class="line">        <span class="keyword">var</span> city = <span class="built_in">document</span>.getElementById(<span class="string">"city"</span>);</span><br><span class="line">        <span class="comment">//获取city下的所有li元素</span></span><br><span class="line">        <span class="keyword">var</span> citys = city.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; citys.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> str = citys[i].innerHTML;</span><br><span class="line">            alert(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-childNodes属性"><a href="#2-childNodes属性" class="headerlink" title="2.childNodes属性"></a>2.childNodes属性</h2><p>childNodes, 这个属性会返回节点的所有子节点, 包括文本节点(IE8+,空白文本也算)</p><p>children, 这个属性会返回节点的所有子元素(即HTML标签)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//为id为btn05的按钮绑定一个单击响应函数</span></span><br><span class="line">    <span class="keyword">var</span> btn05 = <span class="built_in">document</span>.getElementById(<span class="string">"btn05"</span>);</span><br><span class="line">    btn05.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//返回#city的所有子节点</span></span><br><span class="line">        <span class="comment">//获取id为city的元素</span></span><br><span class="line">        <span class="keyword">var</span> city = <span class="built_in">document</span>.getElementById(<span class="string">"city"</span>);</span><br><span class="line">        <span class="comment">/* 获取city下的所有节点:</span></span><br><span class="line"><span class="comment">         * 这其中包括文本节点</span></span><br><span class="line"><span class="comment">         * 空白字符(换行、空格等)也算文本节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> nodes = city.children;</span><br><span class="line">        <span class="comment">//若我们只是想获取所有子元素(即HTML标签)可以这样</span></span><br><span class="line">        nodes = city.childNodes;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class="line">            alert(nodes[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-firstChild"><a href="#3-firstChild" class="headerlink" title="3.firstChild"></a>3.firstChild</h2><p>firstChild属性, 获取当前元素的第一个子节点(包括空白文本节点)</p><p>firstElementChild属性(IE9+), 获取当前元素的第一个子元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//为id为btn06的按钮绑定一个单击响应函数</span></span><br><span class="line">    <span class="keyword">var</span> btn06 = <span class="built_in">document</span>.getElementById(<span class="string">"btn06"</span>);</span><br><span class="line">    btn06.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//返回#phone的第一个子节点</span></span><br><span class="line">        <span class="comment">//获取id为phone的元素</span></span><br><span class="line">        <span class="keyword">var</span> phone = <span class="built_in">document</span>.getElementById(<span class="string">"phone"</span>);</span><br><span class="line">        <span class="keyword">var</span> first = phone.firstChild;</span><br><span class="line">        alert(first);</span><br><span class="line">        <span class="comment">//若HTML代码被格式化了,上面输出为:object Text</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lastChild和firstChild属性类似</p><h1 id="三-获取父节点和兄弟节点"><a href="#三-获取父节点和兄弟节点" class="headerlink" title="三.获取父节点和兄弟节点"></a>三.获取父节点和兄弟节点</h1><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>parentNode</td><td>表示当前节点的父节点</td></tr><tr><td>previousSibling</td><td>表示当前节点的前一个兄弟节点</td></tr><tr><td>nextSibling</td><td>表示当前节点的后一个兄弟节点</td></tr></tbody></table><h2 id="1-parentNode"><a href="#1-parentNode" class="headerlink" title="1.parentNode"></a>1.parentNode</h2><p>观察上述代码, 我们做了大量的重复性工作: 先获取到指定id的按钮, 再给该按钮添加一个单击响应函数. 可以考虑将这两个过程封装成一个函数.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myClick</span>(<span class="params">id,fun</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">    btn.onclick = fun;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取id为btn07的按钮并为其绑定一个单击响应函数</span></span><br><span class="line">    <span class="keyword">var</span> btn07 = myClick(<span class="string">"btn07"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//返回#bj的父节点,注意:父节点一定是元素即标签</span></span><br><span class="line">        <span class="keyword">var</span> bj = <span class="built_in">document</span>.getElementById(<span class="string">"bj"</span>);</span><br><span class="line">        <span class="keyword">var</span> bjParent = bj.parentNode;</span><br><span class="line">        <span class="comment">//alert(bjParent.innerHTML);//获取元素的HTML代码</span></span><br><span class="line">        <span class="comment">/* innerText属性:获取元素内部的文本内容</span></span><br><span class="line"><span class="comment">         * 它会自动将innerHTML中的HTML标签去掉</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        alert(bjParent.innerText);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-previousSibling"><a href="#2-previousSibling" class="headerlink" title="2.previousSibling"></a>2.previousSibling</h2><p>previousSibling属性, 获取前一个兄弟节点(包括空白文本节点)</p><p>previousElementSibling属性(IE9+), 获取前一个兄弟元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取id为btn08的按钮并为其绑定一个单击响应函数</span></span><br><span class="line">    <span class="keyword">var</span> btn08 = myClick(<span class="string">"btn08"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//返回#android的前一个兄弟节点</span></span><br><span class="line">        <span class="keyword">var</span> android = <span class="built_in">document</span>.getElementById(<span class="string">"android"</span>);</span><br><span class="line">        <span class="keyword">var</span> ardPre = android.previousSibling;</span><br><span class="line">        alert(ardPre);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nextSibling属性和previousSibling属性类似</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSDOM简介</title>
      <link href="/blog/JSDOM1-0.html"/>
      <url>/blog/JSDOM1-0.html</url>
      
        <content type="html"><![CDATA[<p>JS中的宿主对象, JSDOM</p><a id="more"></a><h1 id="一-DOM简介"><a href="#一-DOM简介" class="headerlink" title="一.DOM简介"></a>一.DOM简介</h1><h2 id="1-什么是DOM"><a href="#1-什么是DOM" class="headerlink" title="1.什么是DOM"></a>1.什么是DOM</h2><blockquote><ul><li>DOM, 即Document Object Model 文档对象模型</li><li>JS中通过操作DOM来对HTML文档进行操作.只要了解DOM就可以随心所欲的操作WEB页面</li><li>文档: 表示的是整个HTML网页文档</li><li>对象: 表示将页面中的每一个部分(包括那些HTML标签)都转换为了对象.</li><li>模型: 表示对象(即HTML中的节点)之间的关系, 这样方便我们获取、操作对象.</li></ul></blockquote><p><img src="imgs\JS\DOMTree.png" alt="DOMTree"></p><h2 id="2-节点"><a href="#2-节点" class="headerlink" title="2.节点"></a>2.节点</h2><ul><li><p>节点(也即对象): Node——构成html文档最基本的单元, 网页中的每个部分都可以称为一个节点</p></li><li><p>常用节点分为四类:</p></li><li>——①文档节点: 整个HTML文档(即document对象)</li><li>——②元素节点: HTML文档中的html标签</li><li>——③属性节点: 元素的属性</li><li>——④文本节点: HTML标签中的文本内容</li><li>节点的类型不同, 它们的属性也可能不同</li></ul><p><img src="imgs\JS\Node.png" alt="Node"></p><h3 id="节点的属性"><a href="#节点的属性" class="headerlink" title="节点的属性"></a>节点的属性</h3><table><thead><tr><th></th><th>nodeName</th><th>nodeType</th><th>nodeValue</th></tr></thead><tbody><tr><td>文档节点</td><td>#document</td><td>9</td><td>null</td></tr><tr><td>元素节点</td><td>标签名</td><td>1</td><td>null</td></tr><tr><td>属性节点</td><td>属性名</td><td>2</td><td>属性值</td></tr><tr><td>文本节点</td><td>#text</td><td>3</td><td><font style="color:red;font-weight:bold;">文本内容</font></td></tr></tbody></table><h3 id="练习-JS操纵网页中的按钮"><a href="#练习-JS操纵网页中的按钮" class="headerlink" title="练习: JS操纵网页中的按钮"></a>练习: JS操纵网页中的按钮</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>我是一个按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">document</span>);<span class="comment">//object HTMLDocument</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取button对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(btn);<span class="comment">//object HTMLButtonElement</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(btn.innerHTML);<span class="comment">//我是一个按钮</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//修改按钮的文字</span></span></span><br><span class="line"><span class="javascript">        btn.innerHTML = <span class="string">"I'm a button"</span>;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="二-事件"><a href="#二-事件" class="headerlink" title="二.事件"></a>二.事件</h1><ul><li>事件, 即文档或浏览器窗口发生的一些特定的交互瞬间, 用户和浏览器之间的交互行为</li><li>比如: 点击按钮、鼠标移动、关闭浏览器窗口……</li><li>我们往往比较关注对事件的处理, 即响应事件</li></ul><h2 id="1-事件句柄"><a href="#1-事件句柄" class="headerlink" title="1.事件句柄"></a>1.事件句柄</h2><table><thead><tr><th>属性</th><th>此事件发生在何时</th></tr></thead><tbody><tr><td>onabort</td><td>图像的加载被中断</td></tr><tr><td>onblur</td><td>元素失去焦点</td></tr><tr><td>onchange</td><td>域的内容被改变</td></tr><tr><td>onclick</td><td>当用户点击某个对象时调用的事件句柄</td></tr><tr><td>ondblclick</td><td>当用户双击某个对象时调用的事件句柄</td></tr><tr><td>onerror</td><td>在加载文档或图像时发生错误</td></tr><tr><td>onfocus</td><td>元素获得焦点</td></tr><tr><td>onkeydown</td><td>某个键盘按键被按下</td></tr><tr><td>onkeypress</td><td>某个键盘按键被按下并松开</td></tr><tr><td>onkeyup</td><td>某个键盘按键被松开</td></tr><tr><td>onload</td><td>一张页面或一幅图像完成加载</td></tr><tr><td>onmousedown</td><td>鼠标按钮被按下</td></tr><tr><td>onmousemove</td><td>鼠标被移动</td></tr><tr><td>onmouseout</td><td>鼠标从某元素移开</td></tr><tr><td>onmouseover</td><td>鼠标移到某元素之上</td></tr><tr><td>onmouseup</td><td>鼠标按键被松开</td></tr><tr><td>onreset</td><td>重置按钮被点击</td></tr><tr><td>onresize</td><td>窗口或框架被重新调整大小</td></tr><tr><td>onselect</td><td>文本被选中</td></tr><tr><td>onsubmit</td><td>确认按钮被点击</td></tr><tr><td>onunload</td><td>用户退出页面</td></tr></tbody></table><h2 id="2-设置事件属性"><a href="#2-设置事件属性" class="headerlink" title="2.设置事件属性"></a>2.设置事件属性</h2><p>我们可以在事件对应的属性中设置一些JS代码, 当该事件被触发时, 这些代码将会执行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--鼠标被移动时触发--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">onmousemove</span>=<span class="string">"alert('讨厌,移到我上面干嘛~~~')"</span>&gt;</span>我是一个按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><font style="color:red;font-weight:bold;font-size:1.2em;">注意: 这种响应方式, 结构与行为发生耦合, 不方便维护, 我们一般不这样使用.</font><h2 id="3-绑定响应函数"><a href="#3-绑定响应函数" class="headerlink" title="3.绑定响应函数"></a>3.绑定响应函数</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--双击某个对象时触发--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>我是一个按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span></span><br><span class="line"><span class="javascript">        btn.ondblclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'讨厌,点我两下干嘛~~~'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单击某个对象时触发--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">onclick</span>=<span class="string">"showMsg();"</span>&gt;</span>我是一个按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> showMsg = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'讨厌,点我干嘛~~~'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="三-文档的加载"><a href="#三-文档的加载" class="headerlink" title="三.文档的加载"></a>三.文档的加载</h1><p>&emsp;&emsp;注意到, 我们上面的代码中, script标签都写在button标签之后, 为什么呢?</p><p>这与页面的加载顺序有关, 页面是顺序加载(自上往下)的, 假如把script标签写在button标签之前, 这时在script里获取button对象时获取不到button对象, 因为它还没被加载, 再为一个null添加一个事件就会报错.</p><p>故我们需要在该DOM对象加载之后再获取它, 要么把script标签放到要获取的DOM对象之后, 要么将获取及操作该DOM对象的JS代码放在window.onload事件的响应函数中.</p><h2 id="1-onload事件"><a href="#1-onload事件" class="headerlink" title="1.onload事件"></a>1.onload事件</h2><p>  onload 事件会在页面或图像加载完成后立即发生, 该事件支持的JS对象: image, layer, window</p><p>先弹出消息对话框, 点击确定后, 再加载出按钮:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSDOM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"hello"</span>);</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>我是一个按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先加载出按钮, 再弹出消息对话框:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>JSDOM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">"hello"</span>);</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>我是一个按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>个人觉得script标签写在DOM对象加载之后更好一些, 这样的话, 加载性能好点, 用户体验好. 但是现在的网速和浏览器内核已经很好了, 其实写在哪里没什么太大的差别.</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS正则</title>
      <link href="/blog/JS2-5.html"/>
      <url>/blog/JS2-5.html</url>
      
        <content type="html"><![CDATA[<p>JS中的正则</p><a id="more"></a><h1 id="一-正则表达式简介"><a href="#一-正则表达式简介" class="headerlink" title="一.正则表达式简介"></a>一.正则表达式简介</h1><blockquote><p>百度百科:正则表达式, 又称规则表达式. (英语: Regular Expression, 在代码中常简写为regex、regexp或RE), 计算机科学的一个概念. 正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本.</p><p>正则表达式用于定义一些字符串的规则, 计算机根据正则表达式, 来检查是否符合规则, 获取、提取字符串中符合规则的内容.</p></blockquote><h2 id="1-创建RegExp对象"><a href="#1-创建RegExp对象" class="headerlink" title="1.创建RegExp对象"></a>1.创建RegExp对象</h2><p>正则表达式对象即RegExp对象, JS内置的对象.</p><p>RegExp对象的test()方法, 检索字符串中指定的值, 返回 true 或 false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法:</span></span><br><span class="line"><span class="comment">//var 变量名 = new RegExp("正则表达式","匹配模式");</span></span><br><span class="line"><span class="comment">//匹配模式:i 忽略大小写;g 全局匹配;m 多行匹配;</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"a"</span>,<span class="string">"i"</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"ABCD"</span>;</span><br><span class="line"><span class="keyword">var</span> result = reg.test(str);<span class="comment">//检查字符串中是否含A</span></span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="2-字面量创建RegExp对象"><a href="#2-字面量创建RegExp对象" class="headerlink" title="2.字面量创建RegExp对象"></a>2.字面量创建RegExp对象</h2><p>字面量的方式创建更加简单, 使用构造函数创建更加灵活(可以传参数).</p><font style="font-size:1.2em;"><center>语法: var 变量名 = /正则表达式/匹配模式;</center></font><font style="font-size:1.2em;color:red;">注意: 语法中没有引号</font><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>[abc]</td><td>查找方括号之间的任何字符</td></tr><tr><td>[^abc]</td><td>查找任何不在方括号之间的字符</td></tr><tr><td>[0-9]</td><td>查找任何从 0 至 9 的数字</td></tr><tr><td>[a-z]</td><td>查找任何从小写 a 到小写 z 的字符</td></tr><tr><td>[A-Z]</td><td>查找任何从大写 A 到大写 Z 的字符</td></tr><tr><td>[A-z]</td><td>查找任何从大写 A 到小写 z 的字符</td></tr><tr><td>[adgk]</td><td>查找给定集合内的任何字符</td></tr><tr><td>[^adgk]</td><td>查找给定集合外的任何字符</td></tr><tr><td>(red blue green)</td><td>查找任何指定的选项</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a/i</span>;<span class="comment">//等价于:var reg = new RegExp("a","i");</span></span><br><span class="line"><span class="comment">//1.创建一个正则表达式检查一个字符串中是否含有a或b</span></span><br><span class="line">reg = <span class="regexp">/a|b/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建一个正则表达式检查一个字符串中是否含有字母</span></span><br><span class="line">reg = <span class="regexp">/[A-z]/</span>;<span class="comment">//中括号表示或的意思</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.检查一个字符串中是否含有abc或adc或aec</span></span><br><span class="line">reg = <span class="regexp">/a[bde]c/</span>;<span class="comment">//以a开头,c结尾,中间为b或d或e</span></span><br><span class="line"></span><br><span class="line">reg = <span class="regexp">/[^0-9]/</span>;<span class="comment">//检查除了数字之外的内容</span></span><br><span class="line">reg = <span class="regexp">/(abc)/</span>;<span class="comment">//abc连续出现</span></span><br><span class="line">reg = <span class="regexp">/(a|b|c)/</span>;<span class="comment">//出现过a或b或c</span></span><br></pre></td></tr></table></figure><h1 id="二-字符串与正则相关的方法"><a href="#二-字符串与正则相关的方法" class="headerlink" title="二.字符串与正则相关的方法"></a>二.字符串与正则相关的方法</h1><h2 id="1-split"><a href="#1-split" class="headerlink" title="1.split"></a>1.split</h2><ul><li>根据参数将字符串拆分为字符数组</li><li>参数可以是正则表达式</li><li>正则不需要设置全局匹配, split默认将所有符合条件的拆分</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"1a2b3c4d5e6f7g8"</span>;</span><br><span class="line"><span class="keyword">var</span> arr = str.split(<span class="regexp">/[A-z]/</span>);<span class="comment">//根据任意字母拆分</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//1,2,3,4,5,6,7,8</span></span><br></pre></td></tr></table></figure><h2 id="2-search"><a href="#2-search" class="headerlink" title="2.search"></a>2.search</h2><ul><li>检索与正则表达式相匹配的值</li><li>如果可以搜索到指定内容, 则返回第一次出现过的位置, 没搜索到返回-1</li><li>它能接受一个正则表达式作为参数, 然后根据正则表达式检索字符串</li><li>search正则查找时不能设置全局匹配</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//功能和indexOf()类似</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"hello abc hello adc hello aec"</span>;</span><br><span class="line"><span class="comment">//搜索字符串中是否含有abc或adc或aec</span></span><br><span class="line"><span class="keyword">var</span> result = str.search(<span class="regexp">/a[bde]c/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//6</span></span><br></pre></td></tr></table></figure><h2 id="3-match"><a href="#3-match" class="headerlink" title="3.match"></a>3.match</h2><ul><li>可以根据正则表达式, 从一个字符串中将符合条件的内容提取出来</li><li>默认情况下, match只会找第一个符合条件的内容, 找到后停止检索, 我们可以将正则表达式设置为全局匹配模式, 这样match会找到所有符合条件的内容</li><li>可以为正则表达式设置多个匹配模式, 且顺序无所谓</li><li>match会将匹配到的内容封装到一个数组中返回, 即使只查询到一个结果.</li><li>可以将一个没有规则的长串中, 有规则的内容提取出来, 很实用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"1A2B3C4d5e6f7g8"</span>;</span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/[a-z]/gi</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(result));<span class="comment">//true;</span></span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//A,B,C,d,e,f,g</span></span><br><span class="line"><span class="built_in">console</span>.log(result[<span class="number">0</span>]);<span class="comment">//A</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//筛选出所有的QQ号</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"826720408abhfe826720407"</span>+</span><br><span class="line">    <span class="string">"freaf826720405C826720"</span>+</span><br><span class="line">    <span class="string">"404d826720405e8267204"</span>+</span><br><span class="line">    <span class="string">"00f826720409g826720401"</span>;</span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/[0-9]&#123;8,10&#125;/g</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(result));<span class="comment">//true;</span></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><h2 id="4-replace"><a href="#4-replace" class="headerlink" title="4.replace"></a>4.replace</h2><ul><li>将字符串中指定的内容替换为新的内容, 不影响原字符串</li><li>参数:①被替换的内容, 可以接受一个正则表达式作为参数</li><li>②新的内容</li><li>默认只会替换一个,可以为正则表达式设置全局匹配模式替换所有内容</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"1A2B3C4d5e6f7g8"</span>;</span><br><span class="line"><span class="comment">//将所有字母替换为""</span></span><br><span class="line"><span class="keyword">var</span> result = str.replace(<span class="regexp">/[a-z]/gi</span>,<span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//12345678</span></span><br></pre></td></tr></table></figure><h1 id="三-正则表达式语法补充"><a href="#三-正则表达式语法补充" class="headerlink" title="三.正则表达式语法补充"></a>三.正则表达式语法补充</h1><h2 id="1-量词"><a href="#1-量词" class="headerlink" title="1.量词"></a>1.量词</h2><ul><li>量词: 可以设置一个内容出现的次数, 它只对它前面的一个内容起作用</li></ul><table><thead><tr><th style="text-align:left">量词</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left">n+</td><td>匹配任何包含至少一个 n 的字符串, 相当于n{1, }</td></tr><tr><td style="text-align:left">n*</td><td>匹配任何包含零个或多个 n 的字符串, 相当于n{0, }</td></tr><tr><td style="text-align:left">n?</td><td>匹配任何包含零个或一个 n 的字符串, 相当于n{0,1}</td></tr><tr><td style="text-align:left">n{x}</td><td>匹配包含 x 个 n 的序列的字符串</td></tr><tr><td style="text-align:left">n{x,y}</td><td>匹配包含 x ~ y 个 n 的序列的字符串</td></tr><tr><td style="text-align:left">n{x, }</td><td>匹配包含至少 x 个 n 的序列的字符串</td></tr><tr><td style="text-align:left">n$</td><td>匹配任何结尾为 n 的字符串</td></tr><tr><td style="text-align:left">^n</td><td>匹配任何开头为 n 的字符串</td></tr><tr><td style="text-align:left">?=n</td><td>匹配任何其后紧接指定字符串 n 的字符串</td></tr><tr><td style="text-align:left">?!n</td><td>匹配任何其后没有紧接指定字符串 n 的字符串</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a&#123;3&#125;/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"xaaax"</span>));<span class="comment">//只有字符串中连续出现3个a时为true</span></span><br><span class="line">reg = <span class="regexp">/(ab)&#123;3&#125;/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"xabababx"</span>));<span class="comment">//只有字符串中连续出现3个ab时为true</span></span><br><span class="line">reg = <span class="regexp">/ab&#123;3,5&#125;c/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"xabbbbcx"</span>));<span class="comment">//只有字符串中a和c之间有3~5个b时为true</span></span><br><span class="line">reg = <span class="regexp">/ab&#123;3,&#125;c/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"xabbbcx"</span>));<span class="comment">//只有字符串中a和c之间有2个以上b时为true</span></span><br><span class="line"></span><br><span class="line">reg = <span class="regexp">/^a$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"a"</span>));<span class="comment">//只有字符串为"a"时,结果为true</span></span><br><span class="line">reg = <span class="regexp">/^a|a$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"abc"</span>));<span class="comment">//字符串以a开头或以a结尾时为true</span></span><br></pre></td></tr></table></figure><font style="color:red;font-size:1.2em;font-weight:blod;">注意: 在正则表达式中同时使用了 ^ 和 $ 量词, 则要求字符串必须完全符合正则表达式.</font><h3 id="练习-手机号的正则表达式"><a href="#练习-手机号的正则表达式" class="headerlink" title="练习: 手机号的正则表达式"></a>练习: 手机号的正则表达式</h3><p>匹配手机号的正则表达式: <font style="color:red;font-size:1.2em;font-weight:bold;">/^1[3-9][0-9]{9}$/</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*手机号的规则:</span></span><br><span class="line"><span class="comment"> *1. 以1开头</span></span><br><span class="line"><span class="comment"> *2. 第二位为3-9任意数字</span></span><br><span class="line"><span class="comment"> *3. 第三位之后为任意数字9个</span></span><br><span class="line"><span class="comment"> * ^ 和 $ 量词是必须的</span></span><br><span class="line"><span class="comment"> * ^1 [3-9] [0-9]&#123;9&#125;$</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> phoneNumReg = <span class="regexp">/^1[3-9][0-9]&#123;9&#125;$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(phoneNumReg.test(<span class="string">"15555555555"</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="2-元字符"><a href="#2-元字符" class="headerlink" title="2.元字符"></a>2.元字符</h2><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>查找单个字符, 除了换行和行结束符</td></tr><tr><td>\w</td><td>查找单词字符(字母、数字、下划线)</td></tr><tr><td>\W</td><td>查找非单词字符</td></tr><tr><td>\d</td><td>查找数字</td></tr><tr><td>\D</td><td>查找非数字字符</td></tr><tr><td>\s</td><td>查找空白字符</td></tr><tr><td>\S</td><td>查找非空白字符</td></tr><tr><td>\b</td><td>匹配单词边界</td></tr><tr><td>\B</td><td>匹配非单词边界</td></tr><tr><td>\0</td><td>查找 NULL 字符</td></tr><tr><td>\n</td><td>查找换行符</td></tr><tr><td>\f</td><td>查找换页符</td></tr><tr><td>\r</td><td>查找回车符</td></tr><tr><td>\t</td><td>查找制表符</td></tr><tr><td>\v</td><td>查找垂直制表符</td></tr><tr><td>\xxx</td><td>查找以八进制数 xxx 规定的字符</td></tr><tr><td>\xdd</td><td>查找以十六进制数 dd 规定的字符</td></tr><tr><td>\uxxxx</td><td>查找以十六进制数 xxxx 规定的 Unicode 字符</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找字符串中是否有.</span></span><br><span class="line"><span class="comment">//正则字面量:</span></span><br><span class="line"><span class="comment">//由于.是元字符,我们要用\.来代替.</span></span><br><span class="line"><span class="comment">//而\表示转义,要用\\来代替\</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\./</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"adsC.dSf l"</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//正则构造函数:</span></span><br><span class="line"><span class="comment">//由于函数的参数为字符串,而在字符串中\代表转义字符</span></span><br><span class="line"><span class="comment">//故在字面量中的一个\要用\\来代替</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\."</span>);<span class="comment">//等价于reg</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1);<span class="comment">//输出:/\./</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找字符串是否含单词child</span></span><br><span class="line">reg = <span class="regexp">/\bchild\b/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"hello children"</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"hello child ren"</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="练习-A-去除字符串的前后空格"><a href="#练习-A-去除字符串的前后空格" class="headerlink" title="练习: A.去除字符串的前后空格"></a>练习: A.去除字符串的前后空格</h3><p>匹配开头和结尾空格的正则表达式: <font style="color:red;font-size:1.2em;font-weight:bold;"> /^\s*|\s*$/g</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以考虑replace用空串替换空格</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"     Aaron Bob      "</span>;</span><br><span class="line"><span class="comment">//str = str.replace(/\s/g,"");//去除所有空格</span></span><br><span class="line"><span class="comment">//str = str.replace(/^\s*/,"");//去除开头的空格</span></span><br><span class="line"><span class="comment">//str = str.replace(/\s*$/,"");//去除结尾的空格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//综合一下:</span></span><br><span class="line">str = str.replace(<span class="regexp">/^\s*|\s*$/g</span>,<span class="string">""</span>);</span><br><span class="line"><span class="comment">//因为是或的关系,若不加全局匹配,方法匹配完开头的空格就返回了</span></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><h3 id="练习-B-email的正则表达式"><a href="#练习-B-email的正则表达式" class="headerlink" title="练习: B.email的正则表达式"></a>练习: B.email的正则表达式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*电子邮件格式:</span></span><br><span class="line"><span class="comment"> * hello           .hello           @ abc        .com           .cn</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 任意字母数字下划线 .任意字母数字下划线 @ 任意字母数字 .任意字母(2-5位) .任意字母(2-5位)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * \w&#123;3,&#125;          (\.\w+)*         @ [A-z0-9]+  (\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> emailReg = <span class="regexp">/^\w&#123;3,&#125;(\.\w+)*@[A-z0-9]+(\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$/</span>;</span><br><span class="line"><span class="keyword">var</span> email = <span class="string">"crainyday@qq.com"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(emailReg.test(email));<span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS内建对象</title>
      <link href="/blog/JS2-4.html"/>
      <url>/blog/JS2-4.html</url>
      
        <content type="html"><![CDATA[<p>JS中的一些其他内建对象</p><a id="more"></a><h1 id="一-Date"><a href="#一-Date" class="headerlink" title="一.Date"></a>一.Date</h1><h2 id="1-Date对象的创建"><a href="#1-Date对象的创建" class="headerlink" title="1.Date对象的创建"></a>1.Date对象的创建</h2><ul><li>在JS中用Date对象来表示一个时间</li><li>Date的无参构造函数会封装当前代码执行时的时间.</li><li>以字符串为参数的构造函数, 可以指定Date对象的时间.字符串格式: “月/日/年 时:分:秒”</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date1);<span class="comment">//输出:计算机系统的当前时间</span></span><br><span class="line"><span class="keyword">var</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"01/01/2019 08:01:01"</span>);<span class="comment">//"01-01-2019"这样也行</span></span><br><span class="line"><span class="built_in">console</span>.log(date2);<span class="comment">//输出:Tue Jan 01 2019 08:01:01 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure><h2 id="2-Date的一些方法"><a href="#2-Date的一些方法" class="headerlink" title="2.Date的一些方法"></a>2.Date的一些方法</h2><blockquote><p>getDate() 从 Date 对象返回一个月中的某一天 (1 ~ 31)<br>getDay() 从 Date 对象返回一周中的某一天 (0 ~ 6)<br>getMonth() 从 Date 对象返回月份 (0 ~ 11)<br>getFullYear() 从 Date 对象以四位数字返回年份<br>getHours() 返回 Date 对象的小时 (0 ~ 23)。<br>getMinutes() 返回 Date 对象的分钟 (0 ~ 59)<br>getSeconds() 返回 Date 对象的秒数 (0 ~ 59)<br>getMilliseconds() 返回 Date 对象的毫秒(0 ~ 999)<br>getTime() 返回(格林威治时间的)1970年1月1日 00:00:00至今的毫秒数, 即时间戳<br>setTime() 以毫秒设置 Date 对象</p><hr><p>Date.now() 返回当前的时间戳</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"01-27-2019 08:16:24.100"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date1.getDate());<span class="comment">//输出:27</span></span><br><span class="line"><span class="built_in">console</span>.log(date1.getDay());<span class="comment">//输出:0</span></span><br><span class="line"><span class="built_in">console</span>.log(date1.getMonth());<span class="comment">//输出:0</span></span><br><span class="line"><span class="built_in">console</span>.log(date1.getFullYear());<span class="comment">//输出:2019</span></span><br><span class="line"><span class="built_in">console</span>.log(date1.getHours());<span class="comment">//输出:8</span></span><br><span class="line"><span class="built_in">console</span>.log(date1.getMinutes());<span class="comment">//输出:16</span></span><br><span class="line"><span class="built_in">console</span>.log(date1.getSeconds());<span class="comment">//输出:24</span></span><br><span class="line"><span class="built_in">console</span>.log(date1.getMilliseconds());<span class="comment">//输出:100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"01-01-1970"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date2.getTime());<span class="comment">//中文系统下,我们与格林威治时间相差8h,输出:-28800000</span></span><br><span class="line"></span><br><span class="line">date2.setTime(date1.getTime());</span><br><span class="line"><span class="built_in">console</span>.log(date2);<span class="comment">//输出:Sun Jan 27 2019 08:16:24 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.now());<span class="comment">//输出当前时间戳</span></span><br></pre></td></tr></table></figure><h1 id="二-Math"><a href="#二-Math" class="headerlink" title="二.Math"></a>二.Math</h1><p>Math和其他内置对象不同, 它不能是一个构造函数, 不能创建对象, 它只是一个工具类, 里面封装了一些数学运算中常用的属性和函数.</p><h2 id="1-常用属性和函数"><a href="#1-常用属性和函数" class="headerlink" title="1.常用属性和函数"></a>1.常用属性和函数</h2><blockquote><p>Math.PI 返回圆周率(约等于3.14159)<br>abs(x) 返回数的绝对值<br>ceil(x) 对数进行上舍入<br>floor(x) 对数进行下舍入<br>round(x) 把数四舍五入为最接近的整数<br>random() 返回0~1之间的随机数. 生成x~y之间的随机数: Math.round(Math.random()*(y-x)+x);<br>max(x,y) 返回 x 和 y 中的最高值<br>min(x,y) 返回 x 和 y 中的最低值<br>pow(x,y) 返回 x 的 y 次幂<br>sqrt(x) 返回数的平方根</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.PI);<span class="comment">//输出:3.141592653589793</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="number">-10</span>));<span class="comment">//输出:10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">1.001</span>));<span class="comment">//输出:2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">1.999</span>));<span class="comment">//输出:2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">1.001</span>));<span class="comment">//输出:1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">1.999</span>));<span class="comment">//输出:1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">1.499</span>));<span class="comment">//输出:1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">1.5</span>));<span class="comment">//输出:2</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i ++)&#123;</span><br><span class="line">    <span class="comment">//生成10个20-80间的随机数,包括20和100</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*<span class="number">80</span>+<span class="number">20</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>));<span class="comment">//输出:100</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min(<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>));<span class="comment">//输出:1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">10</span>));<span class="comment">//输出:1024</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sqrt(<span class="number">100</span>));<span class="comment">//输出:10</span></span><br></pre></td></tr></table></figure><h1 id="三-包装类"><a href="#三-包装类" class="headerlink" title="三.包装类"></a>三.包装类</h1><blockquote><p>回顾: 基本数据类型(Number String Boolean Null Undefined)VS引用数据类型(Object)</p><p>JS为我们提供了三个包装类(Number String Boolean):<br>&emsp;&emsp;Number—&gt;可以将基本数据类型的Number转换为Number对象<br>&emsp;&emsp;String&emsp;—&gt;可以将基本数据类型的String转换为String对象<br>&emsp;&emsp;Boolean—&gt;可以将基本数据类型的Boolean转换为Boolean对象</p></blockquote><font style="color:red;font-size:1.2em;font-weight:bold;">但是, 注意: 实际应用时我们一般不会使用基本数据类型的对象, 若使用, 在做比较时可能会带来一些不可预期的结果</font><ul><li>方法和属性只能添加给对象, 不能添加给基本数据类型.</li><li>当我们调用基本数据类型的属性和方法时, 浏览器会<font style="color:red;">临时</font>使用包装类将其转换为对象, 再调用对象的属性和方法.</li><li>包装类一般是浏览器底层自己调用的, 我们一般不会使用它们.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">123</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">var</span> bool = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">console</span>.log(num == <span class="number">123</span>);<span class="comment">//输出:true</span></span><br><span class="line"><span class="built_in">console</span>.log(num === <span class="number">123</span>);<span class="comment">//输出:false</span></span><br><span class="line"><span class="keyword">if</span>(bool)&#123;<span class="comment">//bool是对象,对象转换为Boolean时都会转换为true,所以下述代码会执行</span></span><br><span class="line">    alert(<span class="string">"我执行了~~~"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">a.hello = <span class="string">"hello"</span>;<span class="comment">//这里会将a临时转换为对象,但执行完该对象便会被销毁,故后面调用会打印undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(a.hello);<span class="comment">//输出:undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.toString(<span class="number">16</span>));<span class="comment">//输出:7b</span></span><br></pre></td></tr></table></figure><h2 id="1-数字进制间的转换"><a href="#1-数字进制间的转换" class="headerlink" title="1.数字进制间的转换"></a>1.数字进制间的转换</h2><p>Number对象有个方法toString()我们常用它来转换进制, 参数为基数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">16</span>));<span class="comment">//输出:7d</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">2</span>));<span class="comment">//输出:1111011</span></span><br></pre></td></tr></table></figure><h1 id="四-String对象的方法"><a href="#四-String对象的方法" class="headerlink" title="四.String对象的方法"></a>四.String对象的方法</h1><blockquote><p>length 属性, 字符串的长度<br>charAt() 返回在指定位置的字符<br>charCodeAt() 返回在指定的位置的字符的 Unicode 编码<br>concat() 连接字符串<br>String.fromCharCode() 从字符编码创建一个字符串, 参数一个或多个Unicode值<br>indexOf() 检索字符串, 有则返回索引, 没有返回-1<br>——–参数:①要检索的字符串, 必需<br>——–②要从哪个位置开始检索, 不传从0开始检索<br>lastIndexOf() 和indexOf类似, 不过这个方法从后向前搜索字符串</p><hr><p>slice() 提取字符串的片断, 将指定的字符串封装到新字符串返回<br>——–两个参数:①截取开始位置的索引, 包括开始位置, 可以为负数(-1表示倒数第一个元素)<br>——–②结束位置的索引, 不包括结束位置(该参数可省略, 表示截取之后所有元素), 可以为负数<br>substring() 提取字符串中两个指定的索引号之间的字符<br>——–与splice类似, 但其参数不可为负值, 若传负值, 则默认使用0.<br>——–该方法还会自动调整参数位置, 若第二个参数小于第一个, 则交换两个参数<br>substr() 从起始索引号提取字符串中指定数目的字符<br>——–ECMAscript 没有对该方法进行标准化, 但现今大部分浏览器支持<br>——–两个参数:①截取开始位置索引(可为负数)②(可选参数)要截取字符的数量</p><hr><p>split() 把字符串分割为字符串数组<br>——–两个参数:①必需, 字符串或正则表达式, 从该参数指定的地方分割<br>——–②可选, 指定返回的数组的最大长度<br>toLowerCase() 把字符串转换为小写<br>toUpperCase() 把字符串转换为大写</p></blockquote><font style="color:red;font-size:1.2em;font-weight:bold;">这些方法都不会改变原来的字符串</font><h2 id="1-连接检索字符串"><a href="#1-连接检索字符串" class="headerlink" title="1.连接检索字符串"></a>1.连接检索字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"hello China,hello World!"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length);<span class="comment">//24</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">23</span>));<span class="comment">//!</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charCodeAt(<span class="number">0</span>));;<span class="comment">//104即h的Unicode值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">104</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">108</span>,<span class="number">111</span>));<span class="comment">//hello</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">0x4e2d</span>,<span class="number">0x56fd</span>));<span class="comment">//中国</span></span><br><span class="line"><span class="built_in">console</span>.log(str.concat(<span class="string">"你好"</span>,<span class="string">"中国"</span>));<span class="comment">//hello China,hello World!你好中国</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"hello"</span>));<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"hello"</span>,<span class="number">1</span>));<span class="comment">//12</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">"hello"</span>));<span class="comment">//12</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"p"</span>));<span class="comment">//-1</span></span><br></pre></td></tr></table></figure><h2 id="2-截取字符串"><a href="#2-截取字符串" class="headerlink" title="2.截取字符串"></a>2.截取字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abcdefghijklmn"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">-3</span>,<span class="number">-1</span>));<span class="comment">//lm</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">1</span>,<span class="number">-1</span>));<span class="comment">//负数会默认为0,然后交换参数为0,1;输出:a</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">-4</span>,<span class="number">3</span>));<span class="comment">//-3开始的三个字符,即:klm</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">0</span>));<span class="comment">//abcdefghijklmn</span></span><br></pre></td></tr></table></figure><h2 id="3-分割转换字符串"><a href="#3-分割转换字符串" class="headerlink" title="3.分割转换字符串"></a>3.分割转换字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Abc,def,ghi,jkL"</span>;</span><br><span class="line"><span class="keyword">var</span> result = str.split(<span class="string">","</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(result));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(result.length);<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">result = str.split(<span class="string">","</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//"Abc","def"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.toUpperCase());<span class="comment">//"ABC,DEF,GHI,JKL"</span></span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//"abc,def,ghi,jkl"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS数组</title>
      <link href="/blog/JS2-3.html"/>
      <url>/blog/JS2-3.html</url>
      
        <content type="html"><![CDATA[<p>JS数组(内建对象), 之前都是说的自定义对象.</p><a id="more"></a><h1 id="一-数组简介"><a href="#一-数组简介" class="headerlink" title="一.数组简介"></a>一.数组简介</h1><ul><li>数组也是一个对象</li><li>它和普通对象的功能类似, 也是用来存储一些值的</li><li>不同的是, 普通对象用字符串作为索引, 数组用数字(&gt;=0的整数)作为索引</li><li>数组的存储性能比普通对象好, 我们往往常用它来存储一些数据</li></ul><h2 id="1-操作数组"><a href="#1-操作数组" class="headerlink" title="1.操作数组"></a>1.操作数组</h2><ul><li>①数组中添加元素, 语法: <font style="color:red;font-weight:bold;">变量名[数字索引] = 值;</font></li><li>②读取数组元素, 语法: <font style="color:red;font-weight:bold;">变量名[数字索引];</font> 若读取不存在的索引不会报错, 会返回undefined</li><li>③获取数组长度, <font style="color:red;font-weight:bold;">变量名.length;</font> 对于连续的数组, 这样可以得到数组长度, 对于不连续的数组这样使用length的值为当前数组的最大索引+1, 尽量不要用不连续的数组.</li><li>④人为的设置length, 若设置的length大于原长度, 则多余部分会空出来; 若设置的length小于原长度, 则多余的元素会被删除</li><li>⑤向数组最后一个位置添加索引, <font style="color:red;font-weight:bold;">变量名[变量名.length] = 某值;</font></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr);<span class="comment">//输出:object</span></span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]);<span class="comment">//输出:"hello"</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length);<span class="comment">//输出:1</span></span><br><span class="line"></span><br><span class="line">arr[<span class="number">5</span>] = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//输出:hello,,,,,123</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length);<span class="comment">//输出:6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">1</span>]);<span class="comment">//输出:undefined</span></span><br><span class="line"></span><br><span class="line">arr.length = <span class="number">1</span>;</span><br><span class="line">arr[arr.length] = <span class="string">"China"</span>;</span><br><span class="line">arr[arr.length] = <span class="number">521</span>;</span><br><span class="line">arr[arr.length] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//输出:"hello","China",521,true</span></span><br></pre></td></tr></table></figure><h2 id="2-数组字面量"><a href="#2-数组字面量" class="headerlink" title="2.数组字面量"></a>2.数组字面量</h2><blockquote><p>数组字面量创建数组, 语法: [];<br>例: var arr = [1,2,3,4,10];//允许在创建时指定要添加的数组元素</p></blockquote><blockquote><p>使用数组的构造函数创建数组的同时, 也可以添加元素, 此时将要添加的元素作为参数传递<br>例: var arr = new Array(1,5,6,2,3);</p></blockquote><blockquote><p>使用数组的构造函数创建数组, 也可以指定数组的初始长度<br>例: var arr = new Array(10);</p></blockquote><font style="color:red;font-size:1.2em;font-weight:bold;">注意: 数组的元素可以是任意类型的数据</font><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">5</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>];<span class="comment">//字面量创建数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);<span class="comment">//输出:5,9,8,4,3,1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2);<span class="comment">//输出:5,9,8,4,3,1</span></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr3);<span class="comment">//输出:,,,,,,,,,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的元素可以是任意类型的数据</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="string">"hello"</span>,<span class="literal">true</span>,<span class="number">123</span>,<span class="literal">null</span>,<span class="literal">undefined</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr4);<span class="comment">//输出:"hello",true,123,null,undefined</span></span><br><span class="line"><span class="comment">//可以是对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">"Bob"</span>&#125;;</span><br><span class="line">arr4[arr4.length] = obj;</span><br><span class="line"><span class="built_in">console</span>.log(arr4[<span class="number">5</span>].name);<span class="comment">//输出:Bob</span></span><br><span class="line"><span class="comment">//可以是函数</span></span><br><span class="line">arr4[arr4.length] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"我是数组中的函数"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">arr4[<span class="number">6</span>]();<span class="comment">//调用函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以放数组, 我们叫这种数组为: 二维数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//输出:1,2,3,4,5,6,7,8,9</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length);<span class="comment">//输出:3</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>].length);<span class="comment">//输出:3</span></span><br></pre></td></tr></table></figure><h1 id="二-数组常用方法"><a href="#二-数组常用方法" class="headerlink" title="二.数组常用方法"></a>二.数组常用方法</h1><blockquote><p>pop() 删除并返回数组的最后一个元素<br>push() 向数组的末尾添加一个或更多元素, 并返回新的长度<br>shift() 删除并返回数组的第一个元素<br>unshift() 向数组的开头添加一个或更多元素, 并返回新的长度</p><hr><p>slice() 从某个已有的数组返回选定的元素<br>——–该方法不会改变原数组, 而是将指定的数组元素封装到新数组中返回, 两个参数:<br>——–①截取开始位置的索引, 包括开始位置, 可以为负数(-1表示倒数第一个元素)<br>——–②截取结束位置的索引, 不包括结束位置(该参数可省略, 表示截取之后所有元素), 可以为负数<br>splice() 删除元素, 并向数组添加新元素<br>——–该方法会改变原数组, 会将指定元素从原数组中删除, 并将删除的元素作为返回值返回<br>——–参数(前两个必需):①开始位置的索引, 可以为负数(-1表示倒数第一个元素)<br>——–②要删除元素的数量<br>——–③第三个参数及以后, 可以传递新元素, 这些元素会自动插入到第一个参数索引的前边</p><hr><p>concat() 连接两个或更多的数组, 并返回结果.(不影响原数组)<br>join() 把数组的所有元素放入一个字符串, 元素通过指定的分隔符(默认为逗号)进行分隔.<br>reverse() 颠倒数组中元素的顺序.(影响原数组)<br>sort() 对数组的元素进行排序(影响原数组), 默认按Unicode编码排序</p></blockquote><h2 id="A-pop-push-shift-unshift"><a href="#A-pop-push-shift-unshift" class="headerlink" title="A.pop push shift unshift"></a>A.pop push shift unshift</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"孙悟空"</span>, <span class="string">"猪八戒"</span>, <span class="string">"唐僧"</span>, <span class="string">"沙和尚"</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.pop();</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//输出:沙和尚</span></span><br><span class="line">result = arr.push(<span class="string">"白骨精"</span>, <span class="string">"玉帝"</span>, <span class="string">"蝎子精"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//输出:6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//输出:孙悟空,猪八戒,唐僧,白骨精,玉帝,蝎子精</span></span><br><span class="line">result = arr.shift();</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//输出:孙悟空</span></span><br><span class="line">result = arr.unshift(<span class="string">"牛魔王"</span>, <span class="string">"红孩儿"</span>, <span class="string">"铁扇公主"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//输出:8</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//输出:牛魔王,红孩儿,铁扇公主,猪八戒,唐僧,白骨精,玉帝,蝎子精</span></span><br></pre></td></tr></table></figure><h2 id="B-slice-splice"><a href="#B-slice-splice" class="headerlink" title="B.slice splice"></a>B.slice splice</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"孙悟空"</span>, <span class="string">"猪八戒"</span>, <span class="string">"唐僧"</span>, <span class="string">"沙和尚"</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.slice(<span class="number">-3</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//输出:猪八戒,唐僧</span></span><br><span class="line">result = arr.slice(<span class="number">-3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//输出:猪八戒,唐僧,沙和尚</span></span><br><span class="line"></span><br><span class="line">result = arr.splice(<span class="number">1</span>,<span class="number">0</span>,<span class="string">"玉帝"</span>,<span class="string">"佛祖"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//输出:""</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//输出:孙悟空,玉帝,佛祖,猪八戒,唐僧,沙和尚</span></span><br></pre></td></tr></table></figure><p>例: 数组去重练习</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length;i ++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = i+<span class="number">1</span>;j &lt; arr.length;j ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] == arr[j])&#123;</span><br><span class="line">            arr.splice(j,<span class="number">1</span>);</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//输出:1,2,3,5,4,6,8</span></span><br></pre></td></tr></table></figure><h2 id="C-concat-join"><a href="#C-concat-join" class="headerlink" title="C.concat join"></a>C.concat join</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">"孙悟空"</span>,<span class="string">"猪八戒"</span>,<span class="string">"沙和尚"</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">"白骨精"</span>,<span class="string">"高玉兰"</span>,<span class="string">"玉兔精"</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr1.concat(arr2,<span class="string">"牛魔王"</span>,<span class="string">"红孩儿"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//输出:"孙悟空","猪八戒","沙和尚","白骨精","高玉兰","玉兔精","牛魔王","红孩儿"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = result.join();</span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//输出:"孙悟空,猪八戒,沙和尚,白骨精,高玉兰,玉兔精,牛魔王,红孩儿"</span></span><br><span class="line">str = result.join(<span class="string">""</span>);<span class="comment">//分隔符为""</span></span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//输出:"孙悟空猪八戒沙和尚白骨精高玉兰玉兔精牛魔王红孩儿"</span></span><br></pre></td></tr></table></figure><h2 id="D-reverse-sort"><a href="#D-reverse-sort" class="headerlink" title="D.reverse sort"></a>D.reverse sort</h2><blockquote><p>①sort方法, 默认按照Unicode编码排序, 对于数字的排序往往不是我们想要的结果, 这时我们就需要按照我们自己想要的排序方式, 编写一个回调函数传递给sort().<br>②sort的回调函数有两个形参, 代表要比较的数组中的两个元素, 第一个形参代表的元素相对于第二个靠前<br>③sort方法根据回调函数的返回值排序.<br>④参数为回调函数的函数, 我们一般用匿名方式传递参数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">4</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//return a-b;//升序</span></span><br><span class="line">    <span class="keyword">return</span> b-a;<span class="comment">//逆序</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h1 id="三-遍历数组"><a href="#三-遍历数组" class="headerlink" title="三.遍历数组"></a>三.遍历数组</h1><h2 id="1-for循环遍历"><a href="#1-for循环遍历" class="headerlink" title="1.for循环遍历"></a>1.for循环遍历</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历数组, 就是将数组的元素取出来使用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Person[name:"</span>+<span class="keyword">this</span>.name+<span class="string">",age:"</span>+<span class="keyword">this</span>.age+<span class="string">",sex:"</span>+<span class="keyword">this</span>.sex+<span class="string">"]"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nameArr = [<span class="string">"孙悟空"</span>,<span class="string">"沙悟净"</span>,<span class="string">"猪悟能"</span>,<span class="string">"唐玄奘"</span>,<span class="string">"白骨精"</span>,<span class="string">"玉兔精"</span>,<span class="string">"蜘蛛精"</span>];</span><br><span class="line"><span class="keyword">var</span> ageArr = [<span class="number">18</span>,<span class="number">28</span>,<span class="number">38</span>,<span class="number">17</span>,<span class="number">16</span>,<span class="number">15</span>,<span class="number">14</span>];</span><br><span class="line"><span class="keyword">var</span> sexArr = [<span class="string">"男"</span>,<span class="string">"男"</span>,<span class="string">"男"</span>,<span class="string">"男"</span>,<span class="string">"女"</span>,<span class="string">"女"</span>,<span class="string">"女"</span>];</span><br><span class="line"><span class="keyword">var</span> personArr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">7</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; personArr.length;i ++)&#123;</span><br><span class="line">    personArr[i] = <span class="keyword">new</span> Person(nameArr[i],ageArr[i],sexArr[i]);</span><br><span class="line">    <span class="built_in">console</span>.log(personArr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出:</span></span><br><span class="line"><span class="comment">Person[name:孙悟空,age:18,sex:男]</span></span><br><span class="line"><span class="comment">Person[name:沙悟净,age:28,sex:男]</span></span><br><span class="line"><span class="comment">Person[name:猪悟能,age:38,sex:男]</span></span><br><span class="line"><span class="comment">Person[name:唐玄奘,age:17,sex:男]</span></span><br><span class="line"><span class="comment">Person[name:白骨精,age:16,sex:女]</span></span><br><span class="line"><span class="comment">Person[name:玉兔精,age:15,sex:女]</span></span><br><span class="line"><span class="comment">Person[name:蜘蛛精,age:14,sex:女]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>练习: 自定义一个函数, 将上述对象数组中person对象age属性大于等于18的对象放入一个新数组, 并将该新数组作为函数的返回值返回.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAdult</span>(<span class="params">perArr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; perArr.length;i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(perArr[i].age&gt;=<span class="number">18</span>)&#123;</span><br><span class="line">            arr.push(perArr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-数组的for-Each-方法遍历"><a href="#2-数组的for-Each-方法遍历" class="headerlink" title="2.数组的for Each()方法遍历"></a>2.数组的for Each()方法遍历</h2><blockquote><p>①该方法适用于IE 8.0+<br>②该方法需要一个函数作为参数, 我们称此函数为回调函数, 这种函数由我们创建, 但是我们不负责调用<br>③我们写回调函数时一般都以匿名形式给出<br>④数组中有几个元素, 该方法会执行几次, 该方法的调用者会将在数组中遍历到的元素以实参形式传递进函数, 我们可以定义形参来接收它们<br>⑤该函数被调用时会传递三个参数: 第一个, 当前正在遍历的元素;第二个, 当前正在遍历元素的索引;第三个, 正在遍历的数组.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接上上述代码</span></span><br><span class="line">personArr.forEach(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">per,index,perArr</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(perArr[index] == per);<span class="comment">//全是true</span></span><br><span class="line">        <span class="built_in">console</span>.log(per);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">/* 结果:</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">Person[name:孙悟空,age:18,sex:男]</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">Person[name:沙悟净,age:28,sex:男]</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">Person[name:猪悟能,age:38,sex:男]</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">Person[name:唐玄奘,age:17,sex:男]</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">Person[name:白骨精,age:16,sex:女]</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">Person[name:玉兔精,age:15,sex:女]</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">Person[name:蜘蛛精,age:14,sex:女]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS对象补充</title>
      <link href="/blog/JS2-2.html"/>
      <url>/blog/JS2-2.html</url>
      
        <content type="html"><![CDATA[<p>JS对象补充</p><a id="more"></a><h1 id="一-工厂方法创建对象"><a href="#一-工厂方法创建对象" class="headerlink" title="一.工厂方法创建对象"></a>一.工厂方法创建对象</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:,</span><br><span class="line">    age:,</span><br><span class="line">    sex:,</span><br><span class="line">    showMes:</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们想要创建大量的上面的obj对象, 它们的属性名都一样, 但是值可能不一样, 这时, 为了”偷懒”, 我们可以使用工厂方法创建对象. 批量生产对象.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        name: name,</span><br><span class="line">        age: age,</span><br><span class="line">        sex: sex,</span><br><span class="line">        showMes: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> per1 = createPerson(<span class="string">"孙悟空"</span>, <span class="number">500</span>, <span class="string">"男"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(per1);<span class="comment">//Object &#123;name: "孙悟空", age: 500, sex: "男", showMes: ƒ&#125;</span></span><br><span class="line"><span class="keyword">var</span> per2 = createPerson(<span class="string">"猪八戒"</span>, <span class="number">300</span>, <span class="string">"男"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(per2);<span class="comment">//Object &#123;name: "猪八戒", age: 300, sex: "男", showMes: ƒ&#125;</span></span><br><span class="line"><span class="keyword">var</span> per3 = createPerson(<span class="string">"白骨精"</span>, <span class="number">500</span>, <span class="string">"女"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(per3);<span class="comment">//Object &#123;name: "白骨精", age: 500, sex: "女", showMes: ƒ&#125;</span></span><br><span class="line">per1.showMes();<span class="comment">//孙悟空</span></span><br><span class="line">per2.showMes();<span class="comment">//猪八戒</span></span><br><span class="line">per3.showMes();<span class="comment">//白骨精</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createDog</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    obj.name = name;</span><br><span class="line">    obj.age = age;</span><br><span class="line">    obj.showMes = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dog = createDog(<span class="string">"哮天犬"</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dog);<span class="comment">//Object &#123;name: "哮天犬", age: 3, showMes: ƒ&#125;</span></span><br><span class="line">dog.showMes();<span class="comment">//哮天犬</span></span><br></pre></td></tr></table></figure><h1 id="二-构造函数"><a href="#二-构造函数" class="headerlink" title="二.构造函数"></a>二.构造函数</h1><ul><li>从上面代码的注释中, 可以看见我们用工厂方法创建的对象都是Object类型的, 不易区分不同的对象(到底是Dog还是Person), 这时, 我们可以创建一个构造函数来专门创建某一类对象.</li><li>构造函数是一类特殊的普通函数, 习惯上我们将构造函数的函数名首字母大写.</li><li>构造函数与普通函数相比, 调用方式不同, 普通的直接调用即可, <font style="color:red;font-weight:bold;">构造函数需要在new关键字之后调用.</font></li><li>使用同一个构造函数创建的对象, 我们称为一类对象, 也将构造函数称为类, 将它创建的对象称为类的实例.</li></ul><p>构造函数的执行流程:</p><ol><li>被调用时, 首先创建一个新的对象</li><li>将函数中的this指向新建的对象(即在构造函数中, 可以用this来引用正在新建的对象)</li><li>逐行执行构造函数中的代码</li><li>将新建的对象作为构造函数的返回值返回.</li></ol><h3 id="A-instanceof"><a href="#A-instanceof" class="headerlink" title="A.instanceof"></a>A.instanceof</h3><p>用法: 对象 instanceof 构造函数, 检查一个对象是否为一个构造函数的实例, 是返回true, 不是返回false.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    <span class="keyword">this</span>.showMes = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> per1 = <span class="keyword">new</span> Person(<span class="string">"孙悟空"</span>, <span class="number">500</span>, <span class="string">"男"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(per1);<span class="comment">//Person &#123;name: "孙悟空", age: 500, sex: "男", showMes: ƒ&#125;</span></span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(<span class="string">"猪八戒"</span>, <span class="number">300</span>, <span class="string">"男"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(per1);<span class="comment">//Person &#123;name: "猪八戒", age: 300, sex: "男", showMes: ƒ&#125;</span></span><br><span class="line"><span class="keyword">var</span> per3 = <span class="keyword">new</span> Person(<span class="string">"白骨精"</span>, <span class="number">500</span>, <span class="string">"女"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(per1);<span class="comment">//Person &#123;name: "白骨精", age: 500, sex: "女", showMes: ƒ&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(per1 <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(per1.showMes == per2.showMes);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>上面的代码有一个弊端, 每一个由Person创建的对象都有一个自己的showMes()方法</p><blockquote><p>console.log(per1.showMes == per2.showMes);//false</p></blockquote><p>返回结果是false, 而这不是我们想要的, 这样的话会浪费很多的内存.故修改一下, 将该函数的声明放到外面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMes</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    <span class="keyword">this</span>.showMes = showMes;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> per1 = <span class="keyword">new</span> Person(<span class="string">"孙悟空"</span>, <span class="number">500</span>, <span class="string">"男"</span>);</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(<span class="string">"猪八戒"</span>, <span class="number">300</span>, <span class="string">"男"</span>);</span><br><span class="line"><span class="keyword">var</span> per3 = <span class="keyword">new</span> Person(<span class="string">"白骨精"</span>, <span class="number">500</span>, <span class="string">"女"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(per1.showMes == per2.showMes);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="三-原型对象"><a href="#三-原型对象" class="headerlink" title="三.原型对象"></a>三.原型对象</h2><blockquote><p>注意: 上述改进, 将对象共有的方法showMes()直接声明在全局作用域中, 也是存在一些弊端, ①污染了全局作用域(在全局作用域中不能再添加同名函数)②不是很安全. 因此, 这次我们采用一个非常好的办法, 即解决多个同类对象创建多个公共的方法, 又不会对全局作用域造成污染.</p></blockquote><p>原型: prototype</p><ul><li>我们创建的每一个函数, 解析器都会向函数中添加一个属性prototype, 这个属性对应着一个对象即原型对象</li><li>如果函数作为普通函数调用prototype没有任何作用</li><li>如果函数以构造函数的形式调用时,它创建的对象中都会有一个隐含的属性, 指向该构造函数的原型对象, 我怕们可以用对象的__proto__属性来访问该对象</li><li>原型对象就相当于一个公共的区域, 所有同一个类的实例都能访问到这个对象, 我们可以将对象中共有的内容统一放到原型对象中.</li><li>当我们访问一个对象的属性或方法时, 它会先在对象自身寻找, 如果有则直接使用, 若没有则会去原型对象中寻找, 如果原型对象中有则直接使用</li></ul><p><img src="imgs\JS\prototype.png" alt="prototype"></p><p>改进如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.showMes = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> per1 = <span class="keyword">new</span> Person(<span class="string">"孙悟空"</span>, <span class="number">500</span>, <span class="string">"男"</span>);</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(<span class="string">"猪八戒"</span>, <span class="number">300</span>, <span class="string">"男"</span>);</span><br><span class="line"><span class="keyword">var</span> per3 = <span class="keyword">new</span> Person(<span class="string">"白骨精"</span>, <span class="number">500</span>, <span class="string">"女"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype == per1.__proto__);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(per1.showMes == per2.showMes);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="A-检查对象的属性"><a href="#A-检查对象的属性" class="headerlink" title="A.检查对象的属性"></a>A.检查对象的属性</h3><blockquote><p>1.之前提到过用in运算符检查对象中是否包含某个属性, 但这样, 如果对象的原型对象中有这个属性, 也会返回true, 显然这不是我们想得到的结果.</p><p>2.我们只想在对象本身的属性中搜索. 这时候可以用对象的hasOwnProperty()方法检查. hasOwnProperty方法其实在原型对象的原型中</p><p>3.原型对象也是对象, 它也有原型. 我们调用一个对象的属性或方法时, 会先在对象自身寻找, 没有就去对象的原型中寻找, 还没有就去原型的原型中寻找, 直到找到Object对象的原型, 没有则返回undefined</p><p>4.Object对象的原型没有原型, 它的值为null</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.showMes = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line">Person.prototype.a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person(<span class="string">"孙悟空"</span>, <span class="number">500</span>, <span class="string">"男"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a"</span> <span class="keyword">in</span> per);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(per.hasOwnProperty(<span class="string">"a"</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(per.__proto__.__proto__.hasOwnProperty(<span class="string">"hasOwnProperty"</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="四-toString"><a href="#四-toString" class="headerlink" title="四.toString()"></a>四.toString()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.showMes = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person(<span class="string">"孙悟空"</span>, <span class="number">500</span>, <span class="string">"男"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(per);<span class="comment">//输出:[object Object]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.__proto__.hasOwnProperty(<span class="string">"toString"</span>));<span class="comment">//输出:true</span></span><br></pre></td></tr></table></figure><ul><li>我们直接在页面打印对象的引用时, 实际上调用了对象的toString()方法, 打印的是toString()的返回值, 默认调用的是Object原型的toString()方法.</li><li>假如我们想打印对象时, 按照我们自己的想法控制输出的内容, 我们就需要显示的添加一个toString()方法, 不让当前的对象向原型中搜寻方法.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Person[name:"</span>+<span class="keyword">this</span>.name+<span class="string">",age:"</span>+<span class="keyword">this</span>.age+<span class="string">",sex:"</span>+<span class="keyword">this</span>.sex+<span class="string">"]"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person(<span class="string">"孙悟空"</span>, <span class="number">500</span>, <span class="string">"男"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(per);<span class="comment">//Person[name:孙悟空,age:500,sex:男]</span></span><br></pre></td></tr></table></figure><h2 id="五-垃圾回收-GC"><a href="#五-垃圾回收-GC" class="headerlink" title="五.垃圾回收(GC)"></a>五.垃圾回收(GC)</h2><ol><li>程序运行过程中也会产生垃圾, 若垃圾过多, 会使程序运行过慢, 因此我们需要一个垃圾回收机制来处理程序运行过程中产生的垃圾.</li><li>当一个对象没有任何变量或属性对它进行引用, 我们将永远无法操作该对象, 这种对象就是垃圾.</li><li>在JS中拥有自动的垃圾回收机制, 会自动将垃圾对象从内存中销毁, 我们不需要也不能进行垃圾回收的操作.</li><li>假如我们不再使用某个对象的引用, 将它设置为null即可</li></ol>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS函数</title>
      <link href="/blog/JS2-1.html"/>
      <url>/blog/JS2-1.html</url>
      
        <content type="html"><![CDATA[<p>JS的函数function</p><a id="more"></a><h1 id="一-JS函数的简介"><a href="#一-JS函数的简介" class="headerlink" title="一.JS函数的简介"></a>一.JS函数的简介</h1><p>函数(function):</p><ul><li>函数也是一个对象</li><li>函数中封装了一些功能(代码), 在需要时可以执行这些功能(代码)</li><li>封装到函数的代码不会立即执行, 只有调用时才会执行</li><li>调用函数时代码顺序执行, 调用语法: 函数对象()</li><li>使用typeof检查一个函数对象时, 会返回function</li></ul><h2 id="A-创建一个函数对象"><a href="#A-创建一个函数对象" class="headerlink" title="A.创建一个函数对象"></a>A.创建一个函数对象</h2><ol><li>将要封装的代码以字符串形式传递给构造函数, 例:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"console.log('这是我的第一个函数~~~')"</span>);</span><br><span class="line">fun[<span class="string">'value'</span>] = <span class="string">"123"</span>;<span class="comment">//函数是对象, 也可以像对象那样用, 但我们一般不这样用</span></span><br><span class="line">fun();<span class="comment">//这样调用函数</span></span><br><span class="line"><span class="comment">//实际编程中我们很少用这种方式创建一个函数</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用函数声明来船舰一个函数(对象), 格式:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">[形参<span class="number">1</span>,形参<span class="number">2</span>,形参<span class="number">3</span>,...,形参n]</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用函数表达式创建一个函数, 格式:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 函数名 = <span class="function"><span class="keyword">function</span>(<span class="params">[形参<span class="number">1</span>,形参<span class="number">2</span>,形参<span class="number">3</span>,...,形参n]</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-参数"><a href="#B-参数" class="headerlink" title="B.参数"></a>B.参数</h2><ul><li>在函数的()中, 可以指定0个或多个形参</li><li>多个形参之间用逗号隔开, 声明了形参就相当于在函数内部声明了对应的变量</li><li>声明的形参并没有被赋值</li><li>调用函数时, 可以在()中指定实参, 实参的值会依次赋值给形参</li><li>调用函数时, 解析器不会检查形参与实参的数量是否匹配</li><li>函数的实参可以是任何类型的值, 包括基本类型、对象、函数(对象).</li></ul><font style="color:red;font-size:1.2em;font-weight:bold;">特别注意: 调用函数时, 解析器也不会检查实参的类型, 所以要检查一下参数是否合法</font><p>例题: 定义一个能求两个数和的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((<span class="keyword">typeof</span> a) == <span class="string">"number"</span>&amp;&amp;(<span class="keyword">typeof</span> b) == <span class="string">"number"</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a+b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">123</span>,<span class="number">456</span>);</span><br><span class="line">sum(<span class="number">123</span>,<span class="string">"456"</span>);<span class="comment">//不输出内容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是"</span> + obj.name + <span class="string">",性别"</span> + obj.sex + <span class="string">",我今年"</span> + obj.age + <span class="string">"岁了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name:<span class="string">"孙悟空"</span>,</span><br><span class="line">    sex:<span class="string">"男"</span>,</span><br><span class="line">    age:<span class="number">500</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//函数实参为对象</span></span><br><span class="line">show(person);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    a(person);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数实参为函数(对象),将max赋值给了a,故a(person);与show(person);等价</span></span><br><span class="line">fun(max);</span><br></pre></td></tr></table></figure><h2 id="C-返回值"><a href="#C-返回值" class="headerlink" title="C.返回值"></a>C.返回值</h2><ul><li>在函数中, 可以用return关键字返回一个表达式的值</li><li>可以在调用函数处, 声明一个变量接收该函数的返回值</li><li>若函数中不写return或没有return一个值, 则会默认return undefined;</li><li>return语句之后的代码不会被执行</li><li>函数的返回值也可以是任意类型的值, 基本类型、对象、函数</li></ul><p>例: 定义一个能求两个数最大值的函数, 并将最大值返回.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((<span class="keyword">typeof</span> a) == <span class="string">"number"</span>&amp;&amp;(<span class="keyword">typeof</span> b) == <span class="string">"number"</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> maxNum = max(<span class="number">123</span>,<span class="number">456</span>);</span><br><span class="line"><span class="built_in">console</span>.log(maxNum);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a = "</span> + a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数实参为函数(对象)</span></span><br><span class="line">fun(max);</span><br><span class="line"><span class="comment">//函数实参为函数的返回值</span></span><br><span class="line">fun(max(<span class="number">123</span>,<span class="number">456</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//return &#123;name:"孙悟空"&#125;;//返回一个对象</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"我是fun3函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//return fun3();//这样是返回fun3函数的返回值</span></span><br><span class="line">    <span class="keyword">return</span> fun3;<span class="comment">//返回fun3这个函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fun2();<span class="comment">//此时f为fun3</span></span><br><span class="line">f();<span class="comment">//调用fun3函数</span></span><br><span class="line">fun2()();<span class="comment">//和f();等价,也是调用fun3()函数</span></span><br></pre></td></tr></table></figure><h2 id="D-立即执行函数"><a href="#D-立即执行函数" class="headerlink" title="D.立即执行函数"></a>D.立即执行函数</h2><ul><li>函数定义完, 立即就会被调用</li><li>这种函数往往是匿名函数, 只会执行一次.例:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先用一对小括号将匿名函数括起来,表示是一个整体,否则不允许这样声明函数</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a = "</span> + a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b = "</span> + b);</span><br><span class="line">&#125;)(<span class="number">123</span>, <span class="number">456</span>);</span><br></pre></td></tr></table></figure><h2 id="E-方法-method"><a href="#E-方法-method" class="headerlink" title="E.方法(method)"></a>E.方法(method)</h2><ul><li>一类特殊的函数, 这类函数是对象的属性</li><li>若一个函数成了对象的一个属性, 那这个函数就叫做对象的方法</li><li>调用函数就叫做调用的对象的某方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">"Hello"</span>);<span class="comment">//调用document对象的write方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello"</span>);<span class="comment">//调用console对象的log方法</span></span><br></pre></td></tr></table></figure><h1 id="二-作用域-Scope"><a href="#二-作用域-Scope" class="headerlink" title="二.作用域(Scope)"></a>二.作用域(Scope)</h1><h2 id="A-全局作用域"><a href="#A-全局作用域" class="headerlink" title="A.全局作用域"></a>A.全局作用域</h2><ul><li>直接编写在script标签中的JS代码, 都在全局作用域中</li><li>全局作用域在页面打开时创建, 在页面关闭时销毁</li><li>全局作用域中有一个<font style="color:red;">全局对象window</font>, 它代表一个浏览器窗口, 由浏览器创建, 我们可以直接使用</li><li>全局作用域中我们创建的变量都会作为<font style="color:red;">window对象的属性保存</font>, 函数作为window的方法</li><li>全局作用域里的变量都是全局变量, 在页面的任何部分都能访问到</li></ul><blockquote><p>变量的声明提前: 使用var声明的变量, 会在所有的代码执行之前被声明(但不会被赋值)<br>但声明变量时不使用var, 则变量不会被提前声明<br>函数的声明提前: 使用函数声明的形式创建的函数 function 函数名(){}<br>会在所有代码执行前被创建, 所以我们可以在函数声明前调用它.<br>但是用函数表达式创建的函数 var fun = function(){};<br>不会被声明提前, 所以不能在声明前调用.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//输出:undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;<span class="comment">//去掉var之后, 第一行报错</span></span><br><span class="line">fun();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是fun"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是fun1"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">fun1();<span class="comment">//只能在这之后调用, 否则会报错.</span></span><br></pre></td></tr></table></figure><h2 id="B-函数作用域"><a href="#B-函数作用域" class="headerlink" title="B.函数作用域"></a>B.函数作用域</h2><ul><li>函数被调用时, 创建自己的函数作用域, 函数执行完毕, 函数作用域销毁</li><li>每调用一次函数, 创建一个新的函数作用域, 作用域之间互相独立</li><li>函数作用域中可以访问到全局变量, 但全局作用域无法访问到局部变量</li><li>在函数中操作一个变量时, 首先在自身作用域中寻找, 没有的话向上一级寻找</li><li>函数中想使用全局变量, 可以使用window.变量名</li><li>函数的形参相当于在函数作用域中声明的.</li></ul><blockquote><p>也存在声明提前的问题, 但提前声明于当前作用域</p></blockquote><h1 id="三-debug"><a href="#三-debug" class="headerlink" title="三.debug"></a>三.debug</h1><p>这种调试, 可以查看执行过程中内存的状态, 各变变量的情况.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">alert(d);<span class="comment">//声明提前</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">15</span>;</span><br><span class="line">c = <span class="number">20</span>;<span class="comment">//不要监视c可能会出错卡死</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是fun"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> d = <span class="number">25</span>;</span><br></pre></td></tr></table></figure><p>先打开, 浏览器的开发者工具, 以chrome为例, 按F12, 选择sources, 之后如下图:</p><p><img src="imgs\JS\debug.png" alt="debug"></p><p>其他浏览器类似</p><h1 id="四-this"><a href="#四-this" class="headerlink" title="四.this"></a>四.this</h1><p>你可以这样理解:</p><p>&emsp;&emsp;解析器在调用函数时每次都会向函数内部传递一个隐含的参数this, this指向一个对象, 这个函数我们称为函数执行的上下文对象, 根据函数的调用方式不同, this会指向不同的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" "</span> + <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun();<span class="comment">//这时this指向window对象,this.name="全局的name";</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"全局的name"</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">"孙悟空"</span>,</span><br><span class="line">    show:fun</span><br><span class="line">&#125;;</span><br><span class="line">obj.show();<span class="comment">//这时this指向obj, this.name="孙悟空";</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    name:<span class="string">"猪八戒"</span>,</span><br><span class="line">    show:fun</span><br><span class="line">&#125;;</span><br><span class="line">obj1.show();<span class="comment">//这时this指向obj1, this.name="猪八戒";</span></span><br></pre></td></tr></table></figure><h1 id="五-call-和apply"><a href="#五-call-和apply" class="headerlink" title="五.call()和apply()"></a>五.call()和apply()</h1><ul><li>这两个方法都是函数对象的方法, 需要通过函数对象来调用</li><li>当函数对象调用call()和apply()方法时, 函数中的代码也会执行.</li><li>可以将一个对象指定为call和apply的第一个参数, 这个对象将会成为函数执行时的this</li><li>call()方法, 将函数原本的实参在第一个参数(对象)以后依次传递给函数的形参</li><li>apply()方法, 将函数原本的实参封装到一个数组统一传递.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">name</span>:<span class="string">"obj1"</span>,<span class="attr">show</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>:<span class="string">"obj2"</span>&#125;;</span><br><span class="line"></span><br><span class="line">fun();<span class="comment">//输出:window</span></span><br><span class="line">fun.call(obj1);<span class="comment">//输出:object</span></span><br><span class="line">fun.apply(obj2);<span class="comment">//输出:object</span></span><br><span class="line"></span><br><span class="line">obj1.show();<span class="comment">//输出:obj1</span></span><br><span class="line">obj1.show.call(obj2);<span class="comment">//输出:obj2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a = "</span>+a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b = "</span>+b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun2.call(obj1,<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//将参数依次传递</span></span><br><span class="line">fun2.apply(obj1,[<span class="number">1</span>,<span class="number">2</span>]);<span class="comment">//将参数封装成数组统一传递</span></span><br></pre></td></tr></table></figure><h2 id="this的情况"><a href="#this的情况" class="headerlink" title="this的情况:"></a>this的情况:</h2><ol><li>在函数中调用时, this永远指window</li><li>在方法中调用时, this是调用方法的对象</li><li>在构造函数中调用时, this是正在创建的对象</li><li>使用call和apply调用时, this是参数传递过来的对象</li></ol><h1 id="六-arguments"><a href="#六-arguments" class="headerlink" title="六.arguments"></a>六.arguments</h1><blockquote><p>在调用函数时, 浏览器都会传递进两个隐含的参数:<br>①函数的上下文对象:this<br>②封装实参的对象: arguments, 我们传递的实参都保存在里面</p></blockquote><ul><li>arguments是一个类数组对象, 它不是数组, 但是它也可以通过数字索引来操作数据.</li><li>arguments.length可以获取实参的长度, 我们即使没定义形参, 也可以通过arguments来使用形参, 但这样比较麻烦</li><li>arguments[0]表示第一个实参, 以此类推.</li><li>arguments.callee属性, 表示当前的函数对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span> <span class="keyword">instanceof</span> <span class="built_in">Array</span>);<span class="comment">//判断arguments是不是数组,输出:false</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(<span class="built_in">arguments</span>));<span class="comment">//判断arguments是不是数组,输出:false</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);<span class="comment">//输出:4</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">3</span>]);<span class="comment">//输出:true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee == fun);<span class="comment">//输出:true</span></span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="number">3</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS对象简介</title>
      <link href="/blog/JS2-0.html"/>
      <url>/blog/JS2-0.html</url>
      
        <content type="html"><![CDATA[<p>JS的Object类型</p><a id="more"></a><h1 id="一-Object对象"><a href="#一-Object对象" class="headerlink" title="一.Object对象"></a>一.Object对象</h1><p>Object类型, 我们也称为一个对象. 是JavaScript中的引用数据类型.</p><ul><li>它是一种复合值, 它将很多值聚合到一起, 可以通过名字访问这些值.</li><li>对象也可以看做是属性的无序集合, 每个属性都是一个名/值对.</li><li>对象除了可以创建自有属性, 还可以通过从一个名为原型的对象那里继承属性.</li><li>除了字符串、数字、true、false、null和undefined之外, JS中的值都是对象.</li><li>对象可以说是对一些名值对的封装</li></ul><h2 id="A-对象的分类"><a href="#A-对象的分类" class="headerlink" title="A.对象的分类:"></a>A.对象的分类:</h2><ol><li>内建对象: 由ES标准制定的对象, 在任何ES的实现中都能使用</li></ol><ul><li>比如: Math String Number Boolean Function Object……</li></ul><ol start="2"><li>宿主对象: 由JS的运行环境提供的对象, 目前主要指浏览器提供的对象</li></ol><ul><li>比如: BOM DOM</li></ul><ol start="3"><li>自定义对象(最难): 由开发人员自己创建的对象</li></ol><h1 id="二-创建自定义对象"><a href="#二-创建自定义对象" class="headerlink" title="二.创建自定义对象"></a>二.创建自定义对象</h1><p>访问属性的两种方式:</p><ul><li>用 . 访问: 对象.属性名</li><li>用 [] 访问: 对象[‘属性名’], 这样操作属性更灵活, 常用于操作一些特殊的属性名</li></ul><p>属性名的命名方式, 建议按照标识符的规范去做; 属性值可以是任意类型的值, 甚至是一个对象.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一:先创建对象, 再添加属性</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">"孙悟空"</span>;<span class="comment">//添加name属性</span></span><br><span class="line">person.age = <span class="number">18</span>;<span class="comment">//添加age属性</span></span><br><span class="line">person.name = <span class="string">"牛魔王"</span>;<span class="comment">//修改属性</span></span><br><span class="line"><span class="keyword">delete</span> person.name;<span class="comment">//删除属性</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name);<span class="comment">//读取属性, 如果读取不到对象的属性会返回undefined</span></span><br><span class="line"><span class="comment">//方式二:创建对象的同时添加属性, 这种叫做对象字面量</span></span><br><span class="line"><span class="keyword">var</span> sex = <span class="string">"男"</span>;</span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">    name: <span class="string">"孙悟空"</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    <span class="string">"123"</span>: <span class="number">789</span><span class="comment">//最后一个属性后一定不能加逗号</span></span><br><span class="line">&#125;;</span><br><span class="line">person1[sex] = sex;</span><br><span class="line"><span class="built_in">console</span>.log(person1[sex]);</span><br><span class="line"><span class="keyword">var</span> index = <span class="string">'123'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person1[<span class="string">'123'</span>]);<span class="comment">//person1.123是不允许的</span></span><br><span class="line"><span class="built_in">console</span>.log(person1[index]);<span class="comment">//与person1['123']等价</span></span><br></pre></td></tr></table></figure><h1 id="三-in运算符"><a href="#三-in运算符" class="headerlink" title="三.in运算符"></a>三.in运算符</h1><p>通过该运算符检查对象是否有某个属性, 有则返回true, 没有返回false.</p><p>格式: “属性名” in object, 例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">"孙悟空"</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    <span class="string">"123"</span>: <span class="number">789</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"obj"</span> <span class="keyword">in</span> person);</span><br></pre></td></tr></table></figure><h1 id="四-数据类型"><a href="#四-数据类型" class="headerlink" title="四.数据类型"></a>四.数据类型</h1><p>基本数据类型&amp;引用数据类型</p><p>基本数据类型: Number String Boolean Null Undefined</p><ul><li>基本数据类型的值是无法修改的, 是不可变的.</li><li>基本数据类型的比较是值的比较, 也就是只要两个变量的值相等, 我们就认为这两个变量相等.</li></ul><p>引用数据类型: Object</p><ul><li>当一个变量是一个对象时, 实际上变量中保存的并不是对象本身, 而是对象的引用(堆内存中对象的地址).</li><li>当从一个变量向另一个变量复制引用类型的值时, 会将对象的引用复制到变量中, 并不是创建一个新的对象.</li><li>这时, 两个变量指向的是同一个对象. 因此, 改变其中一个变量会影响另一个</li></ul><p>对比如下代码即结果, 有什么区别?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a ++;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a = "</span> + a + <span class="string">";b = "</span> + b);</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">"孙悟空"</span>,</span><br><span class="line">    birth:&#123;</span><br><span class="line">        year:<span class="number">1998</span>,</span><br><span class="line">        month:<span class="number">10</span>,</span><br><span class="line">        day:<span class="number">8</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj;</span><br><span class="line">obj2.name = <span class="string">"牛魔王"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"obj.name = "</span> + obj.name + <span class="string">"; obj2.name = "</span> + obj2.name);</span><br><span class="line"><span class="comment">//obj2 = null;//若执行obj2 = null;那obj2不再指向任何内容, 如下命令会出错</span></span><br><span class="line">obj2.name = <span class="string">"猪八戒"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj == obj2);<span class="comment">//引用数据类型比较的是地址</span></span><br></pre></td></tr></table></figure><ul><li>JS运行时, 基本类型的变量直接存在栈空间;</li><li>引用类型的实体(即对象)保存在堆空间, 变量中保存的实际上对象在堆内存中的地址.</li><li>以上代码在内存中的情况如下:</li></ul><p><img src="imgs\JS\Memory.png" alt="Memory"></p><h1 id="五-for…in语句"><a href="#五-for…in语句" class="headerlink" title="五.for…in语句"></a>五.for…in语句</h1><ul><li>在开发过程中, 我们往往会使用别人给我们提供好的对象</li><li>但我们不知道对象里有什么属性</li><li>这时就用到了for…in语句来遍历对象的属性</li></ul><p>例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">"CRD"</span>,</span><br><span class="line">    sex:<span class="string">"男"</span>,</span><br><span class="line">    age:<span class="number">20</span>,</span><br><span class="line">    nation:<span class="string">"中国"</span>,</span><br><span class="line">    sayHello:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"你好"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> index <span class="keyword">in</span> obj)&#123;<span class="comment">//这里不能用obj.index来操作属性</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"名:"</span> + index + <span class="string">";值:"</span> + obj[index]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS流程控制</title>
      <link href="/blog/JS1-2.html"/>
      <url>/blog/JS1-2.html</url>
      
        <content type="html"><![CDATA[<p>JS的基本语法: 流程控制</p><a id="more"></a><ol><li>条件判断语句 if-else</li><li>条件分支语句 switch-case</li><li>循环语句 for while</li></ol><h1 id="一-if-else"><a href="#一-if-else" class="headerlink" title="一.if-else"></a>一.if-else</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//①</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式)&#123;   &#125;</span><br><span class="line"><span class="comment">//②</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    <span class="comment">//执行的语句1;</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//执行的语句2;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//③</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//执行的语句1;</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">2</span>)&#123;</span><br><span class="line"><span class="comment">//执行的语句2;</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( 条件表达式<span class="number">3</span>)&#123;</span><br><span class="line"><span class="comment">//执行的语句3;</span></span><br><span class="line">&#125;...&#123;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//执行的语句;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[注意]</p><ol><li>一旦满足某个条件表达式, 则进入其执行语句块执行, 执行完毕, 跳出当前的条件判断结构, 不会执行剩下的条件结构语句.</li><li>如果多个条件表达式之间为“互斥”关系, 多个结构可以上下调换顺序.<br>如果多个条件表达式之间为“包含”关系, 要求条件表达式范围小的写在范围大的上面.</li></ol><h1 id="二-switch-case"><a href="#二-switch-case" class="headerlink" title="二.switch-case"></a>二.switch-case</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(变量)&#123;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.case后只能填写变量的值, 不能写范围.<br>2.default是可以省略的, 并且其位置也是灵活的, 但通常将其放在case语句之后.<br>3.一旦满足某个case语句, 则进入执行其操作, 直至遇到break或者程序终止.<br>4.若要判断的语句的条件满足switch变量的数据类型, 且值不多的情况下, 建议选择switch-case .<br>除此之外, 选择if-else.</p><h1 id="三-循环语句"><a href="#三-循环语句" class="headerlink" title="三.循环语句"></a>三.循环语句</h1><p>格式:①初始化条件②循环条件③迭代部分④循环体</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(①;②;③)&#123;</span><br><span class="line">④</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">①</span><br><span class="line"><span class="keyword">while</span>(②)&#123;</span><br><span class="line">④</span><br><span class="line">③</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">①</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">④</span><br><span class="line">③</span><br><span class="line">&#125;<span class="keyword">while</span>(②);</span><br></pre></td></tr></table></figure><p>注意 1.不同的循环结构之间可以相互转换<br>   2.while和do-while的区别; do-while程序至少会执行一次</p><p>嵌套循环: 上述循环体嵌套循环体<br>若外层循环执行m次, 内层循环执行n次, 整个程序执行m*n次 .</p><p>无限循环结构: 我们往往会在无限循环结构内部提供循环的终止条件, 使用break关键字跳出循环.避免死循环.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="keyword">if</span>(  )&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="keyword">if</span>(  )&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="break-amp-continue"><a href="#break-amp-continue" class="headerlink" title="break&amp;continue"></a>break&amp;continue</h2><p>使用switch-case结构或者循环结构中<br>在循环结构中, 一旦执行到break, 就跳出当前循环 .</p><p>continue:<br>使用在循环结构中, 一旦执行到continue, 就跳出当次循环, 继续执行下一次循环.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt;= <span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//break; //程序执行结果:123</span></span><br><span class="line"><span class="keyword">continue</span>;  <span class="comment">//程序执行结果:123567910</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在嵌套循环中, 使用带标签的break和continue.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">label:<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt; <span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span>;j &lt;= <span class="number">10</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j % <span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//continue;</span></span><br><span class="line"><span class="comment">//break label;</span></span><br><span class="line"><span class="keyword">continue</span> label;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题: 求100以内的素数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">2</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">    <span class="keyword">var</span> m = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.sqrt(i));</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">2</span>;j &lt;= m;j ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS基础语法</title>
      <link href="/blog/JS1-1.html"/>
      <url>/blog/JS1-1.html</url>
      
        <content type="html"><![CDATA[<p>JS基础语法</p><a id="more"></a><h2 id="一-JS注释"><a href="#一-JS注释" class="headerlink" title="一.JS注释"></a>一.JS注释</h2><ul><li>和其他高级语言差不多, 分为:</li><li>多行注释: /**/</li><li>单行注释: //</li><li>注释中的代码不会被执行, 只能在源码中看见注释的内容</li></ul><h2 id="二-JS的变量与字面量"><a href="#二-JS的变量与字面量" class="headerlink" title="二.JS的变量与字面量"></a>二.JS的变量与字面量</h2><p>变量的作用是给某一个值或对象标注名称, 方便复用, 变量也用来保存字面量</p><p>字面量: 可以直接使用, 不能更改其值, 像: 123、”Hello”、1.23等</p><ul><li>变量的声明: 使用<font style="color:red;">var关键字声明一个变量</font>, 例: var a;</li><li>变量的赋值: 使用=为变量赋值, 例: a=123;</li><li>声明和赋值同时进行, 例, var a = 123;</li></ul><h2 id="三-JS标识符"><a href="#三-JS标识符" class="headerlink" title="三.JS标识符"></a>三.JS标识符</h2><p>所谓标识符, 就是指变量、函数、属性的名字, 或函数的参数.要求: </p><ul><li>第一个字符必须是一个字母、下划线_或一个美元符号$.</li><li>不能以数字开头, 不能是关键字或保留字</li><li>其他字符可以是字母、下划线、美元符号或数字.</li><li>标识符一般采用驼峰命名法(规范): 首字母小写, 每个单词首字母大写其他字母小写, 例: xxxYyyZzz</li></ul><p>JS底层保存标识符是用Unicode编码的</p><p>命名时, 尽量见名知意, 遵守它的规则和行业规范.</p><h2 id="四-数据类型"><a href="#四-数据类型" class="headerlink" title="四.数据类型"></a>四.数据类型</h2><ul><li>String(字符串型), 例: “Hello World”或’Hello World’</li><li>Number(数值型), 例: 123、1.23</li><li>Boolean(布尔型), 只有 true false两个取值</li><li>Null(null型), 只有一个取值: null, 用来表示一个对象为空; 用 typeof null;会返回object</li><li>Undefined(undefined型), 未定义, 当声明了一个变量而没赋值时, 变量的值就是undefined</li><li>上述五种基本类型之外的类型: Object</li></ul><p>String: 使用单或双引号括起来的整体, 但是单双引号不能嵌套. 了解一些常见的转义字符</p><p>Number: 正无穷(Infinity), 负无穷(-Infinity); Nut a Number(NaN)</p><font style="color:red;font-weight:bold;">尽量避免用JS做一些高精度的计算问题</font><p>用typeof运算符可以检查变量的类型, 例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//输出结果为:number</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">Number</span>.MAX_VALUE + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//输出结果为:Infinity</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">Number</span>.MIN_VALUE;<span class="comment">//JS能表示的大于零的最小值</span></span><br><span class="line"><span class="comment">//Number有它能表示的最大值, 为Number.MAX_VALUE;</span></span><br><span class="line"><span class="comment">//当计算结果超过它时, 输出结果为:Infinity(number型)即正无穷</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123"</span> * <span class="string">"123"</span>;</span><br><span class="line"><span class="comment">//当计算结果非数字时, 会返回一个NaN(number型)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str);<span class="comment">//结果为:NaN</span></span><br></pre></td></tr></table></figure><h2 id="五-强制类型转换"><a href="#五-强制类型转换" class="headerlink" title="五.强制类型转换"></a>五.强制类型转换</h2><ul><li>其他类型变量转换为String, 调用变量的toString()方法, 或调用String()函数</li><li>其他类型变量转换为Number, 调用Number()函数, 对于字符串还可调用parseInt()或parseFloat()函数</li><li>其他类型变量转换为Boolean, 调用Boolean()函数</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其他类型变量转换为String</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;<span class="comment">//注意:当a = null;或a = undefined;时, 不能调用a.toString()方法</span></span><br><span class="line">a = a.toString();<span class="comment">//toString()方法, 无参数, 将a的内容变为string后返回</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">null</span>;</span><br><span class="line">b = <span class="built_in">String</span>(b);<span class="comment">//String()函数, 将要转换的变量作为参数传递给函数, 后函数将结果返回</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"a = "</span> + a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//输出:string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"b = "</span> + b);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//其他类型变量转换为Number</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123"</span>;<span class="comment">//若字符串内容有非数字和空格, Number()函数会将内容转换为NaN</span></span><br><span class="line">str = <span class="built_in">Number</span>(str);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"str = "</span> + str);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str);</span><br><span class="line"><span class="keyword">var</span> bool = <span class="literal">true</span>;<span class="comment">//true==&gt;1  false==&gt;0  null==&gt;0  undefined==&gt;NaN</span></span><br><span class="line">bool = <span class="built_in">Number</span>(bool);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"bool = "</span> + bool);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> bool);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> px = <span class="string">"123px"</span>;</span><br><span class="line">px = <span class="built_in">parseInt</span>(px);<span class="comment">//从第一个字符开始转换, 直到遇到非空和非数字.parseFolat()函数类似</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"px = "</span> + px);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> px);</span><br><span class="line"><span class="comment">//JS中数字的进制, 0x开头表示16进制, 0开头表示8进制</span></span><br><span class="line">px = <span class="string">"070"</span>;</span><br><span class="line">px = <span class="built_in">parseInt</span>(px,<span class="number">10</span>);<span class="comment">//第二个参数, 表示以几进制进行解析</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"px = "</span> + px);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> px);</span><br><span class="line"></span><br><span class="line"><span class="comment">//其他类型变量转换为Boolean</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;<span class="comment">//数字只有0和NaN转换为false, 字符串只有空串转换为false</span></span><br><span class="line">num = <span class="built_in">Boolean</span>(num);<span class="comment">//null和undefined转换为false, 对象都转换为true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"num = "</span> + num);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里说一个isNaN()函数, 判断一个数字是不是NaN, 若是返回true, 不是返回false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(num));</span><br></pre></td></tr></table></figure></div></div><h2 id="六-运算符"><a href="#六-运算符" class="headerlink" title="六.运算符"></a>六.运算符</h2><ul><li>算术运算符  + - * / ++(前置和后置) –(前置和后置) +(符号不变) -(符合取反) %(取模)</li><li>逻辑运算符  &amp;&amp; || !  &amp; |</li><li>关系运算符  &gt;  &lt;  &gt;=  &lt;=  ==  !=  ===  !==</li><li>赋值运算符  = += -= *= /= %=</li><li>条件运算符  ?:, 格式: 条件表达式?表达式1:表达式2; 若条件表达式为true, 整个表达式值为表达式1的值, 否则为表达式2的值.</li><li>位运算符  ^ &amp; | ! (用于数值类型的操作)</li><li>typeof运算符  判断类型并以字符串形式返回</li></ul><h3 id="A-算术运算符"><a href="#A-算术运算符" class="headerlink" title="A.算术运算符:"></a>A.算术运算符:</h3><p>+的特殊性, 可以用来拼接字符串, 例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> + <span class="number">2</span> + <span class="string">"3"</span>;<span class="comment">//33</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">"1"</span> + <span class="number">2</span> + <span class="number">3</span>;<span class="comment">//123</span></span><br></pre></td></tr></table></figure><p>其他算数运算符在进行运算时, 会将操作数先转换为Number类型, 再进行运算, 并将结果以数值类型返回</p><p>前++: 先对原变量加1, 在使用该变量的值;后++: 先使用给变量的值, 再给变量加1;–类似</p><h3 id="B-逻辑运算符"><a href="#B-逻辑运算符" class="headerlink" title="B.逻辑运算符"></a>B.逻辑运算符</h3><p>与 或 非, 运算时将其他类型转换为Boolean型, 再运算;</p><p>注意短路与(&amp;&amp;)和短路或(||):</p><p>短路与: 若第一个值为true, 则返回第二个值; 若第一个值为false, 则返回第一个值;</p><p>短路或: 若第一个值为true, 则返回第一个值; 若第一个值为false, 则返回第二个值;</p><h3 id="C-关系元算符"><a href="#C-关系元算符" class="headerlink" title="C.关系元算符"></a>C.关系元算符</h3><p>比较两个字符串时, 比较的是字符串的字符编码(按位比较); 其他类型转换为数值类型比较; 比较结果为true或false, 以字符串形式返回比较的结果.</p><p>注意==判等时会做隐式类型转换, ===表示全等; != 与 !==一样</p><h3 id="D-赋值运算符"><a href="#D-赋值运算符" class="headerlink" title="D.赋值运算符"></a>D.赋值运算符</h3><p>将运算符左边的表达式的值做一个操作, 然后将操作后的值赋值给右边的变量.</p><h2 id="七-Unicode编码表"><a href="#七-Unicode编码表" class="headerlink" title="七.Unicode编码表"></a>七.Unicode编码表</h2><p>在JS的字符串中, 使用转义字符\u+四位16进制的编码表示Unicode编码</p><p>在HTML中, 使用 “&amp;#10进制编码;” 表示Unicode编码. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>JS基础<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> str = <span class="string">"\u2620"</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(str);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&amp;#9760;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意:</p><ul><li>JS中严格区分大小写(HTML中不区分)</li><li>JS中一个分号代表一条命令的结束</li><li>JS会忽略多个空格与换行符, 因此我们可以用来格式化自己的代码</li><li>JS代码是一条条以;结尾的语句, 可用{}将语句分组, 一个{}也叫一个代码块</li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS简介</title>
      <link href="/blog/JS1-0.html"/>
      <url>/blog/JS1-0.html</url>
      
        <content type="html"><![CDATA[<p>JavaScript简介</p><a id="more"></a><h2 id="一-起源"><a href="#一-起源" class="headerlink" title="一.起源"></a>一.起源</h2><ul><li>JavaScript诞生于1995年, 它的出现主要是用于处理网页中的前端验证.</li><li>所谓的前端验证, 就是指检查用户输入的内容是否符合一定的规则.</li><li>比如: 用户名的长度，密码的长度，邮箱的格式等.</li></ul><h2 id="二-JavaScript构成"><a href="#二-JavaScript构成" class="headerlink" title="二.JavaScript构成"></a>二.JavaScript构成</h2><ul><li>ECMAScript(JS的标准)</li><li>DOM(JS操作网页)</li><li>BOM(JS操作浏览器)</li></ul><h2 id="三-JS的特点"><a href="#三-JS的特点" class="headerlink" title="三.JS的特点"></a>三.JS的特点</h2><ul><li>解释型语言</li><li>类似于 C 和 Java 的语法结构</li><li>动态语言</li><li>基于原型的面向对象</li><li>JavaScript是一门解释型语言, 所谓解释型值语言不需要被编译为机器码在执行, 而是直接执行.</li><li>JavaScript和与Java的关系也仅仅是看起来像而已</li><li>JavaScript是一门动态语言, 所谓的动态语言可以暂时理解为在语言中的一切内容都是不确定的. 比如一个变量, 这一时刻是个整型, 下一时刻可能会变成字符串了.</li><li>JS可能是运行速度最快的动态语言了</li><li>JavaScript是一门面向对象(基于原型的面向对象)的语言</li></ul><h2 id="四-JS的Hello-World"><a href="#四-JS的Hello-World" class="headerlink" title="四.JS的Hello World"></a>四.JS的Hello World</h2><h3 id="A-JS代码的位置"><a href="#A-JS代码的位置" class="headerlink" title="A.JS代码的位置"></a>A.JS代码的位置</h3><ol><li>JS代码写在网页(.html文件)的script标签中</li><li>JS代码可以写在标签的onclick属性中, 点击时才会执行</li><li>JS代码写在超链接的href属性中, 点击时才会执行</li><li>JS代码写在外部.js文件中, 用script标签引入该文件到网页</li></ol><ul><li>虽然可以写在标签的属性中, 但是这样属于结构与行为耦合, 不方便维护, 不推荐使用</li><li>一般使用script引入外部js文件或将代码写在script标签中, 一旦script标签用于引入js文件, 那么就不能在里面编写js代码</li><li>JS代码按script标签先后顺序, 顺序执行</li></ul><font style="color:red;font-size:1.2em;font-weight:bold;">注意: 本站所有的html代码, 均可直接复制, 然后粘贴到<font color="blue"><a href="http://www.w3school.com.cn/tiy/t.asp?f=html_intro" target="_blank" rel="noopener">W3School</a> </font>代码区, 点击提交代码在线执行.</font><p>例:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>JS基础<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//弹出窗口</span></span></span><br><span class="line"><span class="javascript">alert(<span class="string">"Hello Wrold!"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//输出在body标签中</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">"Hello World!"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//输出在控制台</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">"Hello World!"</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/test.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"alert('讨厌, 点我干嘛~~~')"</span>&gt;</span>点我一下试试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert('让你点你就点?')"</span>&gt;</span>点我一下试试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>点我一下试试<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="comment">&lt;!--点击时什么都不做--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//弹出窗口</span></span></span><br><span class="line"><span class="javascript">alert(<span class="string">"two"</span>);</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaInternet</title>
      <link href="/blog/JavaInternet.html"/>
      <url>/blog/JavaInternet.html</url>
      
        <content type="html"><![CDATA[<p>Java网络编程</p><a id="more"></a><h1 id="一-网络编程概述"><a href="#一-网络编程概述" class="headerlink" title="一.网络编程概述"></a>一.网络编程概述</h1><ul><li>Java是 Internet 上的语言, 它从语言级上提供了对网络应用程序的支持, 程序员能够很容易开发常见的网络应用程序.</li><li>Java提供的网络类库, 可以实现无痛的网络连接, 联网的底层细节被隐藏在 Java 的本机安装系统里, 由 JVM 进行控制, 并且 Java 实现了一个跨平台的网络库, 程序员面对的是一个统一的网络编程环境.</li></ul><blockquote><p>计算机网络:<br>    把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规模大、功能强的网络系统, 从而使众多的计算机可以方便地互相传递信息、共享硬件、软件、数据信息等资源.<br>网络编程的目的:<br>    直接或间接地通过网络协议与其它计算机进行通讯.<br>网络编程中有两个主要的问题:<br>       ①如何准确地定位网络上一台或多台主机<br>       ②找到主机后如何可靠高效地进行数据传输.<br>如何实现网络中的主机互相通信:<br>       ①通信双方地址<br>       ②一定的规则(有两套参考模型):<br>           OSI参考模型: 模型过于理想化, 未能在因特网上进行广泛推广<br>           TCP/IP参考模型(或TCP/IP协议): 事实上的国际标准.</p></blockquote><p><img src="imgs\Java\Protocol.png" alt="Protocol"></p><h1 id="二-通讯要素"><a href="#二-通讯要素" class="headerlink" title="二.通讯要素"></a>二.通讯要素</h1><h2 id="1-IP和端口号"><a href="#1-IP和端口号" class="headerlink" title="1.IP和端口号"></a>1.IP和端口号</h2><blockquote><p>IP 地址: InetAddress<br>    ①唯一的标识 Internet 上的计算机<br>    ②本地回环地址(hostAddress): 127.0.0.1 主机名(hostName)：localhost<br>    ③不易记忆<br>端口号标识正在计算机上运行的进程(程序)<br>    ①不同的进程有不同的端口号<br>    ②被规定为一个 16 位的整数 0~65535. 其中, 0~1023被预先定义的服务通信占用(如My Sql占用端口3306, http占用端口80等). 除非我们需要访问这些特定服务, 否则, 就应该使用 1024~65535 这些端口中的某一个进行通信, 以免发生端口冲突. </p></blockquote><font style="color:red;font-size:1.5em;font-weigth:bold;">端口号与IP地址的组合得出一个网络套接字(socket).</font><h2 id="2-网络通信协议"><a href="#2-网络通信协议" class="headerlink" title="2.网络通信协议"></a>2.网络通信协议</h2><blockquote><p>​    计算机网络中实现通信必须有一些约定, 即通信协议, 对速率、传输代码、代码结构、传输控制步骤、出错控制等制定标准.<br>​    通信协议分层的思想</p></blockquote><h3 id="TCP-IP协议簇"><a href="#TCP-IP协议簇" class="headerlink" title="TCP/IP协议簇"></a>TCP/IP协议簇</h3><blockquote><p>传输层协议中有两个非常重要的协议:<br>    传输控制协议TCP(Transmission Control Protocol)<br>    用户数据报协议UDP(User Datagram Protocol)<br>TCP/IP 以其两个主要协议: 传输控制协议(TCP)和网络互联协议(IP)而得名, 实际上是一组协议, 包括多个具有不同功能且互为关联的协议.<br>IP(Internet Protocol)协议是网络层的主要协议, 支持网间互连的数据通信.<br>TCP/IP协议模型从更实用的角度出发, 形成了高效的四层体系结构, 即物理链路层、IP层、传输层和应用层.</p></blockquote><ol><li>TCP协议:</li></ol><ul><li>使用TCP协议前, 须先建立TCP连接, 形成传输数据通道</li><li>传输前, 采用“三次握手”方式, 是可靠的</li><li>TCP协议进行通信的两个应用进程: 客户端、服务端</li><li>在连接中可进行大数据量的传输</li><li>传输完毕, 需释放已建立的连接, 效率低</li></ul><ol start="2"><li>UDP协议(视频传输一般用的此协议):</li></ol><ul><li>将数据、源、目的封装成数据包, 不需要建立连接</li><li>每个数据报的大小限制在64 K内</li><li>因无需连接, 故是不可靠的</li><li>发送数据结束时无需释放资源, 速度快</li></ul><h2 id="3-Socket"><a href="#3-Socket" class="headerlink" title="3.Socket"></a>3.Socket</h2><ul><li>利用套接字(Socket)开发网络应用程序早已被广泛的采用, 以至于成为事实上的标准.</li><li>通信的两端都要有Socket, 是两台机器间通信的端点</li><li>网络通信其实就是Socket间的通信</li><li>Socket允许程序把网络连接当成一个流, 数据在两个Socket间通过IO传输</li><li>一般主动发起通信的应用程序属客户端, 等待通信请求的为服务端</li></ul><h2 id="4-InetAddress类"><a href="#4-InetAddress类" class="headerlink" title="4.InetAddress类"></a>4.InetAddress类</h2><blockquote><p>Internet上的主机有两种方式表示地址:<br>    域名(hostName): localhost<br>    IP 地址(hostAddress): 127.0.0.1<br>InetAddress类主要表示IP地址, 两个子类: Inet4Address、Inet6Address.<br>InetAddress 类对象含有一个 Internet 主机地址的域名和IP地址: localhost 和 127.0.0.1<br>域名容易记忆, 当在连接网络时输入一个主机的域名后, 域名解析服务器(DNS)负责将域名转化成IP地址, 这样才能和主机建立连接. ——-域名解析</p></blockquote><p>Windows系统中, 访问域名, 先找本机hosts(C:\Windows\System32\drivers\etc\hosts), 是否有输入的域名地址, 没有的话, 再通过DNS服务器, 找主机.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个InetAddress对象: getByName()</span></span><br><span class="line">    InetAddress inet = InetAddress.getByName(<span class="string">"localhost"</span>);</span><br><span class="line">    <span class="comment">//inet = InetAddress.getByName("127.0.0.1");</span></span><br><span class="line">    System.out.println(inet);</span><br><span class="line">    <span class="comment">//两个方法</span></span><br><span class="line">    System.out.println(inet.getHostName());</span><br><span class="line">    System.out.println(inet.getHostAddress());</span><br><span class="line">    <span class="comment">//获取本机的IP: getLocalHost()</span></span><br><span class="line">    InetAddress inet1 = InetAddress.getLocalHost();</span><br><span class="line">    System.out.println(inet1);</span><br><span class="line">    System.out.println(inet1.getHostName());</span><br><span class="line">    System.out.println(inet1.getHostAddress());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三-基于Socket的TCP编程"><a href="#三-基于Socket的TCP编程" class="headerlink" title="三.基于Socket的TCP编程"></a>三.基于Socket的TCP编程</h1><p>Java语言的基于套接字编程分为服务端编程和客户端编程, 有两个类<font style="color:red;">Socket类和ServerSocket类</font></p><h2 id="1-TCP编程示例一"><a href="#1-TCP编程示例一" class="headerlink" title="1.TCP编程示例一"></a>1.TCP编程示例一</h2><p>客户端给服务端发送信息, 服务端将信息输出在控制台上.</p><font style="color:red;font-size:1.2em;font-weight:bold;">注意: 测试时, 先开启服务端, 再开启客户端</font><br><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建一个Socket的对象, 通过构造器指明服务端的IP地址, 以及其接收程序的端口号</span></span><br><span class="line">        socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">"127.0.0.1"</span>), <span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//2.getOutputStream(): 发送数据, 方法返回OutputStream的对象</span></span><br><span class="line">        os = socket.getOutputStream();</span><br><span class="line">        <span class="comment">//3.具体的输出过程</span></span><br><span class="line">        os.write(<span class="string">"我是客户端发送的信息"</span>.getBytes());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//4.关闭相应的流和Socket对象</span></span><br><span class="line">        <span class="keyword">if</span> (os != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                os.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ServerSocket ss = <span class="keyword">null</span>;</span><br><span class="line">    Socket s = <span class="keyword">null</span>;</span><br><span class="line">    InputStream is = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建一个ServerSocket的对象, 通过构造器指明自身的端口号</span></span><br><span class="line">        ss = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//2.调用其accept()方法, 返回一个Socket的对象</span></span><br><span class="line">        s = ss.accept();</span><br><span class="line">        <span class="comment">//3.调用Socket对象的getInputStream()获取一个从客户端发送过来的输入流</span></span><br><span class="line">        is = s.getInputStream();</span><br><span class="line">        <span class="comment">//4.对获取的输入流进行的操作</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>];</span><br><span class="line">        <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            String str = <span class="keyword">new</span> String(b, <span class="number">0</span>, len);</span><br><span class="line">            System.out.print(str);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"收到来自于"</span> + s.getInetAddress().getHostAddress() + <span class="string">"的信息"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//5.关闭相应的流以及Socket、ServerSocket的对象</span></span><br><span class="line">        <span class="keyword">if</span> (is != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ss != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ss.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><br><br>## 2.TCP编程示例二<br><br>客户端给服务端发送信息, 服务端将信息打印到控制台上, 同时回馈”成功接受”给客户端<br><br><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">    InputStream is = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">"127.0.0.1"</span>),<span class="number">9999</span>);</span><br><span class="line">        os = socket.getOutputStream();</span><br><span class="line">        os.write(<span class="string">"我是客户端的信息"</span>.getBytes());</span><br><span class="line">        <span class="comment">//shutdownOutput():执行此方法, 显式的告诉服务端发送完毕!</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        is = socket.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>];</span><br><span class="line">        <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = is.read(b)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            String str = <span class="keyword">new</span> String(b,<span class="number">0</span>,len);</span><br><span class="line">            System.out.print(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(os != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                os.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(socket != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServerSocket ss = <span class="keyword">null</span>;</span><br><span class="line">    Socket s = <span class="keyword">null</span>;</span><br><span class="line">    InputStream is = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ss = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">        s = ss.accept();</span><br><span class="line">        is = s.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>];</span><br><span class="line">        <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//下面的read()方法是阻塞式的, 需要客户端显示的告诉服务端, 发送数据完毕</span></span><br><span class="line">        <span class="keyword">while</span>((len = is.read(b)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            String str = <span class="keyword">new</span> String(b,<span class="number">0</span>,len);</span><br><span class="line">            System.out.print(str);</span><br><span class="line">        &#125;</span><br><span class="line">        os = s.getOutputStream();</span><br><span class="line">        os.write(<span class="string">"服务端成功接收"</span>.getBytes());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(os != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                os.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(is != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ss != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ss.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><br><br>## 3.TCP编程示例三<br><br>从客户端发送文件给服务端, 服务端保存到本地. 并返回“成功接收”给客户端. 并关闭相应的连接.<br><br><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">    InputStream is = <span class="keyword">null</span>;</span><br><span class="line">    FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">"localhost"</span>),<span class="number">9999</span>);</span><br><span class="line">        os = socket.getOutputStream();</span><br><span class="line">        fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"1.png"</span>));</span><br><span class="line">        <span class="keyword">int</span> length = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] a = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span>((length = fis.read(a))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(a, <span class="number">0</span>, length);</span><br><span class="line">        &#125;</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        is = socket.getInputStream();</span><br><span class="line">        <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>];</span><br><span class="line">        <span class="keyword">while</span>((len = is.read(b))!= -<span class="number">1</span>) &#123;</span><br><span class="line">            String str = <span class="keyword">new</span> String(b, <span class="number">0</span>, len);</span><br><span class="line">            System.out.print(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(is != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(os !=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                os.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ServerSocket ss = <span class="keyword">null</span>;</span><br><span class="line">    Socket s = <span class="keyword">null</span>;</span><br><span class="line">    InputStream is = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">    FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ss = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">        s = ss.accept();</span><br><span class="line">        is = s.getInputStream();</span><br><span class="line">        fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"2.png"</span>));</span><br><span class="line">        <span class="keyword">byte</span> b[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = is.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(b, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"收到来自于"</span> + s.getInetAddress().getHostAddress() + <span class="string">"的文件"</span>);</span><br><span class="line">        os = s.getOutputStream();</span><br><span class="line">        os.write(<span class="string">"成功接收"</span>.getBytes());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(os != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                os.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(is != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ss != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ss.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><br><br># 四.基于Socket的TCP编程<br><br>- 类 DatagramSocket 和 DatagramPacket 实现了基于 UDP 协议网络程序.<br>- UDP数据报通过数据报套接字 DatagramSocket 发送和接收, 系统不保证UDP数据报一定能够安全送到目的地, 也不能确定什么时候可以抵达.<br>- DatagramPacket 对象封装了UDP数据报, 在数据报中包含了发送端的IP地址和端口号以及接收端的IP地址和端口号.<br>- UDP协议中每个数据报都给出了完整的地址信息, 因此无须建立发送方和接收方的连接.<br><br>## 1.流  程:<br><br>1. DatagramSocket与DatagramPacket<br>2. 建立发送端，接收端<br>3. 建立数据包<br>4. 调用Socket的发送、接收方法<br>5. 关闭Socket<br><br><font style="color:red;font-size:1.2em;font-weight:bold;">发送端与接收端是两个独立的运行程序</font><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送端</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DatagramSocket ds = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ds = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="string">"这是发送端发送过来的数据"</span>.getBytes();</span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(b, <span class="number">0</span>, b.length, InetAddress.getByName(<span class="string">"127.0.0.1"</span>), <span class="number">9999</span>);</span><br><span class="line">        ds.send(dp);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(ds != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ds.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接收端</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rceive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DatagramSocket ds = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ds = <span class="keyword">new</span> DatagramSocket(<span class="number">9999</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(b, <span class="number">0</span>, b.length);</span><br><span class="line">        ds.receive(dp);</span><br><span class="line">        String str = <span class="keyword">new</span> String(dp.getData(),<span class="number">0</span>,dp.getLength());</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="五-URL编程"><a href="#五-URL编程" class="headerlink" title="五.URL编程"></a>五.URL编程</h1><ul><li>URL(Uniform Resource Locator): 统一资源定位符, 它表示 Internet 上某一资源的地址. 通过 URL 我们可以访问 Internet 上的各种网络资源, 比如最常见的 www, ftp 站点. 浏览器通过解析给定的 URL 可以在网络上查找相应的文件或其他资源. </li><li>URL的基本结构由5部分组成:<br>&lt;传输协议&gt;://&lt;主机名&gt;:&lt;端口号&gt;/&lt;文件名&gt;<br>例如: <a href="http://127.0.0.1:8080/helloworld/index.jsp" target="_blank" rel="noopener">http://127.0.0.1:8080/helloworld/index.jsp</a></li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    InputStream is = <span class="keyword">null</span>;</span><br><span class="line">    InputStream is2 = <span class="keyword">null</span>;</span><br><span class="line">    FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"https://papertome.com/hello.txt"</span>);</span><br><span class="line">        <span class="comment">//读取服务器上的资源法一:</span></span><br><span class="line">        is = url.openStream();</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>];</span><br><span class="line">        <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = is.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            String str = <span class="keyword">new</span> String(b,<span class="number">0</span>,len,<span class="string">"utf-8"</span>);</span><br><span class="line">            System.out.print(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//读取服务器上的资源法二:</span></span><br><span class="line">        URLConnection urlConn = url.openConnection();</span><br><span class="line">        is2 = urlConn.getInputStream();</span><br><span class="line">        fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"hello.txt"</span>));</span><br><span class="line">        <span class="keyword">while</span>((len = is2.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(b, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(is != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(is2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is2.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaReflection</title>
      <link href="/blog/JavaReflection.html"/>
      <url>/blog/JavaReflection.html</url>
      
        <content type="html"><![CDATA[<font style="color:black;font-size:1.2em;">Java的反射机制</font><a id="more"></a><h1 id="一-Java-Reflection"><a href="#一-Java-Reflection" class="headerlink" title="一.Java Reflection"></a>一.Java Reflection</h1><p>Reflection(反射)是被视为<font style="color:red;">动态语言</font>的关键, 反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息, 并能直接操作任意对象的内部属性及方法</p><h2 id="1-Java反射机制提供的功能"><a href="#1-Java反射机制提供的功能" class="headerlink" title="1.Java反射机制提供的功能"></a>1.Java反射机制提供的功能</h2><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>生成动态代理(前边讲interface时有静态代理)</li></ul><h2 id="2-反射相关的主要API"><a href="#2-反射相关的主要API" class="headerlink" title="2.反射相关的主要API:"></a>2.反射相关的主要API:</h2><ul><li>java.lang.Class:代表一个类</li><li>java.lang.reflect.Method:代表类的方法</li><li>java.lang.reflect.Field:代表类的成员变量</li><li>java.lang.reflect.Constructor:代表类的构造方法</li></ul><h2 id="3-初识反射"><a href="#3-初识反射" class="headerlink" title="3.初识反射"></a>3.初识反射</h2><p>通过反射在运行时构造一个类的对象, 调用方法和成员变量<br><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReflection</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">//class文件中运行时Person类即为Class类的实例(clazz)</span></span><br><span class="line">Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line"><span class="comment">//1.创建clazz对应的运行时类(Person类)的对象</span></span><br><span class="line">Person p = clazz.newInstance();</span><br><span class="line">System.out.println(p);</span><br><span class="line"><span class="comment">//2.通过反射调用运行时类指定的成员变量</span></span><br><span class="line">Field f1 = clazz.getField(<span class="string">"name"</span>);<span class="comment">//调用public变量</span></span><br><span class="line">f1.set(p, <span class="string">"LiuDehua"</span>);</span><br><span class="line">Field f2 = clazz.getDeclaredField(<span class="string">"age"</span>);<span class="comment">//调用private变量</span></span><br><span class="line">f2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">f2.set(p, <span class="number">21</span>);</span><br><span class="line">System.out.println(p);</span><br><span class="line"><span class="comment">//3.反射调用运行时类指定的方法</span></span><br><span class="line">Method m1 = clazz.getMethod(<span class="string">"show"</span>);<span class="comment">//无参方法</span></span><br><span class="line">m1.invoke(p);</span><br><span class="line">Method m2 = clazz.getMethod(<span class="string">"display"</span>, String.class);<span class="comment">//带参方法</span></span><br><span class="line">m2.invoke(p, <span class="string">"CHINA"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我是一个人"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(String nation)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我的国籍是:"</span>+nation);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></p><h1 id="二-反射的源头Class类"><a href="#二-反射的源头Class类" class="headerlink" title="二.反射的源头Class类"></a>二.反射的源头Class类</h1><ul><li>源文件经过编译(javac.exe)以后, 得到一个或多个.class文件, .class文件经过运行(java.exe)这步, 就需要进行类的加载(通过JVM的类加载器), 加载到内存的缓存中. 每一个放入缓存中的.class文件就是一个Class的实例!</li><li>Class的一个对象, 对应着一个运行时类(每一个运行时类只加载一次). 相当于一个运行时类本身充当了Class的一个实例.</li><li>每一个对象, 都能通过它的getClass()方法, 得到它对应的运行时类</li><li>通过Class的实例得到一个运行时类中的完整结构(属性, 方法, 构造器, 内部类, 父类, 所在包, 异常, 注解, … )</li></ul><h2 id="1-创建Class类的对象"><a href="#1-创建Class类的对象" class="headerlink" title="1.创建Class类的对象"></a>1.创建Class类的对象</h2><ol><li>通过运行时类本身的.class属性获取</li><li>通过运行时类对象的getClass()方法获取</li><li>通过Class类的静态方法Class.forName(String path)方法</li><li>(了解)通过类加载器(ClassLoader)的对象的loadClass(String path)方法</li></ol><p>ClassLoader的应用:</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//法一:</span></span><br><span class="line">    ClassLoader loader = <span class="keyword">this</span>.getClass().getClassLoader();</span><br><span class="line">    InputStream is = loader.getResourceAsStream(<span class="string">"com\\crd\\reflection\\jdbc.properties"</span>);</span><br><span class="line">    <span class="comment">//法二:</span></span><br><span class="line"><span class="comment">//    FileInputStream is = new FileInputStream(new File("jdbc1.properties"));</span></span><br><span class="line">    Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">    pros.load(is);</span><br><span class="line">    String name = pros.getProperty(<span class="string">"user"</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    String password = pros.getProperty(<span class="string">"password"</span>);</span><br><span class="line">    System.out.println(password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="有了Class的实例后-可以做什么"><a href="#有了Class的实例后-可以做什么" class="headerlink" title="有了Class的实例后, 可以做什么?"></a>有了Class的实例后, 可以做什么?</h3><ol><li>创建对应的运行时类的对象(重点)</li><li>获取对应运行时类完整的类的结构: 属性、方法、构造器、包、父类、接口、泛型、注解、异常、内部类…</li><li>调用对应的运行时类中指定的结构(某个指定的属性、方法、构造器)(重点)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取到对应的运行时类中声明的权限为public的方法(包含其父类中的声明的public)</span></span><br><span class="line">Method[] m1 = clazz.getMethods();</span><br><span class="line"><span class="comment">//获取到对应的运行时类中声明的所有的方法(①任何权限修饰符修饰的都能获取②不含父类中的)</span></span><br><span class="line">Method[] m2 = clazz.getDeclaredMethods();</span><br><span class="line"><span class="comment">//获取其他结构调用类似方法即可</span></span><br><span class="line"><span class="comment">//获取父类的泛型(以后会用到)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line">    Type type = clazz.getGenericSuperclass();</span><br><span class="line">    ParameterizedType param = (ParameterizedType)type;</span><br><span class="line">    Type[] arr = param.getActualTypeArguments();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i ++)&#123;</span><br><span class="line">        System.out.println((Class)arr[i]);<span class="comment">//父类的泛型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font style="color:red;font-size:1.2em;font-weight:bold;">注意: 调用getDeclaredXxx()方法后, 建议要调用一下, setAccessible(true);</font><h2 id="2-创建运行时类的对象"><a href="#2-创建运行时类的对象" class="headerlink" title="2.创建运行时类的对象"></a>2.创建运行时类的对象</h2><ul><li>使用Class实例的newInstance()方法创建, 该方法默认调用运行时类的空参构造器(该构造器需要足够的权限)</li><li>故, 创建类时建议创建一个空参的构造器</li><li>也能用指定的构造器创建运行时类的对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line">    Constructor cons = clazz.getDeclaredConstructor(String.class,<span class="keyword">int</span>.class);<span class="comment">//指定构造器</span></span><br><span class="line">    cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Person p = (Person)cons.newInstance(<span class="string">"Tom"</span>,<span class="number">10</span>);</span><br><span class="line">    System.out.println(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三-动态代理"><a href="#三-动态代理" class="headerlink" title="三.动态代理"></a>三.动态代理</h1><ul><li>代理设计模式的原理: 使用一个代理将对象包装起来, 然后用该代理对象取代原始对象. 任何对原始对象的调用都要通过代理. 代理对象决定是否以及何时将方法调用转到原始对象上</li><li>之前提到过静态代理, 特征是代理类和被代理类都是在编译期间确定下来, 不利于程序的扩展. 同时, 每一个代理类只能为一个接口服务, 这样一来程序开发中必然产生过多的代理.</li><li>最好可以通过一个代理类完成全部的代理功能</li></ul><p>静态代理: 要求被代理类和代理类同时实现相应的一套接口; 通过代理类的对象调用重写接口的方法时, 实际上执行的是被代理类的同样的方法的调用.</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ClothFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">productCloth</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NikeClothFactory</span> <span class="keyword">implements</span> <span class="title">ClothFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">productCloth</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Nike工厂生产衣服"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">implements</span> <span class="title">ClothFactory</span></span>&#123;</span><br><span class="line">    ClothFactory cf;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(ClothFactory cf)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cf = cf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">productCloth</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"代理类开始代理"</span>);</span><br><span class="line">        cf.productCloth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        NikeClothFactory nike = <span class="keyword">new</span> NikeClothFactory();<span class="comment">//创建被代理类</span></span><br><span class="line">        ProxyFactory proxy = <span class="keyword">new</span> ProxyFactory(nike);<span class="comment">//创建代理类</span></span><br><span class="line">        proxy.productCloth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>动态代理: 在程序运行时, 根据被代理类及其实现的接口, 动态的创建一个代理类. 当调用代理类的实现的抽象方法时, 就发起对被代理类同样方法的调用.</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态代理的使用, 反射是动态语言的关键</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我是被代理类, 记得要执行我哦!么么~~"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">Object obj;<span class="comment">//实现了接口的被代理类的对象的声明</span></span><br><span class="line"><span class="comment">//①给被代理的对象实例化②返回一个代理类的对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">blind</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.obj = obj;</span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj</span><br><span class="line">.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当通过代理类的对象发起对被重写的方法的调用时, 都会转换为对如下的invoke方法的调用</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">//method方法的返回值时returnVal</span></span><br><span class="line">Object returnVal = method.invoke(obj, args);</span><br><span class="line"><span class="keyword">return</span> returnVal;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProxy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.被代理类的对象</span></span><br><span class="line">RealSubject real = <span class="keyword">new</span> RealSubject();</span><br><span class="line"><span class="comment">//2.创建一个实现了InvacationHandler接口的类的对象</span></span><br><span class="line">MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line"><span class="comment">//3.调用blind()方法，动态的返回一个同样实现了real所在类实现的接口Subject的代理类的对象。</span></span><br><span class="line">Object obj = handler.blind(real);</span><br><span class="line">Subject sub = (Subject)obj;<span class="comment">//此时sub就是代理类的对象</span></span><br><span class="line">sub.action();<span class="comment">//转到对InvacationHandler接口的实现类的invoke()方法的调用</span></span><br><span class="line"><span class="comment">//再举一例</span></span><br><span class="line">NikeClothFactory nike = <span class="keyword">new</span> NikeClothFactory();</span><br><span class="line">ClothFactory proxyCloth = (ClothFactory)handler.blind(nike);<span class="comment">//proxyCloth即为代理类的对象</span></span><br><span class="line">proxyCloth.productCloth();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="1-动态代理与AOP"><a href="#1-动态代理与AOP" class="headerlink" title="1.动态代理与AOP"></a>1.动态代理与AOP</h2><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">implements</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我是超人！我怕谁！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"I believe I can fly!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HumanUtil</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"=======方法一======="</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"=======方法二======="</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">Object obj;<span class="comment">// 被代理类对象的声明</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObject</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.obj = obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">HumanUtil h = <span class="keyword">new</span> HumanUtil();</span><br><span class="line">h.method1();</span><br><span class="line">Object returnVal = method.invoke(obj, args);</span><br><span class="line">h.method2();</span><br><span class="line"><span class="keyword">return</span> returnVal;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyProxy</span> </span>&#123;</span><br><span class="line"><span class="comment">// 动态的创建一个代理类的对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxyInstance</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line">handler.setObject(obj);</span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj</span><br><span class="line">.getClass().getInterfaces(), handler);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAOP</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SuperMan man = <span class="keyword">new</span> SuperMan();<span class="comment">//创建一个被代理类的对象</span></span><br><span class="line">Object obj = MyProxy.getProxyInstance(man);<span class="comment">//返回一个代理类的对象</span></span><br><span class="line">Human hu = (Human)obj;</span><br><span class="line">hu.info();<span class="comment">//通过代理类的对象调用重写的抽象方法</span></span><br><span class="line">System.out.println();</span><br><span class="line">hu.fly();</span><br><span class="line"><span class="comment">//*********</span></span><br><span class="line">NikeClothFactory nike = <span class="keyword">new</span> NikeClothFactory();</span><br><span class="line">Object obj1 = MyProxy.getProxyInstance(nike);</span><br><span class="line">ClothFactory cloth = (ClothFactory)obj1;</span><br><span class="line">cloth.productCloth();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaClass</title>
      <link href="/blog/JavaClass.html"/>
      <url>/blog/JavaClass.html</url>
      
        <content type="html"><![CDATA[<font style="font-size:1.2em;font-weight:bold;">Java常用类</font><a id="more"></a><ul><li>String StringBuffer StringBuilder</li><li>System Date SimpleDateFormate Calendar</li><li>Math BigInteger BigDecimal </li></ul><h1 id="一-字符串"><a href="#一-字符串" class="headerlink" title="一.字符串"></a>一.字符串</h1><p>String: 代表不可变的字符序列. 底层使用char[]存放. String 是final的.</p><p>StringBuffer: 代表可变序列的字符序列, 可以对字符串内容修改. 底层也是char[]存放</p><h2 id="1-String内存解析"><a href="#1-String内存解析" class="headerlink" title="1.String内存解析"></a>1.String内存解析</h2><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    String str1 = <span class="string">"JavaEE"</span>;</span><br><span class="line">    String str2 = <span class="string">"JavaEE"</span>;</span><br><span class="line">    String str3 = <span class="keyword">new</span> String(<span class="string">"JavaEE"</span>);</span><br><span class="line">    String str4 = <span class="string">"JavaEE"</span> + <span class="string">"Android"</span>;</span><br><span class="line">    String str5 = <span class="string">"Android"</span>;</span><br><span class="line">    String str6 = str1 + str5;</span><br><span class="line">    str5 = str5 + <span class="string">"Handoop"</span>;</span><br><span class="line">    String str7 = str6.intern();</span><br><span class="line">    String str8 = <span class="string">"JavaEEAndroid"</span>;</span><br><span class="line">    System.out.println(str1 == str2);<span class="comment">//true</span></span><br><span class="line">    System.out.println(str1 == str3);<span class="comment">//false</span></span><br><span class="line">    System.out.println(str1.equals(str3));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    System.out.println(str4 == str6);<span class="comment">//false</span></span><br><span class="line">    System.out.println(str4.equals(str6));<span class="comment">//true</span></span><br><span class="line">    System.out.println(str7 == str4);<span class="comment">//true</span></span><br><span class="line">    System.out.println(str4 == str8);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="string">"AA"</span>);</span><br><span class="line">    Person p2 = <span class="keyword">new</span> Person(<span class="string">"AA"</span>);</span><br><span class="line">    System.out.println(<span class="string">"^_^"</span>+ (p1.name == p2.name));<span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p><img src="imgs\Java\String内存.png" alt="String内存"></p><h2 id="2-String常用方法"><a href="#2-String常用方法" class="headerlink" title="2.String常用方法"></a>2.String常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String s ,<span class="keyword">int</span> startpoint)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(String s ,<span class="keyword">int</span> startpoint)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String suffix)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">regionMatches</span><span class="params">(<span class="keyword">int</span> firstStart,String other,<span class="keyword">int</span> otherStart ,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> startpoint)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span><span class="params">(<span class="keyword">char</span> oldChar,<span class="keyword">char</span> newChar)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceAll</span><span class="params">(String oldStr,String newStr)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">trim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">concat</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String[] <span class="title">split</span><span class="params">(String regex)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span>[] <span class="title">toCharArray</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String str)</span></span></span><br></pre></td></tr></table></figure><h2 id="3-String与其他类型间的转换"><a href="#3-String与其他类型间的转换" class="headerlink" title="3.String与其他类型间的转换"></a>3.String与其他类型间的转换</h2><ol><li>String、基本数据类型、包装类之间的转换</li></ol><ul><li>①String —&gt; 基本数据类型、包装类: 调用相应包装类的parseXxx(String str)方法</li><li>②基本数据类型、包装类 —&gt; String: 调用字符串重载的valueOf()方法</li></ul><ol start="2"><li>String与byte[]之间的转换</li></ol><ul><li>①String —&gt; byte[]: 调用字符串的getBytes()方法</li><li>②byte[] —&gt; String: 调用字符串的构造器</li></ul><ol start="3"><li>String与char[]之间的转换</li></ol><ul><li>①String —&gt; char[]: 调用字符串的toCharArray()方法</li><li>②char[] —&gt; String: 调用字符串的构造器</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.String、基本数据类型、包装类</span></span><br><span class="line">    String str1 = <span class="string">"123"</span>;</span><br><span class="line">    <span class="keyword">int</span> i = Integer.parseInt(str1);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    </span><br><span class="line">    String str2 = i + <span class="string">""</span>;</span><br><span class="line">    str2 = String.valueOf(i);</span><br><span class="line">    System.out.println(str2);</span><br><span class="line">    <span class="comment">//2.String与byte[]之间的转换</span></span><br><span class="line">    String str3 = <span class="string">"abcdefg"</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] b = str.getBytes();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; b.length; j++)&#123;</span><br><span class="line">        System.out.println((<span class="keyword">char</span>)b[j]);<span class="comment">//不能正确打印出汉字</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    String str4 = <span class="keyword">new</span> String(b);</span><br><span class="line">    System.out.println(str4);</span><br><span class="line">    <span class="comment">//3.String与char[]之间的转换</span></span><br><span class="line">    String str5 = <span class="string">"love中国"</span>;</span><br><span class="line">    <span class="keyword">char</span>[] c = str5.toCharArray();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; c.length; c++)&#123;</span><br><span class="line">        System.out.println(c[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    String str6 = <span class="keyword">new</span> String(c);</span><br><span class="line">    System.out.println(str6);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="4-StringBuffer类"><a href="#4-StringBuffer类" class="headerlink" title="4.StringBuffer类"></a><font style="color:black;">4.StringBuffer类</font></h2><p>StringBuffer(相当于一个容器)类有三个构造方法:</p><ol><li>StringBuffer()初始容量为16的字符串缓冲区</li><li>StringBuffer(int size)构造指定容量的字符串缓冲区</li><li>StringBuffer(String str)将内容初始化为指定字符串内容    </li></ol><h2 id="5-StringBuffer常用方法"><a href="#5-StringBuffer常用方法" class="headerlink" title="5.StringBuffer常用方法"></a>5.StringBuffer常用方法</h2><p>StringBuffer很多方法与String相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">StringBuffer <span class="title">append</span><span class="params">(String s)</span><span class="comment">//参数可以为:int n、Object o、char n、long n、boolean n</span></span></span><br><span class="line"><span class="function">StringBuffer <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, String str)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">reverse</span><span class="params">()</span><span class="comment">//调用此方法的StringBuffer也会反转</span></span></span><br><span class="line"><span class="function">StringBuffer <span class="title">delete</span><span class="params">(<span class="keyword">int</span> startIndex, <span class="keyword">int</span> endIndex)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCharAt</span><span class="params">(<span class="keyword">int</span> n ,<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function">StringBuffer <span class="title">replace</span><span class="params">( <span class="keyword">int</span> startIndex ,<span class="keyword">int</span> endIndex, String str)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h2 id="6-StringBuilder类"><a href="#6-StringBuilder类" class="headerlink" title="6.StringBuilder类"></a>6.StringBuilder类</h2><p>也是可变的字符序列,而且方法也一样,  JDK5.0后加的, 线程不安全, 但效率高于StringBuffer</p><font style="color:red;font-size:1.5em;font-weight:bold;">使用String的一个弊端</font><blockquote><p> string s=”a”; //创建了一个字符串<br> s=s+”b”; //实际上原来的”a”字符串对象已经丢弃了, 现在又产生了一个字符串s+”b”(也就是”ab”).如果多次执行这些改变串内容的操作, 会导致大量副本字符串对象存留在内存中, 降低效率. 如果这样的操作放到循环中, 会极大影响程序的性能.</p></blockquote><h2 id="7-String、StringBuffer、StringBuilder性能比较"><a href="#7-String、StringBuffer、StringBuilder性能比较" class="headerlink" title="7.String、StringBuffer、StringBuilder性能比较"></a>7.String、StringBuffer、StringBuilder性能比较</h2><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">String text = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">long</span> startTime = <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">long</span> endTime = <span class="number">0L</span>;</span><br><span class="line">    StringBuffer buffer = <span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</span><br><span class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</span><br><span class="line">    startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">20000</span>;i++)&#123;</span><br><span class="line">    buffer.append(String.valueOf(i));</span><br><span class="line">    &#125;</span><br><span class="line">    endTime = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"StringBuffer的执行时间："</span>+(endTime-startTime));</span><br><span class="line">    </span><br><span class="line">    startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">20000</span>;i++)&#123;</span><br><span class="line">    builder.append(String.valueOf(i));</span><br><span class="line">    &#125;</span><br><span class="line">    endTime = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"StringBuilder的执行时间："</span>+(endTime-startTime));</span><br><span class="line">    </span><br><span class="line">    startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">20000</span>;i++)&#123;</span><br><span class="line">    text = text + i;</span><br><span class="line">    &#125;</span><br><span class="line">    endTime = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">"String的执行时间："</span>+(endTime-startTime));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="二-时间相关类"><a href="#二-时间相关类" class="headerlink" title="二.时间相关类"></a>二.时间相关类</h1><h2 id="1-System类"><a href="#1-System类" class="headerlink" title="1.System类"></a>1.System类</h2><p>currentTimeMillis(): 返回当前时间的long型值. 此long值是从1970年1月1日0点0分00秒开始到当前的毫秒数.此方法常用来计算时间差</p><p>计算世界时间的主要标准:</p><ul><li>UTC(Universal Time Coordinated)</li><li>GMT(Greenwich Mean Time)—格林威治时间</li><li>CST(Central Standard Time)—标准时间(四个国家)</li></ul><h2 id="2-Date类"><a href="#2-Date类" class="headerlink" title="2.Date类"></a>2.Date类</h2><p>有两个: java.util.Date类及它的子类 java.sql.Date<br>表示特定的瞬间, 精确到毫秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDate</span><span class="params">()</span></span>&#123;</span><br><span class="line">Date date = <span class="keyword">new</span> Date();<span class="comment">//两个构造方法, 无参和long型参数</span></span><br><span class="line">System.out.println(date);</span><br><span class="line">System.out.println(System.currentTimeMillis());</span><br><span class="line">System.out.println(date.getTime());</span><br><span class="line">System.out.println(date.toString());</span><br><span class="line">    </span><br><span class="line">    java.sql.Date d = <span class="keyword">new</span> java.sql.Date(date.getTime());</span><br><span class="line">    System.out.println(d);<span class="comment">//格式:year-month-day</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Date类的API不易于国际化, 大部分方法被废弃了, java.text.SimpleDateFormat类是一个不与语言环境有关的方式来格式化和解析日期的具体类.</p><h2 id="3-SimpleDateFormat类"><a href="#3-SimpleDateFormat类" class="headerlink" title="3.SimpleDateFormat类"></a>3.SimpleDateFormat类</h2><ul><li>格式化: 日期 —&gt; 文本 使用SimpleDateFormat 的format()方法    </li><li>解析: 文本 —&gt; 日期 使用SimpleDateFormat的parse()方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.默认模式格式化</span></span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line">    String date = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">    System.out.println(date);<span class="comment">//19-3-26 下午4:50</span></span><br><span class="line">    <span class="comment">//2.自定义模式格式化</span></span><br><span class="line">    SimpleDateFormat sdf1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"EEE, d MMM yyyy HH:mm:ss Z"</span>);</span><br><span class="line">    date = sdf1.format(<span class="keyword">new</span> Date());</span><br><span class="line">    System.out.println(date);<span class="comment">//星期二, 26 三月 2019 16:55:16 +0800</span></span><br><span class="line">    <span class="comment">//3.解析:</span></span><br><span class="line">    Date date1 = sdf.parse(<span class="string">"19-3-26 下午4:50"</span>);<span class="comment">//要和构造器的格式字符串对应</span></span><br><span class="line">    System.out.println(date1);</span><br><span class="line">    date1 = sdf1.parse(<span class="string">"星期二, 26 三月 2019 16:55:16 +0800"</span>);</span><br><span class="line"><span class="comment">//    date1 = sdf1.parse("19-3-26 下午4:50");//出异常</span></span><br><span class="line">    System.out.println(date1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Calendar类"><a href="#4-Calendar类" class="headerlink" title="4.Calendar类"></a>4.Calendar类</h2><p>Calendar是一个抽象基类, 主用用于完成日期字段之间相互操作的功能.</p><p>使用Calendar.getInstance()方法得到一个Calendar的实例, 一个Calendar的实例是系统时间的抽象表示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常用方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> field)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> field,<span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> field,<span class="keyword">int</span> amount)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Date <span class="title">getTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(Date date)</span></span></span><br></pre></td></tr></table></figure><h1 id="三-计算相关类"><a href="#三-计算相关类" class="headerlink" title="三.计算相关类"></a>三.计算相关类</h1><h2 id="1-Math类"><a href="#1-Math类" class="headerlink" title="1.Math类"></a>1.Math类</h2><p>java.lang.Math提供了一系列静态方法用于科学计算; 其方法的参数和返回值类型一般为double型.</p><blockquote><p>abs     绝对值<br>acos,asin,atan,cos,sin,tan  三角函数<br>sqrt     平方根<br>pow(double a,doble b)     a的b次幂<br>log    自然对数<br>exp    e为底指数<br>max(double a,double b)<br>min(double a,double b)<br>random()      返回0.0到1.0的随机数<br>long round(double a)     double型数据a转换为long型（四舍五入）<br>toDegrees(double angrad)     弧度—&gt;角度<br>toRadians(double angdeg)     角度—&gt;弧度</p></blockquote><h2 id="2-BigInteger类"><a href="#2-BigInteger类" class="headerlink" title="2.BigInteger类"></a>2.BigInteger类</h2><p>Integer类作为int的包装类. 能存储的最大整型值为2^31−1, BigInteger类的数字范围较Integer类的数字范围要大得多, 可以支持任意精度的整数.</p><blockquote><p>构造器<br>BigInteger(String val)<br>常用方法<br>public BigInteger abs()<br>public BigInteger add(BigInteger val)<br>public BigInteger subtract(BigInteger val)<br>public BigInteger multiply(BigInteger val)<br>public BigInteger divide(BigInteger val)<br>public BigInteger remainder(BigInteger val)<br>public BigInteger pow(int exponent)<br>public BigInteger[] divideAndRemainder(BigInteger val)</p></blockquote><h2 id="3-BigDecimal类"><a href="#3-BigDecimal类" class="headerlink" title="3.BigDecimal类"></a>3.BigDecimal类</h2><p>一般的Float类和Double类可以用来做科学计算或工程计算, 但在商业计算中, 要求数字精度比较高, 故用到java.math.BigDecimal类. BigDecimal类支持任何精度的定点数.</p><blockquote><p>构造器<br>public BigDecimal(double val)<br>public BigDecimal(String val)<br>常用方法<br>public BigDecimal add(BigDecimal augend)<br>public BigDecimal subtract(BigDecimal subtrahend)<br>public BigDecimal multiply(BigDecimal multiplicand)<br>public BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thread</title>
      <link href="/blog/JaveSE-Thread.html"/>
      <url>/blog/JaveSE-Thread.html</url>
      
        <content type="html"><![CDATA[<p><strong>Java多线程</strong></p><a id="more"></a><h1 id="一-基本概念"><a href="#一-基本概念" class="headerlink" title="一.基本概念"></a>一.基本概念</h1><ol><li>程序、进程、线程</li></ol><ul><li>程序(program)可以理解为静态的代码</li><li>进程(process)可以理解为执行中的程序</li><li>线程(thread)可以理解为进程的进一步细分, 程序的一条执行路径</li></ul><ol start="2"><li>何时需要多线程</li></ol><ul><li>程序需要同时执行两个或多个任务</li><li>程序需要实现一些等待的任务时, 如: 用户输入、文件读写、网络操作顿、搜索等</li><li>需要一些后台运行的任务时</li></ul><h1 id="二-创建多线程"><a href="#二-创建多线程" class="headerlink" title="二.创建多线程"></a>二.创建多线程</h1><p>通过java.lang.Thread类实现</p><h2 id="方式一-继承Thread类"><a href="#方式一-继承Thread类" class="headerlink" title="方式一:继承Thread类"></a>方式一:继承Thread类</h2><ol><li>继承Thread类,并重写run()方法,run()方法内实现此子线程想要实现的功能</li><li>在主线程内, 创建一个子线程的对象.</li><li>调用子线程的start()方法, 启动此线程; 调用相应线程的run()方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintNum</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//子线程要执行的代码</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PrintNum</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">PrintNum p1 = <span class="keyword">new</span> PrintNum(<span class="string">"线程1"</span>);</span><br><span class="line">PrintNum p2 = <span class="keyword">new</span> PrintNum(<span class="string">"线程2"</span>);</span><br><span class="line">p1.setPriority(Thread.MAX_PRIORITY);<span class="comment">//10</span></span><br><span class="line">p2.setPriority(Thread.MIN_PRIORITY);<span class="comment">//1</span></span><br><span class="line">p1.start();<span class="comment">//start()会调用run()方法</span></span><br><span class="line">p2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意: ①一个线程只能start()一次; ②不能用run()启动线程</p><p>Thread类的常用方法:</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Thread类的常用方法:</span></span><br><span class="line"><span class="comment"> * 1.start():启动线程并调用相应的run()方法</span></span><br><span class="line"><span class="comment"> * 2.run():子线程要执行的代码</span></span><br><span class="line"><span class="comment"> * 3.currentThread():静态方法, 调取当前线程</span></span><br><span class="line"><span class="comment"> * 4.getName():获取此线程的名字</span></span><br><span class="line"><span class="comment"> * 5.setName():设置此线程的名字</span></span><br><span class="line"><span class="comment"> * 6.yield():调用此方法的线程强制释放当前CPU的执行权</span></span><br><span class="line"><span class="comment"> * 7.join():在A线程中调用B线程的join()方法.表示当A线程执行到此方法时,停止</span></span><br><span class="line"><span class="comment"> * 执行A线程,直到B线程执行完毕,A线程再接着B.join()之后的代码执行</span></span><br><span class="line"><span class="comment"> * 8.isAlive()判断此线程是否存活</span></span><br><span class="line"><span class="comment"> * 9.sleep(long time)显示的让当前线程睡眠time毫秒</span></span><br><span class="line"><span class="comment"> * 10.线程通信有关的: wait() notify() notifyAll()//在Object类中</span></span><br><span class="line"><span class="comment"> * 设置线程的优先级MAX_PRIORITY=10;NORM_PRIORITY=5;MIN_PRIORITY=1</span></span><br><span class="line"><span class="comment"> * 改变抢占CPU资源的概率</span></span><br><span class="line"><span class="comment"> * setPriority(int newPriority)</span></span><br><span class="line"><span class="comment"> * getPriority()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></div></div><font style="color:blue;font-size:1.5em;">例子: 三个售票窗口售卖100张票(一共100张)</font><p>继承Thread类的方式实现:</p><font style="color:red;font-weight:bold">注意: 此程序存在隐患(线程安全问题)</font><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承Thread类的方式实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&gt;<span class="number">0</span>) &#123;<span class="comment">//开启注释放大错误</span></span><br><span class="line"><span class="comment">//try &#123;</span></span><br><span class="line"><span class="comment">//Thread.currentThread().sleep(10);//阻塞10ms</span></span><br><span class="line"><span class="comment">//&#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//// TODO 自动生成的 catch 块</span></span><br><span class="line"><span class="comment">//e.printStackTrace();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">"售票, 票号为:"</span>+ticket--);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWindow</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Window w1 = <span class="keyword">new</span> Window();</span><br><span class="line">Window w2 = <span class="keyword">new</span> Window();</span><br><span class="line">Window w3 = <span class="keyword">new</span> Window();</span><br><span class="line">w1.setName(<span class="string">"窗口一:"</span>);</span><br><span class="line">w2.setName(<span class="string">"窗口二:"</span>);</span><br><span class="line">w3.setName(<span class="string">"窗口三:"</span>);</span><br><span class="line">w1.start();</span><br><span class="line">w2.start();</span><br><span class="line">w3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="方式二-实现Runnable接口"><a href="#方式二-实现Runnable接口" class="headerlink" title="方式二:实现Runnable接口"></a>方式二:实现Runnable接口</h2><ol><li>创建一个实现Runnable接口的类</li><li>实现接口的抽象run()方法</li><li>创建一个实现Runnable接口实现类的对象</li><li>将此对象作为形参传给Thread类的构造器, 创建Thread类的对象, 此对象即为一个线程</li><li>调用start()启动线程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建一个实现Runnable接口的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//2.实现接口的抽象run()方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//子线程执行的代码</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//3.创建一个实现Runnable接口实现类的对象</span></span><br><span class="line">SubThread s = <span class="keyword">new</span> SubThread();</span><br><span class="line">        <span class="comment">//想要启动一个线程必须调用start()方法</span></span><br><span class="line">        <span class="comment">//4.将此对象作为形参传给Thread类的构造器, 创建Thread类的对象, 此对象即为一个线程</span></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(s);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(s);</span><br><span class="line">        <span class="comment">//5.调用start()启动线程</span></span><br><span class="line">t1.setName(<span class="string">"线程1"</span>);</span><br><span class="line">t2.setName(<span class="string">"线程2"</span>);</span><br><span class="line">t1.start();<span class="comment">//启动线程: 执行Thread对象生成时构造器形参的run()方法.</span></span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种方式的对比: 联系：class Thread implements Runnable, 两种方式实际上都与Runnable接口发生了关系</p><h3 id="哪个比较好"><a href="#哪个比较好" class="headerlink" title="哪个比较好?"></a>哪个比较好?</h3><ul><li>实现的方式(方式二)较好: </li><li>①解决了单继承的局限性</li><li><font style="color:red;font-weight:bold;">②如果多个线程有共享数据的话, 建议使用实现方式, 同时, 共享数据所在的类可以作为Runnable接口的实现类.</font></li></ul><p>实现Runnable接口的方式实现(上述售票例题):</p><font style="color:red;font-weight:bold">注意: 此程序存在隐患(线程安全问题)</font><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有共享数据的问题(一共100张票)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&gt;<span class="number">0</span>) &#123;<span class="comment">//开启注释放大错误</span></span><br><span class="line"><span class="comment">//try &#123;</span></span><br><span class="line"><span class="comment">//Thread.currentThread().sleep(10);//阻塞10ms</span></span><br><span class="line"><span class="comment">//&#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//// TODO 自动生成的 catch 块</span></span><br><span class="line"><span class="comment">//e.printStackTrace();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">"售票, 票号为:"</span>+ticket--);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Window1 w = <span class="keyword">new</span> Window1();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        </span><br><span class="line">t1.setName(<span class="string">"窗口1"</span>);</span><br><span class="line">t2.setName(<span class="string">"窗口2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"窗口3"</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="三-Java的多线程"><a href="#三-Java的多线程" class="headerlink" title="三.Java的多线程"></a>三.Java的多线程</h1><h2 id="1-多线程的优点"><a href="#1-多线程的优点" class="headerlink" title="1.多线程的优点"></a>1.多线程的优点</h2><ul><li>提高应用程序的响应</li><li>提高计算机系统的CPU利用率</li><li>改善程序接口</li></ul><h2 id="2-Java线程的分类"><a href="#2-Java线程的分类" class="headerlink" title="2.Java线程的分类"></a>2.Java线程的分类</h2><ul><li>守护线程VS用户线程</li><li>若JVM中都是守护线程, 当前JVM将退出</li></ul><h2 id="3-线程的生命周期"><a href="#3-线程的生命周期" class="headerlink" title="3.线程的生命周期"></a>3.线程的生命周期</h2><p>新建、就绪、运行、阻塞、死亡</p><p><img src="imgs\Java\线程的生命周期.png" alt="线程的生命周期"></p><h1 id="四-线程同步"><a href="#四-线程同步" class="headerlink" title="四.线程同步"></a>四.线程同步</h1><p>上述售票的例子:</p><p>程序存在线程安全问题: 打印车票时, 会出现重票、错票</p><ol><li>线程安全问题存在的原因?</li></ol><p>由于一个线程在操作共享数据的过程中, 未执行完的情况下, 另外一个线程参与进来, 导致共享数据存在了安全问题.</p><ol start="2"><li>如何解决该问题?</li></ol><p>必须让一个线程操作共享数据完毕以后, 其他线程才有机会进入参与共享数据的操作.</p><ol start="3"><li>Java如何实现线程的安全: 线程的同步机制</li></ol><h2 id="方式一-同步代码块"><a href="#方式一-同步代码块" class="headerlink" title="方式一: 同步代码块:"></a>方式一: 同步代码块:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步监视器)&#123;</span><br><span class="line"><span class="comment">//操作共享数据的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①同步监视器: 俗称锁, 任何一个类的对象都可以才充当锁. 要想保证线程的安全, 必须要求所有的线程共用同一把锁!<br>②共享数据: 多个线程需要共同操作的变量. 明确哪部分是操作共享数据的代码.</p><p>③使用实现Runnable接口的方式创建多线程的话, 同步代码块中的锁, 可以考虑是this. 如果使用继承Thread类的方式, <strong>慎用this!</strong></p><p>修改原来的售票代码:</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有共享数据的问题(一共100张票)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;<span class="comment">//同步锁可以由任何对象充当, 但是同步的线程要共用一把锁</span></span><br><span class="line">                <span class="comment">//this表示当前对象, 本程序中为w对象, this可以改为obj</span></span><br><span class="line">                <span class="comment">//具体问题具体分析, 有时候不能用this ,用继承Thread方式实现的多线程不能用this</span></span><br><span class="line"><span class="keyword">if</span>(ticket&gt;<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">"售票, 票号为:"</span>+ticket--);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Window1 w = <span class="keyword">new</span> Window1();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">t1.setName(<span class="string">"窗口1"</span>);</span><br><span class="line">t2.setName(<span class="string">"窗口2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"窗口3"</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="方式二-同步方法"><a href="#方式二-同步方法" class="headerlink" title="方式二: 同步方法:"></a>方式二: 同步方法:</h2><ul><li>将需要共享的数据的操作放到一个方法里, 并给该方法添加 synchronized 修饰</li><li>同步方法也有锁, 即为当前对象 this</li><li><font style="color:red;font-weight:bold;">如果使用在继承的方式实现多线程的话, 慎用同步方法!因为它们的this锁不一样</font></li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个类是用实现Runnable接口实现的多线程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&gt;<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">"售票, 票号为:"</span>+ticket--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="懒汉式单例模式的线程安全"><a href="#懒汉式单例模式的线程安全" class="headerlink" title="懒汉式单例模式的线程安全"></a>懒汉式单例模式的线程安全</h2><ul><li>使用线程同步机制解决问题</li><li>对于一般的方法内, 使用同步代码块的方式, 可以考虑用this当锁</li><li>对于静态方法而言, 使用当前类本身充当锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//懒汉式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;<span class="comment">//提高效率</span></span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class)&#123;<span class="comment">//后面会说, Singleton.class对象</span></span><br><span class="line">            <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font style="color:red;font-size:1.5em;">线程同步的弊端: 由于同一时间只能有一个线程访问共享数据, 效率变低了</font><h2 id="何时释放锁"><a href="#何时释放锁" class="headerlink" title="何时释放锁?"></a>何时释放锁?</h2><ol><li>当前线程的同步方法、同步代码块执行结束时</li><li>当前线程的同步方法、同步代码块中出现了未处理的Error或Exception, 导致异常结束</li><li>当前线程的同步方法、同步代码块中执行了线程对象的wait()方法, 当前线程暂停并释放锁</li></ol><h2 id="线程的死锁"><a href="#线程的死锁" class="headerlink" title="线程的死锁:"></a>线程的死锁:</h2><p>不同的线程分别占用对方需要的同步资源不放弃, 都在等待对方放弃自己需要的同步资源, 就形成了线程的死锁.<br>死锁是我们在使用同步时, 需要避免的问题!</p><h1 id="线程的通信"><a href="#线程的通信" class="headerlink" title="线程的通信"></a>线程的通信</h1><p>涉及到三个方法 wait() notify() notifyAll() 在java.lang.Object类中</p><ul><li>wait(): 令当前线程挂起, 放弃CPU、同步资源……</li><li>notify(): 唤醒正在排队等待同步资源的线程中优先级最高的线程</li><li>notifyAll(): 唤醒正在排队等待同步资源的所有线程</li></ul><p>注意: <font style="color:red;font-weight:bold;">这三个方法只能在同步方法或同步代码块中使用, 否则会报异常</font></p><p>例, 用两个线程交替打印1-100:</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintNum</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">notify();</span><br><span class="line"><span class="keyword">if</span>(num&lt;<span class="number">100</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + num);</span><br><span class="line">num++;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCommunication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">PrintNum p = <span class="keyword">new</span> PrintNum();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(p);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(p);</span><br><span class="line">t1.setName(<span class="string">"甲"</span>);</span><br><span class="line">t2.setName(<span class="string">"乙"</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="经典例题-生产者-消费者问题"><a href="#经典例题-生产者-消费者问题" class="headerlink" title="经典例题: 生产者/消费者问题"></a>经典例题: 生产者/消费者问题</h2><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处取走产品，</span></span><br><span class="line"><span class="comment"> * 店员一次只能持有固定数量的产品(比如:20），如果生产者试图生产更多的产品，店员会叫</span></span><br><span class="line"><span class="comment"> * 生产者停一下，如果店中有空位放产品了再通知生产者继续生产；如果店中没有产品了，店员</span></span><br><span class="line"><span class="comment"> * 会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">Clerk clerk;</span><br><span class="line">Producer(Clerk clerk) &#123;</span><br><span class="line"><span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"生产者开始生产产品"</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.currentThread().sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">clerk.addProduct();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">Clerk clerk;</span><br><span class="line">Consumer(Clerk clerk) &#123;</span><br><span class="line"><span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"消费者开始消费产品"</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.currentThread().sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">clerk.subProduct();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clerk</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> product;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (product &gt;= <span class="number">20</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">product++;</span><br><span class="line">notifyAll();</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">"生产了第"</span> + <span class="keyword">this</span>.product + <span class="string">"个产品"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">subProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (product &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">"消费了第"</span> + <span class="keyword">this</span>.product + <span class="string">"个产品"</span>);</span><br><span class="line">product--;</span><br><span class="line">notifyAll();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Clerk clerk = <span class="keyword">new</span> Clerk();</span><br><span class="line">Producer p1 = <span class="keyword">new</span> Producer(clerk);</span><br><span class="line">Consumer c1 = <span class="keyword">new</span> Consumer(clerk);</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(c1);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(p1);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(p1);</span><br><span class="line">t1.setName(<span class="string">"消费者1"</span>);</span><br><span class="line">t2.setName(<span class="string">"生产者1"</span>);</span><br><span class="line">t3.setName(<span class="string">"生产者2"</span>);</span><br><span class="line">t2.start();</span><br><span class="line">t1.start();</span><br><span class="line">t3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象总结</title>
      <link href="/blog/JavaSEOOP.html"/>
      <url>/blog/JavaSEOOP.html</url>
      
        <content type="html"><![CDATA[<p>面向对象的三条主线:<br>1.类及类的成分<br>2.面向对象的三大特性<br>3.其他的关键字: this super import package abstract static final interface等</p><a id="more"></a><h1 id="一-专注类的设计"><a href="#一-专注类的设计" class="headerlink" title="一.专注类的设计"></a>一.专注类的设计</h1><p>类从代码的角度: 并列关系! 从执行、设计的角度: 关联关系、继承关系、聚合关系</p><h2 id="1-类的成分"><a href="#1-类的成分" class="headerlink" title="1.类的成分"></a>1.类的成分</h2><p>属性 方法 构造器 代码块 内部类</p><ol><li><h3 id="属性"><a href="#属性" class="headerlink" title="属性:"></a>属性:</h3><ul><li>①变量的分类: 成员变量(属性 Field) vs 局部变量(方法的形参、方法内部、代码块内部)<br>基本数据类型(8种, 不同的数据类型对应不同的默认初始化值) vs 引用数据类型(数组、类、接口默认初始化值为null)</li><li>②属性的声明格式: 修饰符  数据类型  变量名 = 初始化值; //java是强数据类型的语言</li><li>③对属性的赋值的操作: A.默认初始化 B.显式的初始化 C.代码块的初始化 D.构造器的初始化 E.调用方法、属性进行赋值</li></ul></li><li><h3 id="方法"><a href="#方法" class="headerlink" title="方法:"></a>方法:</h3><ul><li>①格式: 修饰符 (其它的关键字: static/final/abstract)返回值类型 方法名 (形参列表){//方法体 }</li><li>②方法的重载(overload) vs 方法的重写(override overwrite)</li><li>③方法的参数传递机制: 值传递</li></ul></li><li><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器:"></a>构造器:</h3><ul><li>①构造器的作用: A.创建类的对象 B.初始化对象的成员变量</li><li>②构造器也是可以重载的.</li></ul></li><li><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块:"></a>代码块:</h3><ul><li>主要作用: 用来初始化类的成员变量</li><li>分类: 静态的代码块 vs 非静态的代码块</li></ul></li><li><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类:"></a>内部类:</h3><ul><li>①分类: 成员内部类(static的成员 vs 非static的成员) vs 局部内部类(方法内部声明的类)</li><li>②掌握: A.如何创建成员内部类的对象 B.如何区分调用外部类、内部类的变量(尤其是变量重名时) C.局部内部类的使用</li></ul></li></ol><h2 id="2-类的初始化"><a href="#2-类的初始化" class="headerlink" title="2.类的初始化"></a>2.类的初始化</h2><ol><li>如何创建类的对象. 如: Person p = new Person(); Date d = new Date();</li><li>内存解析:<ul><li>栈: 局部变量、对象的引用名、数组的引用名</li><li>堆: new 出来的“东西”</li><li>方法区: (字符串常量池)</li><li>静态域: 存放类中静态的变量</li><li>理解创建的对象在内存中加载的过程</li></ul></li></ol><h1 id="二-面向对象的三大特性"><a href="#二-面向对象的三大特性" class="headerlink" title="二.面向对象的三大特性"></a>二.面向对象的三大特性</h1><h2 id="1-封装性"><a href="#1-封装性" class="headerlink" title="1.封装性"></a>1.封装性</h2><ul><li>① 通过私有化类的成员变量, 通过公共的getter和setter方法来调用和修改</li><li>② 还可以对类的其他结构进行“封装”</li><li>③ 权限修饰符: public protected 缺省 private</li></ul><h2 id="2-继承性"><a href="#2-继承性" class="headerlink" title="2.继承性"></a>2.继承性</h2><p>通过让一个类A继承另一个类B, 就可以获取类B中的结构(主要的: 属性、方法、构造器). 子类: 类A; 父类: 类B</p><p>java中的类的继承性: 单继承的</p><h2 id="3-多态性"><a href="#3-多态性" class="headerlink" title="3.多态性"></a>3.多态性</h2><ul><li>①体现: 方法的重载与重写; 子类对象的多态性 Person p = new Student();</li><li>②子类对象多态性的使用: 虚拟方法调用.</li><li>③向上转型 向下转型 Student s = (Student)p; //建议在向下转型之前: if(p instanceof Student)避免出现ClassCastException的异常</li></ul><h1 id="三-其他关键字"><a href="#三-其他关键字" class="headerlink" title="三.其他关键字"></a>三.其他关键字</h1><ol><li>this: 修饰属性、方法、构造器. 表示: 当前对象或当前正在创建的对象</li><li>super: 修饰属性、方法、构造器. 显式的调用父类的相应的结构, 尤其是子父类有重名的方法、属性</li><li>static: 修饰属性、方法、代码块、内部类. 随着类的加载而加载!</li><li>final: 修饰类、属性、方法. 表示“最终的”</li><li>abstract: 修饰类、方法</li><li>interface: 表示是一个接口, (接口是与类并列的一个结构). 类与接口之间同时“implements”发生关系.</li><li>package import ……</li></ol><font style="color:red;font-weight:bold;">abstract不能修饰属性、构造器、不能与final static private共用.</font>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象3.2</title>
      <link href="/blog/JavaSE5-2.html"/>
      <url>/blog/JavaSE5-2.html</url>
      
        <content type="html"><![CDATA[<p>abstract<br>interface<br>内部类<br><a id="more"></a></p><h1 id="一-abstract"><a href="#一-abstract" class="headerlink" title="一.abstract"></a>一.abstract</h1><p>abstract: 抽象的, 可以用来修饰类、方法</p><ol><li>abstract修饰类: 抽象类<ul><li>不可被实例化</li><li>抽象类有构造器 (凡是类都有构造器)</li><li>抽象方法所在的类, 一定是抽象类.</li><li>抽象类中可以没有抽象方法.</li></ul></li><li>abstract修饰方法: 抽象方法<ul><li>格式: 没有方法体和{}.如: public abstract void eat();</li><li>抽象方法只保留方法的功能, 而具体的执行, 交给继承抽象类的子类, 由子类重写此抽象方法.</li><li>若子类继承抽象类, 并重写了所有的抽象方法, 则此类是一个”实体类”, 即可以实例化</li><li>若子类继承抽象类, 没有重写所有的抽象方法, 意味着此类中仍有抽象方法, 则此类必须声明为抽象的!</li></ul></li></ol><font style="color:red;font-weight:bold;">abstract不能用来修饰属性、构造器、private、final、static</font><h3 id="A-模板方法设计模式"><a href="#A-模板方法设计模式" class="headerlink" title="A.模板方法设计模式"></a>A.模板方法设计模式</h3><p>功能的内部一部分实现是确定的, 一部分实现是不确定的, 可以将不确定的暴露出去让子类去实现它</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模板方法设计模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTemplate</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> SubTemplate().spendTime();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Template</span> </span>&#123;</span><br><span class="line">    <span class="comment">//此部分功能不确定: 具体要执行什么代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//此部分功能确定: 计算执行code()方法的时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">spendTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">this</span>.code();</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"花费的时间为："</span> + (end - start));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubTemplate</span> <span class="keyword">extends</span> <span class="title">Template</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= <span class="number">10000</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>;j &lt;= Math.sqrt(i);j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="二-interface"><a href="#二-interface" class="headerlink" title="二.interface"></a>二.interface</h1><p>接口(interface)是与类并行的一个概念</p><ol><li>接口可以看做是一个特殊的抽象类, 是<font style="color:red;font-weight:bold;">常量与抽象方法的一个集合</font>, 不能包含变量、一般的方法.<ul><li><font style="color:red;font-weight:bold;">常量默认有 public static final修饰, 方法默认有 public abstract修饰</font></li></ul></li><li>接口是没有构造器的.</li><li>接口定义的就是一种功能. 此功能可以被类所实现(implements).<ul><li>比如: class CC extends DD implements AA</li></ul></li><li>实现接口的类, 必须要重写其中的所有的抽象方法, 方可实例化. 若没有重写所有的抽象方法, 则此类仍为一个抽象类</li><li>一个类可以实现多个接口.—-java 中的类的继承是单继承的</li><li>接口与接口之间也是继承的关系, 而且可以实现多继承</li><li>接口与具体的实现类之间也存在多态性</li><li>面向接口编程的思想:</li></ol><h3 id="A-工厂方法的设计模式"><a href="#A-工厂方法的设计模式" class="headerlink" title="A.工厂方法的设计模式"></a>A.工厂方法的设计模式</h3><p>定义一个用户创建对象的接口, 让子类决定实例化哪一个类. 工厂方法使一个类的实例化延迟到其子类.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口的应用: 工厂方法的设计模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFactoryMethod</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">IWorkFactory i = <span class="keyword">new</span> StudentWorkFactory();</span><br><span class="line">i.getWork().doWork();</span><br><span class="line">IWorkFactory i1 = <span class="keyword">new</span> TeacherWorkFactory();</span><br><span class="line">i1.getWork().doWork();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//工厂接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IWorkFactory</span></span>&#123;</span><br><span class="line"><span class="function">Work <span class="title">getWork</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建学生工作的工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentWorkFactory</span> <span class="keyword">implements</span> <span class="title">IWorkFactory</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Work <span class="title">getWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> StudentWork();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建老师工作的工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeacherWorkFactory</span> <span class="keyword">implements</span> <span class="title">IWorkFactory</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Work <span class="title">getWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TeacherWork();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Work</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentWork</span> <span class="keyword">implements</span> <span class="title">Work</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"学生写作业"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeacherWork</span> <span class="keyword">implements</span> <span class="title">Work</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"老师批改作业"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-代理模式"><a href="#B-代理模式" class="headerlink" title="B.代理模式"></a>B.代理模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口的应用: 代理模式(静态代理), 后面会有动态代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProxy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Object obj = <span class="keyword">new</span> ProxyObject();</span><br><span class="line">obj.action();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Object</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyObject</span> <span class="keyword">implements</span> <span class="title">Object</span></span>&#123;</span><br><span class="line">Object obj;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyObject</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"代理类创建成功"</span>);</span><br><span class="line">obj = <span class="keyword">new</span> ObjctImpl();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"代理类开始执行"</span>);</span><br><span class="line">obj.action();</span><br><span class="line">System.out.println(<span class="string">"代理类执行结束"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjctImpl</span> <span class="keyword">implements</span> <span class="title">Object</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"=====被代理类开始执行======"</span>);</span><br><span class="line">System.out.println(<span class="string">"=====具体的操作======"</span>);</span><br><span class="line">System.out.println(<span class="string">"=====被代理类执行完毕======"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font style="color:red;font-weight:bold;">了解就好, 你可以将这两种设计模式当成算法记下来</font><h1 id="三-内部类"><a href="#三-内部类" class="headerlink" title="三.内部类"></a>三.内部类</h1><p>类的第5个成员: 内部类(inner class) 例: Thread类内的State枚举类</p><ol><li>相当于说, 我们可以在类的内部再定义类. 外面的类: 外部类. 定义在类内的类: 内部类</li><li>内部类的分类: <strong>成员内部类</strong>(声明在类内部且方法外的) vs <strong>局部内部类</strong>(声明在类的方法里)</li><li>成员内部类:<ul><li>是外部类的一个成员: ①可以有修饰符(4个) ②static final ③可以调用外部类的属性、方法</li><li>具体类的特点: ①abstract ②还可以在其内部定义属性、方法、构造器</li></ul></li><li>局部内部类(知道有就好)</li><li>关于内部类, 掌握三点:<ul><li>①如何创建成员内部类的对象(如: 创建Bird类和Dog类的对象)</li><li>②如何区分调用外部类、内部类的变量(尤其是变量重名时)</li><li>③局部内部类的使用</li></ul></li></ol><h3 id="A-成员内部类"><a href="#A-成员内部类" class="headerlink" title="A.成员内部类:"></a>A.成员内部类:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInnerClass</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建静态内部类的对象: 可以直接通过外部类调用静态内部类的构造器</span></span><br><span class="line">Person.Dog d = <span class="keyword">new</span> Person.Dog();<span class="comment">//区别Person.new Dog();</span></span><br><span class="line"><span class="comment">//Person.Bird b = new Person.Bird();</span></span><br><span class="line"><span class="comment">//创建非静态的内部类的对象: 必须先创建外部类的对象, 通过外部类的对象调用内部类的构造器</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Person.Bird b = p.new Bird();</span><br><span class="line">b.info();</span><br><span class="line">b.setName(<span class="string">"杜鹃"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">String name = <span class="string">"小明"</span>;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="comment">//成员内部类(非static的)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span></span>&#123;</span><br><span class="line">String name = <span class="string">"黄鹂"</span>;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Bird</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;<span class="comment">//假设传过来的参数为"杜鹃"</span></span><br><span class="line">System.out.println(name);<span class="comment">//杜鹃</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.name);<span class="comment">//黄鹂</span></span><br><span class="line">System.out.println(Person.<span class="keyword">this</span>.name);<span class="comment">//小明</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span><br><span class="line">show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员内部类(静态内部类)</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-局部内部类"><a href="#B-局部内部类" class="headerlink" title="B.局部内部类:"></a>B.局部内部类:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span></span>&#123;</span><br><span class="line"><span class="comment">//局部内部类</span></span><br><span class="line"><span class="comment">//如下的使用方式较少</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InnnerClass</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//常常使用一个方法, 使其返回值为某个类或接口的对象. 而这个类或接口在方法内部创建</span></span><br><span class="line"><span class="comment">//使用方式一</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Comparable <span class="title">getComparable</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//1.创建一个实现Comparable接口的类:局部内部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComparable</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(java.lang.Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.返回一个实现类的对象</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MyComparable();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用方式二</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Comparable <span class="title">getComparable1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//返回一个实现Comparable接口的匿名内部类的对象</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Comparable()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(java.lang.Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象3.1</title>
      <link href="/blog/JavaSE5-1.html"/>
      <url>/blog/JavaSE5-1.html</url>
      
        <content type="html"><![CDATA[<p>static关键字<br>main()方法<br>代码块<br>final</p><a id="more"></a><h1 id="一-static"><a href="#一-static" class="headerlink" title="一.static"></a>一.static</h1><p>static: 静态的, 可以用来修饰<font style="color:red;font-weight:bold;">属性、方法、*代码块(或初始化块)、*内部类</font></p><h2 id="A-static修饰属性-类变量"><a href="#A-static修饰属性-类变量" class="headerlink" title="A.static修饰属性(类变量):"></a>A.static修饰属性(类变量):</h2><ol><li>由类创建的所有的对象，都共用这一个属性</li><li>当其中一个对象对此属性进行修改, 会导致其他对象对此属性调用时也会更改. vs 实例变量(非static修饰的属性, 各个对象各自拥有一套副本)</li><li>类变量随着类的加载而加载的, 而且独一份</li><li>静态的变量可以直接通过“类.类变量”的形式来调用</li><li>类变量的加载是要早于对象. 所以当有对象以后, 可以“对象.类变量”使用. 但是”类.实例变量”是不行的.</li><li>类变量存在于内存的静态域中.</li></ol><h2 id="B-static修饰方法-类方法"><a href="#B-static修饰方法-类方法" class="headerlink" title="B.static修饰方法(类方法):"></a>B.static修饰方法(类方法):</h2><ol><li>随着类的加载而加载, 在内存中也是独一份</li><li>可以直接通过“类.类方法”的方式调用</li><li><strong>方法内部可以调用静态的属性或静态的方法, 而不能调用非静态的属性或方法</strong>. 反之, 非静态的方法是可以调用静态的属性或静态的方法. <font style="color:red;font-weight:bold;">静态的方法内是不可以有this或super关键字的!</font></li></ol><font style="color:red;font-weight:bold;">注意: 静态的结构(static的属性、方法、代码块、内部类)的生命周期要早于非静态的结构，同时被回收也要晚于非静态的结构</font><p>示例, 静态属性及内存状态:</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Test&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        SportsMan s1 = <span class="keyword">new</span> SportsMan(<span class="string">"金龙"</span>,<span class="number">23</span>);</span><br><span class="line">        SportsMan s2 = <span class="keyword">new</span> SportsMan(<span class="string">"银龙"</span>,<span class="number">20</span>);</span><br><span class="line">        s1.setName(<span class="string">"花龙"</span>);</span><br><span class="line">        s1.nation = <span class="string">"China"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SportsMan</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String nation;</span><br><span class="line">    SportsMan()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    SportsMan(String name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p><img src="imgs\Java\static.png" alt="static"></p><h2 id="C-单例模式"><a href="#C-单例模式" class="headerlink" title="C.单例模式"></a>C.单例模式</h2><p>23种设计模式</p><ul><li>单例模式(Singleton): 即<font style="color:red;font-weight:bold;">类只能创建一个对象</font>, Runtime类就是一个单例模式的应用</li><li>解决的问题: 如何只让设计的类只能创建一个对象</li><li>如何实现: 饿汉式  &amp;  懒汉式</li></ul><ol><li>私有化构造器</li><li>在类内部创建类的对象, 同时设置为private的, 通过公共的方法来调用, 体现封装性</li><li>一个public static的方法, 获得该(单例)对象</li><li>要求该对象也为static的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line"><span class="comment">//1.私有化构造器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Bank</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//2.创建类的对象，同时设置为private的，通过公共的来调用，体现封装性</span></span><br><span class="line"><span class="comment">//4.要求此对象也为static的</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Bank instance = <span class="keyword">new</span> Bank();</span><br><span class="line"><span class="comment">//3.此公共的方法，必须为static </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//饿汉式2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line"><span class="comment">//1.私有化构造器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Bank</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//2.创建类的对象，同时设置为private的，通过公共的来调用，体现封装性</span></span><br><span class="line"><span class="comment">//4.要求此对象也为static的</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Bank instance = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">instance  = <span class="keyword">new</span> Bank();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.此公共的方法，必须为static </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒汉式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Bank</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Bank instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;<span class="comment">//可能存在线程安全问题的!</span></span><br><span class="line">instance = <span class="keyword">new</span> Bank();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二-main"><a href="#二-main" class="headerlink" title="二.main()"></a>二.main()</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">     <span class="comment">//方法体     </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>main()是一个方法, 是主方法, 为程序的入口</li><li>权限修饰符: public protected 缺省 private —面向对象的封装性</li><li>对于方法来讲: static final abstract 可修饰</li><li>方法的返回值: void / 具体的返回值类型(基本的数据类型 &amp; 引用数据类型), 方法内部一定要有return</li><li>方法名: 命名的规则: xxxYyyZzz. 给方法命名时, 要见名知意</li><li>形参列表: 同一个方法名不同的形参列表的诸多个方法间构成重载. 形参 &amp; 实参—方法的参数传递机制: 值传递</li><li>抛出异常列表</li><li>方法体: 方法定义的是一种功能, 具体的实现由方法体操作.</li></ol><h1 id="三-代码块"><a href="#三-代码块" class="headerlink" title="三.代码块"></a>三.代码块</h1><ul><li>代码块: 是类的第4个成员, 由一对大括号括起来</li><li>作用: 用来初始化类的属性</li><li>分类: 只能用static来修饰.</li></ul><h2 id="A-静态代码块"><a href="#A-静态代码块" class="headerlink" title="A.静态代码块"></a>A.静态代码块</h2><ol><li>里面可以有输出语句</li><li>随着类的加载而加载，而且只被加载一次</li><li>多个静态代码块之间按照顺序结构执行</li><li>静态代码块的执行要早于非静态代码块的执行.</li><li>静态的代码块中只能执行静态的结构(类属性, 类方法)</li></ol><h2 id="B-非静态代码块"><a href="#B-非静态代码块" class="headerlink" title="B.非静态代码块"></a>B.非静态代码块</h2><ol><li>可以对类的属性(静态的 &amp; 非静态的)进行初始化操作, 同时也可以调用本类声明的方法(静态的 &amp; 非静态的)</li><li>里面可以有输出语句</li><li>一个类中可以有多个非静态的代码块, 多个代码块之间按照顺序结构执行</li><li>每创建一个类的对象, 非静态代码块就加载一次.</li><li>非静态代码块的执行要早于构造器</li></ol><font style="color:red;font-weight:bold;">关于属性赋值的操作:</font><p>①默认的初始化<br>②显式的初始化或代码块初始化(此处两个结构按照顺序执行)<br>③构造器中;<br>—————————以上是对象的属性初始化的过程—————————————<br>④通过方法对对象的相应属性进行修改</p><h1 id="四-final"><a href="#四-final" class="headerlink" title="四.final"></a>四.final</h1><p>final:最终的, 可以用来修饰类、属性、方法</p><ol><li>final修饰类: 这个类就<font style="color:red;font-weight:bold;">不能被继承.</font> 如: String类、StringBuffer类、System类</li><li>final修饰方法: <font style="color:red;font-weight:bold;">不能被重写</font>. 如: Object类的getClass()</li><li>final修饰属性: 此属性就是一个常量, 一旦初始化后, <font style="color:red;font-weight:bold;">不可再被赋值</font>. 习惯上, 常量用大写字符表示.<br>此常量在哪里赋值: ①此常量不能使用默认初始化 ②可以显式的赋值、代码块、构造器.<br>变量用static final修饰时: 全局常量. 比如: Math 类的PI</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多态性</title>
      <link href="/blog/JavaSE4-2.html"/>
      <url>/blog/JavaSE4-2.html</url>
      
        <content type="html"><![CDATA[<p>面向对象的特征三: 多态性<br>Object类<br>包装类</p><a id="more"></a><h1 id="一-多态性"><a href="#一-多态性" class="headerlink" title="一.多态性"></a>一.多态性</h1><ol><li>多态性的表现: ①方法的重载与重写 ②子类对象的多态性</li><li>使用的前提: ①要有继承关系 ②要有方法的重写</li><li>格式: </li></ol><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人走路"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">entertainment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"男人娱乐"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shopping</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"女人购物"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Man();<span class="comment">//向上转型</span></span><br><span class="line"><span class="comment">//虚拟方法调用：通过父类的引用指向子类的对象实体，当调用方法时，实际执行的是子类重写父类的方法</span></span><br><span class="line">p1.eat();</span><br><span class="line">p1.walk();</span><br><span class="line"><span class="comment">//p1.entertainment();//不能调用, Man类里没有这个函数</span></span><br></pre></td></tr></table></figure><ol start="4"><li>编译时, 认为p是Person类型的, 故只能执行Person里才有的结构, 即Man里特有的结构不能够调用<br> 子类对象的多态性, 并不使用于属性.</li><li>关于向下转型:<br>①向下转型,使用强转符: ()<br>②为了保证不报ClassCastException, 最好在向下转型前, 进行判断: instanceof</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 若a是A类的实例, 那么a也一定是A类的父类的实例。</span></span><br><span class="line"><span class="keyword">if</span> (p1 <span class="keyword">instanceof</span> Woman) &#123;</span><br><span class="line">    System.out.println(<span class="string">"hello!"</span>);</span><br><span class="line">    Woman w1 = (Woman) p1;</span><br><span class="line">    w1.shopping();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p1 <span class="keyword">instanceof</span> Man) &#123;</span><br><span class="line">    Man m1 = (Man) p1;</span><br><span class="line">    m1.entertainment();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二-Object类"><a href="#二-Object类" class="headerlink" title="二.Object类"></a>二.Object类</h1><ol><li>java.lang.Object 类, 是所有类的根父类!</li><li><h2 id="Object类仅有一个空参的构造器-public-Object"><a href="#Object类仅有一个空参的构造器-public-Object" class="headerlink" title="Object类仅有一个空参的构造器  public Object(){  }"></a>Object类仅有一个空参的构造器  public Object(){  }</h2><p>  关于方法:</p></li></ol><h2 id="①-equals-Object-obj"><a href="#①-equals-Object-obj" class="headerlink" title="① equals(Object obj)"></a>① equals(Object obj)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A.基本数据类型: 根据基本数据类型的值判断是否相等. 相等返回true, 反之返回false<br>&emsp;&emsp;注意: 两端数据类型可以不同, 在不同的情况下, 也可以返回true.<br>B.引用数据类型: 比较引用类型变量的地址值是否相等.<br>&emsp;&emsp;而我们希望比较的两个对象的属性值都相同的情况下返回true的话, 要<font style="color:red;font-weight:bold;">重写Object类的equals(Object obj)方法</font><br>&emsp;&emsp;像String类 File类 Date类…重写了Object类的equals()方法, 比较是两个对象的”实体内容”是否完全相同</p><h2 id="②-toString"><a href="#②-toString" class="headerlink" title="② toString()"></a>② toString()</h2><ol><li>当我们输出一个对象的引用时, 会默认调用toString()方法.</li><li>当我们没有重写Object类的toString()方法时, 打印的就是对象所在的类, 以及对象实体在堆空间的位置</li><li>而我们一般需要重写Object类的toString()方法, 将此对象的各个属性值返回.</li><li>像String类、Date、File类、包装类都重写了toString()方法.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Object类的toString()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="String的内存结构"><a href="#String的内存结构" class="headerlink" title="String的内存结构:"></a>String的内存结构:</h2><p><img src="imgs\Java\String.png" alt="String"></p><h1 id="三-包装类"><a href="#三-包装类" class="headerlink" title="三.包装类"></a>三.包装类</h1><p>Wrapper Class, 包装类均位于java.lang包下</p><p>基本数据类型由于不是类, 不能够使用Java类库里提供的大量的方法. 所以在设计上, 我们让每一个基本数据类型都对应一个类, 同时数据存储的范围还不变. 此时, 相当于基本数据类型就具有了类的特点. 这些类即为包装(wrapper 或封装类)</p><ul><li>boolean ==&gt; Boolean</li><li>byte&emsp;&emsp;==&gt; Byte</li><li>short &emsp; ==&gt; Short</li><li>int &emsp; &emsp; ==&gt; Integer</li><li>long&emsp;&emsp;==&gt; Long</li><li>char&emsp;&emsp;==&gt; Character</li><li>float&emsp;&emsp;==&gt; Float</li><li>double&emsp;==&gt; Double</li></ul><p>需要掌握的:</p><font style="color:red;font-weight:bold;">基本数据类型、包装类、String类之间的转换!</font><p><img src="imgs\Java\包装类转换.png" alt="包装类转换"></p><p>简易理解:</p><ol><li>基本数据类型与对应的包装类有自动装箱、自动拆箱 (JDK5.0之后)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如下:</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">Integer i1 = i;<span class="comment">//自动装箱</span></span><br><span class="line"><span class="keyword">int</span> j = i1;<span class="comment">//自动拆箱</span></span><br></pre></td></tr></table></figure><ol start="2"><li>基本数据类型、包装类—-&gt;String类: 调用String类的重载的<font style="color:red;font-weight:bold;">valueOf(Xxx xx);</font></li><li>String类—-&gt;基本数据类型、包装类: 调用相应的包装的<font style="color:red;font-weight:bold;">parseXxx(String str);</font></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意:</span></span><br><span class="line">String str = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">int</span> i = (<span class="keyword">int</span>)str;<span class="comment">//是错误的转换法.</span></span><br></pre></td></tr></table></figure><ol start="4"><li>特别的: <font style="color:red;font-weight:bold;">Boolean的默认初始化值为null, 而boolean的默认初始化值为false;</font></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Boolean b = <span class="keyword">new</span> Boolean(<span class="string">"true"</span>);<span class="comment">//除了这样传参之外, 其他传参均为false</span></span><br><span class="line"><span class="comment">//不会报java.lang.NumberFormatException</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承性</title>
      <link href="/blog/JavaSE4-1.html"/>
      <url>/blog/JavaSE4-1.html</url>
      
        <content type="html"><![CDATA[<p>面向对象特征二:继承性<br>方法的<font style="color:red;font-weight:bold;">重写</font><br>super关键字<br>子类对象的实例化过程</p><a id="more"></a><h1 id="一-继承性"><a href="#一-继承性" class="headerlink" title="一.继承性"></a>一.继承性</h1><p>1.为什么要有继承性:<br>&emsp;&emsp;有一些东西拥有某些公共的特性, 将他们相同的部分抽取出来放在一起, <font style="color:red;font-weight:bold;">方便代码的复用与修改</font><br>2.通过”<font style="color:red;font-weight:bold;">class A extends B</font>“类实现类的继承:<br>&emsp;&emsp;子类: A; 父类(或基类SuperClass): B<br>3.子类继承父类以后, 父类中声明的属性、方法, 子类就可以获取到.<br>&emsp;&emsp;明确: 当父类中有私有的属性或方法时, 子类同样可以获取得到, 只是由于封装性的设计, 使得<font style="color:red;font-weight:bold;">子类不可以直接<br>调用</font>罢了.<br>&emsp;&emsp;子类除了通过继承, 获取父类的结构之外, 还可以定义自己的特有的成分.<br>extends:子类是对父类功能的“扩展”, 明确子类不是父类的子集.<br>4.Java中类的继承性<font style="color:red;font-weight:bold;">只支持单继承</font>: 一个类只能继承一个父类. 反之, 一个父类可以有多个子类.<br>5.子父类是相对的概念.</p><h1 id="二-orverwrite-or-override"><a href="#二-orverwrite-or-override" class="headerlink" title="二.orverwrite or override"></a>二.orverwrite or override</h1><h2 id="方法的重载与重写的区别"><a href="#方法的重载与重写的区别" class="headerlink" title="方法的重载与重写的区别?"></a><font style="color:red;font-weight:bold;">方法的重载与重写的区别?</font></h2><p><strong>重载</strong>: “两同一不同”: 同一个类, 同一个方法名, 不同的参数列表. 注: 方法的重载与方法的返回值无关!<br>构造器也是可以重载的<br><strong>重写</strong>: (前提: 在继承的基础之上, 子类在获取了父类的结构以后, 可以对父类中同名的方法进行“重构”)</p><ul><li>方法的返回值, 方法名, 形参列表形同;</li><li><font style="color:red;font-weight:bold;">权限修饰符不小于父类的同名方法;</font></li><li><font style="color:red;font-weight:bold;">子类方法的异常类型不大于父类的;</font></li><li>两个方法要同为static或同为非static.</li></ul><h1 id="三-super"><a href="#三-super" class="headerlink" title="三.super"></a>三.super</h1><p>1.super: 相较于关键字this, 可以修饰属性、方法、构造器<br>2.super修饰属性、方法: 在子类的方法、构造器中, 通过<font style="color:red;font-weight:bold;">“super.属性”或者”super.方法”</font>的形式, 显式的调用父类的指定属性或方法. 尤其是, 当子类与父类有同名的属性、或方法时, 调用父类中的结构的话, 一定要用“super.”<br>3.通过“super(形参列表)”, 显式的在子类的构造器中, 调用父类指定的构造器!<br>&emsp;&emsp;<strong>任何一个类(除Object类)的构造器的首行, 要么显式的调用本类中重载的其它的构造器“this(形参列表)”或显式的调用父类中指定的构造器“super(形参列表)”, 要么默认的调用父类空参的构造器”super()”</strong></p><font style="color:red;font-weight:bold;">“super(形参列表)”或”this(形参列表)”只能出现一个</font><br>&emsp;&emsp;建议在设计类时, <font style="color:red;font-weight:bold;">提供一个空参的构造器!</font><h1 id="四-子类对象的实例化"><a href="#四-子类对象的实例化" class="headerlink" title="四.子类对象的实例化"></a>四.子类对象的实例化</h1><font style="color:red;font-weight:bold;">先构建(调用父类的构造器构建)父类的内容, 再构建子类的内容</font><p>为了直观的理解, 可以运行一下代码, 看输出的结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子类对象实例化的全过程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDog</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">d.setAge(<span class="number">10</span>);</span><br><span class="line">d.setName(<span class="string">"小明"</span>);</span><br><span class="line">d.setHostName(<span class="string">"花花"</span>);</span><br><span class="line">System.out.println(<span class="string">"name:"</span> + d.getName() + <span class="string">" age:"</span> + d.getAge()</span><br><span class="line">+ <span class="string">" hostName:"</span> + d.getHostName());</span><br><span class="line">System.out.println(d.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生物</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Creator</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Creator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">System.out.println(<span class="string">"this is Creator's constructor"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 动物类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">extends</span> <span class="title">Creator</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">System.out.println(<span class="string">"this is Animal's constructor"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 狗</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String hostName;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHostName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> hostName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHostName</span><span class="params">(String hostName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.hostName = hostName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">System.out.println(<span class="string">"this is Dog's constructor"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span> is Creator<span class="string">'s constructor</span></span><br><span class="line"><span class="string">this is Animal'</span>s constructor</span><br><span class="line"><span class="keyword">this</span> is Dog<span class="string">'s constructor</span></span><br><span class="line"><span class="string">name:小明 age:10 hostName:花花</span></span><br><span class="line"><span class="string">Dog类的对象dd在堆空间内的信息</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装性</title>
      <link href="/blog/JavaSE3-3.html"/>
      <url>/blog/JavaSE3-3.html</url>
      
        <content type="html"><![CDATA[<p>面向对象之封装性<br>构造器<br>this关键字<br>package与import</p><a id="more"></a><h1 id="一-封装性"><a href="#一-封装性" class="headerlink" title="一.封装性"></a>一.封装性</h1><p>面向对象的特征一: 封装与隐藏</p><p>问题: 当创建了类的对象以后, 如果直接通过”对象.属性”的方式对相应的对象属性赋值的话, 可能会出现不满足实际<br>情况的意外, 我们考虑不让对象来直接作用属性, 而是通过”对象.方法”的形式, 来控制对象对属性的访问. 实际<br>情况中, 对属性的要求就可以通过方法来体现.</p><font style="color:red;font-weight:bold;">封装性的思想: ①将类的属性私有化; ②提供公共的方法(setter&amp;getter)来实现调用.</font><h2 id="A-四种权限修饰符"><a href="#A-四种权限修饰符" class="headerlink" title="A.四种权限修饰符"></a>A.四种权限修饰符</h2><p><strong>1.权限从大到小为：public   protected   缺省   private</strong><br><strong>2.四种权限都可以用来修饰属性、方法、构造器</strong><br><strong>3.修饰类的话：public 缺省(default)类只能被同一个包中的类访问</strong></p><p><img src="imgs\Java\修饰符.png" alt="修饰符"></p><h1 id="二-构造器"><a href="#二-构造器" class="headerlink" title="二.构造器"></a>二.构造器</h1><p>类的第三个成员: 构造器(constructor 构造方法)</p><h2 id="A-构造器的作用"><a href="#A-构造器的作用" class="headerlink" title="A.构造器的作用"></a>A.构造器的作用</h2><p>①创建对象 ②给创建的对象的属性赋值</p><h2 id="B-构造器的特征"><a href="#B-构造器的特征" class="headerlink" title="B.构造器的特征"></a>B.构造器的特征</h2><p>①与类名一致②没有返回值类型③无return与语句</p><p>④不能被static|final|abstract|native本地的|synchronized同步的</p><ul><li>1.设计类时, <font style="color:red;font-weight:bold;">若不显式声明类的构造器的话, 程序会默认提供一个空参的构造器.</font>.</li><li>2.<font style="color:red;font-weight:bold;">一旦显式的定义类的构造器, 那么默认的构造器就不再提供.</font></li><li>3.如何声明类的构造器. 格式: 权限修饰符  类名(形参){ }</li><li>4.类的多个构造器之间<font style="color:red;font-weight:bold;">构成重载</font></li></ul><p>类对象的属性赋值的先后顺序: ①属性的默认初始化 ②属性的显式初始化 ③通过构造器给属性初始化</p><p>④通过”对象.方法”的方式给属性赋值</p><h1 id="三-this"><a href="#三-this" class="headerlink" title="三.this"></a>三.this</h1><p>this:</p><p>1.使用在类中, 可以用来修饰属性、方法、构造器<br>2.表示当前对象或者是当前正在创建的对象<br>3.当形参与成员变量重名时, 如果在方法内部需要使用成员变量, 必须添加this来表明该变量时类成员<br>4.在任意方法内, 如果使用当前类的成员变量或成员方法可以在其前面添加this, 增强程序的阅读性<br>5.在构造器中使用<font style="color:red;font-weight:bold;">“this(形参列表)”</font>显式的调用本类中重载的其它的构造器<br>&emsp;&emsp;①要求“this(形参列表)”要声明在构造器的首行!<br>&emsp;&emsp;②类中若存在n个构造器, 那么最多有n-1构造器中使用了this.<br>6.静态方法中不能使用this和super关键字</p><font style="color:red;font-weight:bold;">例子:</font><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPerson</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">System.out.println(p1.getName() + <span class="string">":"</span> + p1.getAge());</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="string">"BB"</span>,<span class="number">23</span>);</span><br><span class="line"><span class="keyword">int</span> temp = p2.compare(p1);</span><br><span class="line">System.out.println(temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">"AA"</span>;</span><br><span class="line"><span class="keyword">this</span>.age = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>(name);</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"eating"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"sleeping"</span>);</span><br><span class="line"><span class="keyword">this</span>.eat();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比较当前对象与形参的对象的age谁大。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.age &gt; p.age)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.age &lt; p.age)</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="四-package与import"><a href="#四-package与import" class="headerlink" title="四.package与import"></a>四.package与import</h1><p>package: <font style="color:red;font-weight:bold;">声明源文件(即当前文件)所在的包(即文件夹), 必须写在程序的第一行.</font></p><p>每“.”一次, 表示一层文件目录; 包名都要小写.</p><p>import:</p><p>1)显式导入指定包下的类或接口<br>2)写在包的声明和源文件之间<br>3)如果需要引入多个类或接口, 那么并列写出<br>4)如果导入的类是java.lang包下的, 如: System String Math等, 就不需要显式的声明.<br>5)理解.*的概念.比如java.util.*;<br>6)如何处理同名类的导入. 如: 在util包和sql包下同时存在Date类.<br>7)import static 表示导入指定类的static的属性或方法<br>8)导入java.lang.*只能导入lang包下的所有类或接口, 不能导入lang的子包下的类或接口</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象1.2</title>
      <link href="/blog/JavaSE3-2.html"/>
      <url>/blog/JavaSE3-2.html</url>
      
        <content type="html"><![CDATA[<p>方法的重载<br>可变个数的形参的方法<br>Java的值传递机制</p><a id="more"></a><h1 id="一-overload-重载"><a href="#一-overload-重载" class="headerlink" title="一.overload(重载)"></a>一.overload(重载)</h1><h2 id="1-重载要求"><a href="#1-重载要求" class="headerlink" title="1.重载要求:"></a>1.重载要求:</h2><ol><li><strong>同一个类中</strong></li><li><strong>方法名必须相同</strong></li><li><strong>方法的参数列表不同(①参数的个数不同②参数类型不同)</strong><br><strong>注意: 方法的重载与<font style="color:red">方法的返回值类型</font>没有关系!</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如下的四个方法构成重载</span></span><br><span class="line"><span class="comment">//定义两个int型变量的和</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> i + j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义三个int型变量的和</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> i + j + k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义两个double型数据的和</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSum</span><span class="params">(<span class="keyword">double</span> d1,<span class="keyword">double</span> d2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> d1 + d2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义三个double型数组的和</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSum</span><span class="params">(<span class="keyword">double</span> d1,<span class="keyword">double</span> d2,<span class="keyword">double</span> d3)</span></span>&#123;</span><br><span class="line">System.out.println(d1 + d2 + d3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如下两个方法不能与如上的几个方法构成重载</span></span><br><span class="line"><span class="comment">//public int getSum1(int i,int j,int k)&#123;//方法名必须相同</span></span><br><span class="line"><span class="comment">//return i + j + k;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//public void getSum(int i,int j,int k)&#123;//与方法的返回值类型</span></span><br><span class="line"><span class="comment">//System.out.println(i + j + k);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="二-可变个数的形参的方法"><a href="#二-可变个数的形参的方法" class="headerlink" title="二.可变个数的形参的方法"></a>二.可变个数的形参的方法</h1><p>可变个数的形参的方法(JDK5.0之后的特性):</p><ul><li>1.格式: 对于方法的形参: 数据类型 … 形参名</li><li>2.可变个数的形参的方法与同名的方法之间构成重载</li><li>3.可变个数的形参在调用时, 个数从0开始, 到无穷多个都可以</li><li>4.使用可变多个形参的方法与方法的形参使用数组是一致的</li><li>5.若方法中存在可变个数的形参, 那么一定要声明在方法形参的最后</li><li>6.在一个方法中, 最多声明一个可变个数的形参</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如下四个方法构成重载</span></span><br><span class="line"><span class="comment">//在类中一旦定义了重载的可变个数的形参的方法以后, 下面的前两个方法可以省略</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"hello world!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String str1)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"hello "</span> + str1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可变个数的形参的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String ... args)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i++)&#123;</span><br><span class="line">System.out.println(args[i] + <span class="string">"$"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(<span class="keyword">int</span> i,String ... args)</span></span>&#123;</span><br><span class="line"><span class="comment">//public void sayHello(String ... args,int i)&#123;//这样不对</span></span><br><span class="line">System.out.println(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; args.length;j++)&#123;</span><br><span class="line">System.out.println(args[j] + <span class="string">"$"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello1</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i++)&#123;</span><br><span class="line">System.out.println(args[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="三-Java的值传递机制"><a href="#三-Java的值传递机制" class="headerlink" title="三.Java的值传递机制"></a>三.Java的值传递机制</h1><h2 id="1-方法的参数传递"><a href="#1-方法的参数传递" class="headerlink" title="1.方法的参数传递"></a>1.方法的参数传递</h2><ol><li><strong>形参</strong>: 方法声明时, 方法小括号内的参数;<strong>实参</strong>: 调用方法时, 实际传入的参数的值</li><li>规则: Java中的参数传递机制: <font style="color:red;font-weight:bold;">值传递机制</font></li></ol><p>①形参是基本数据类型的: 将实参的值传递给形参的基本数据类型的变量<br>②形参是引用数据类型的: 将实参的引用类型变量的值(对应的堆空间的对象实体的首地址值)传递给形参的引用类型变量.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例1:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Test1 tt = <span class="keyword">new</span> Test1();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">5</span>;</span><br><span class="line">System.out.println(<span class="string">"i:"</span> + i + <span class="string">" j:"</span> + j);<span class="comment">//i : 10  j : 5</span></span><br><span class="line"><span class="comment">/*//直接交换变量i与j的值</span></span><br><span class="line"><span class="comment">int temp = i;</span></span><br><span class="line"><span class="comment">i = j;</span></span><br><span class="line"><span class="comment">j = temp;</span></span><br><span class="line"><span class="comment">*/</span>tt.swap(i, j);<span class="comment">//通过方法交换, 将i的值传递给m，j的值传递给n, 实际上i与j的值根本没有交换</span></span><br><span class="line">System.out.println(<span class="string">"i:"</span> + i + <span class="string">" j:"</span> + j);<span class="comment">//i : 10  j : 5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个方法，交换两个变量的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = m;</span><br><span class="line">m = n;</span><br><span class="line">n = temp;</span><br><span class="line">System.out.println(<span class="string">"m:"</span> + m + <span class="string">" n:"</span> + n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若直接用注释部分的代码交换i与j可以交换, 使用swap方法以后: 实际上i与j本身的值根本没有交换</p><p><img src="imgs\Java\值传递.png" alt="值传递"></p><p><img src="imgs\Java\swap.png" alt="swap"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例2:</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Test1 tt = <span class="keyword">new</span> Test1();</span><br><span class="line">DataSwap ds = <span class="keyword">new</span> DataSwap();</span><br><span class="line">System.out.println(<span class="string">"ds.i:"</span> + ds.i + <span class="string">" ds.j:"</span> + ds.j);</span><br><span class="line">tt.swap(ds);</span><br><span class="line">System.out.println(ds);</span><br><span class="line">System.out.println(<span class="string">"ds.i:"</span> + ds.i + <span class="string">" ds.j:"</span> + ds.j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换元素的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(DataSwap d)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = d.i;</span><br><span class="line">d.i = d.j;</span><br><span class="line">d.j = temp;</span><br><span class="line">System.out.println(d);<span class="comment">//打印引用变量d的值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataSwap</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象1.1</title>
      <link href="/blog/JavaSE3-1.html"/>
      <url>/blog/JavaSE3-1.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-面向对象的初步认识"><a href="#一-面向对象的初步认识" class="headerlink" title="一.面向对象的初步认识"></a>一.面向对象的初步认识</h1><a id="more"></a><h3 id="1-了解-面向对象vs面向过程"><a href="#1-了解-面向对象vs面向过程" class="headerlink" title="1.(了解)面向对象vs面向过程"></a>1.(了解)面向对象vs面向过程</h3><p>例:实现人把大象装进冰箱</p><p>面向对象:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 人</span>&#123;<span class="comment">//可以这么理解</span></span><br><span class="line">    open()&#123;<span class="comment">//打开冰箱</span></span><br><span class="line">    &#125;</span><br><span class="line">    put()&#123;<span class="comment">//将大象放进冰箱</span></span><br><span class="line">    &#125;</span><br><span class="line">    close()&#123;<span class="comment">//关闭冰箱</span></span><br><span class="line">    &#125;</span><br><span class="line">    main()&#123;</span><br><span class="line">        人 = <span class="keyword">new</span> 人();</span><br><span class="line">        人.open();</span><br><span class="line">        人.put();</span><br><span class="line">        人.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面向过程:①人打开冰箱;②将大象放进冰箱;③关闭冰箱</p><h3 id="2-面向对象的编程关注于类的设计"><a href="#2-面向对象的编程关注于类的设计" class="headerlink" title="2.面向对象的编程关注于类的设计!"></a>2.面向对象的编程关注于类的设计!</h3><p>1）一个项目或工程, 不管多庞大, 一定是有一个一个类构成的.<br>2）类是抽象的, 好比是制造汽车的图纸.而具体的一辆一辆的车, 是根据图纸制造的, 实际上就是类的实例化</p><h3 id="3-完成一个项目-或功能-的思路"><a href="#3-完成一个项目-或功能-的思路" class="headerlink" title="3.完成一个项目(或功能)的思路"></a>3.完成一个项目(或功能)的思路</h3><p>1）所要完成的功能对应的类的对象是否存在.<br>2）若存在, 则通过对象直接调用对应的类中的属性或方法即可.<br>3）若不存在, 需要创建类的对象.甚至说, 类都不存在, 就需要设计类.</p><h3 id="4-面向对象编程的三条主线"><a href="#4-面向对象编程的三条主线" class="headerlink" title="4.面向对象编程的三条主线:"></a>4.面向对象编程的三条主线:</h3><p>1）类及类的构成成分:<font style="color:red;font-weight:bold;">属性  方法 构造器  代码块 内部类</font><br>2）面向对象编程的特征:<font style="color:red;font-weight:bold;">封装性  继承性 多态性(抽象性)</font><br>3）其它的关键字:<font style="color:red;font-weight:bold;">this super package import static final abstract interface …</font></p><h1 id="二-类及对象"><a href="#二-类及对象" class="headerlink" title="二.类及对象"></a>二.类及对象</h1><p>1.关于类的设计</p><h2 id="2-类的组成成分"><a href="#2-类的组成成分" class="headerlink" title="2.类的组成成分:"></a>2.类的组成成分:</h2><p>   1)属性(成员变量, Field)<br>   2)方法(成员方法, 函数, Method)</p><h3 id="2-1属性"><a href="#2-1属性" class="headerlink" title="2.1属性:"></a>2.1属性:</h3><h2 id="成员变量-vs-局部变量"><a href="#成员变量-vs-局部变量" class="headerlink" title="成员变量 vs 局部变量"></a><font color="black">成员变量 vs 局部变量</font></h2><p>相同点: 1.遵循变量声明的格式: 数据类型 变量名 = 初始化值 2.都有作用域</p><p>不同点: 1.声明的位置的不同: 成员变量: 声明在类里, 方法外; 局部变量: 声明在方法内, 方法的形参部分, 代码块内</p><p>&emsp;&emsp;&emsp;&emsp;2.成员变量的修饰符有四个:public private protected 缺省, 局部变量没有修饰符, 与所在的方法修饰符相同</p><p>&emsp;&emsp;&emsp;&emsp;3.初始化值: 一定会有初始化值, 成员变量:如果在声明的时候, 不显式的赋值, 那么不同数据类型会有不同的默认初始化值.局部变量: 一定要显式的赋值.(局部变量没有默认初始化值)</p><ul><li><strong>byte short int long ==&gt;0</strong></li><li><strong>float double ==&gt;0.0</strong></li><li><strong>char ==&gt;空格</strong></li><li><strong>boolean ==&gt;false</strong> </li><li><strong>引用类型变量==&gt;null</strong></li></ul><p>&emsp;&emsp;&emsp;&emsp;4.二者在内存中存放的位置不同:成员变量存在于堆空间中; 局部变量: 栈空间中</p><p>总结: 关于变量的分类: </p><ul><li>1)按照数据类型的不同: 基本数据类型(8种)&amp;引用数据类型</li><li>2)按照声明的位置的不同: 成员变量 &amp; 局部变量</li></ul><h3 id="2-2-方法-提供某种功能的实现"><a href="#2-2-方法-提供某种功能的实现" class="headerlink" title="2.2 方法: 提供某种功能的实现"></a>2.2 方法: 提供某种功能的实现</h3><p>1)实例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;<span class="comment">//方法体&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><font style="color:red;font-weight:bold;">格式: 权限修饰符 返回值类型(void:无返回值/具体的返回值) 方法名(形参){}</font><p>2)关于返回值类型: void: 表明此方法不需要返回值</p><p>有返回值的方法: 在方法的最后一定有return + 返回值类型对应的变量</p><p>记忆: void 与return不可以同时出现一个方法内. 像一对“冤家”.</p><p>3)方法内可以调用本类的其他方法或属性, 但是不能在方法内再定义方法!</p><p>3.面向对象编程的思想的落地法则一:<br>1)设计并创建类及类的成分<br>2)实例化类的对象<br>3)通过“对象.属性”或”对象.方法”的形式完成某项功能</p><p>4.类的初始化的内存解析</p><h3 id="4-1-内存划分的结构"><a href="#4-1-内存划分的结构" class="headerlink" title="4.1 内存划分的结构:"></a>4.1 内存划分的结构:</h3><ul><li><strong>栈(stack):局部变量、对象的引用名、数组的引用名</strong></li><li><strong>堆(heap):new 出来的“东西”(如: 对象的实体, 数组的实体), 含成员变量</strong></li><li><strong>方法区: 含字符串常量</strong></li><li><strong>静态域: 声明为static的变量</strong></li></ul><p>4.2 理解的基础上, 学会基本的创建的类的对象在内存中的运行.</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组</title>
      <link href="/blog/JavaSE2-3.html"/>
      <url>/blog/JavaSE2-3.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java数组"><a href="#Java数组" class="headerlink" title="Java数组"></a>Java数组</h1><a id="more"></a><h2 id="一-一维数组"><a href="#一-一维数组" class="headerlink" title="一.一维数组"></a><font color="black">一.一维数组</font></h2><p>数组: 相同数据类型的数据的组合.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如: 多个int</span></span><br><span class="line"><span class="keyword">int</span> score1 = <span class="number">72</span>;</span><br><span class="line"><span class="keyword">int</span> score2 = <span class="number">90</span>;</span><br><span class="line"><span class="keyword">int</span> score3 = <span class="number">59</span>;</span><br><span class="line"><span class="comment">//使用数组存储</span></span><br><span class="line"><span class="keyword">int</span>[] scores1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">72</span>,<span class="number">90</span>,<span class="number">59</span>&#125;;</span><br><span class="line"><span class="comment">//静态初始化:声明并初始化数组与给数组相应的元素赋值操作同时进行</span></span><br><span class="line"><span class="keyword">int</span> scores2[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];<span class="comment">//动态初始化:声明并初始化数组与数组相应的元素赋值操作分开进行</span></span><br><span class="line">scores2[<span class="number">0</span>] = <span class="number">72</span>;</span><br><span class="line">scores2[<span class="number">1</span>] = <span class="number">90</span>;</span><br><span class="line">scores2[<span class="number">2</span>] = <span class="number">59</span>;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">72</span>,<span class="number">90</span>,<span class="number">59</span>&#125;;<span class="comment">//这样可以</span></span><br><span class="line"><span class="comment">//声明数组的错误写法:</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String[] names = new String[5]&#123;"AA","BB","CC"&#125;;//这样用时不能指定大小</span></span><br><span class="line"><span class="comment">int i[10];</span></span><br><span class="line"><span class="comment">int i = new int[];//i是int型</span></span><br><span class="line"><span class="comment">int[] arr;arr = &#123;10,11,12&#125;;//两句分开不行, 合并为一句可以</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">System.out.println(scores2.length);<span class="comment">//求数组长度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; scores1.length;i++)&#123;<span class="comment">//遍历数组</span></span><br><span class="line">System.out.println(scores1[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意1.不管是动态还是静态初始化数组, 一定在<strong>创建的时候, 就指明了数组的长度</strong><br>&emsp;&emsp;2.如何引用数组元素: 通过数组的下角标的方式. 下角标从0开始, 到n-1结束.其中n为数组的长度</p><p>&emsp;&emsp;3.关于数组元素的默认初始化值</p><ul><li>byte short int long 而言:0</li><li>float double 而言:0.0</li><li>char而言:空格</li><li>boolean而言:false</li><li>引用类型变量而言:null</li></ul><h3 id="4-数组的内存结构"><a href="#4-数组的内存结构" class="headerlink" title="4.数组的内存结构"></a>4.数组的内存结构</h3><p>内存结构图:</p><p><img src="imgs\Java\内存结构图.png" alt="内存结构图"></p><font style="color:red;font-weight:bold">在JAVA中, 凡是new出来的东西, 都会被默认初始化并赋值</font><p>对于数组来讲:</p><p><img src="imgs\Java\数组.png" alt="数组"></p><p>字符串: 面向对象之后再看</p><p><img src="imgs\Java\String.png" alt="String"></p><h2 id="二-二维数组"><a href="#二-二维数组" class="headerlink" title="二.二维数组"></a><font color="black">二.二维数组</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.声明并初始化</span></span><br><span class="line"><span class="comment">//一维:类型后一个[]</span></span><br><span class="line"><span class="keyword">int</span>[] i = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">12</span>];</span><br><span class="line">i[<span class="number">0</span>] = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span>[] j = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">12</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">//二维:类型后两个[]</span></span><br><span class="line">String[][] str = <span class="keyword">new</span> String[<span class="number">4</span>][<span class="number">3</span>];<span class="comment">//4行3列</span></span><br><span class="line">String[][] str1 = <span class="keyword">new</span> String[<span class="number">4</span>][];<span class="comment">//4行, 每行的列可能不一样</span></span><br><span class="line">str1[<span class="number">0</span>] = <span class="keyword">new</span> String[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">str1[<span class="number">3</span>] = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//2.如何引用二维数组的元素</span></span><br><span class="line">arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">12</span>;</span><br><span class="line"><span class="comment">//3.二维数组的长度:</span></span><br><span class="line">arr.length;<span class="comment">//3</span></span><br><span class="line">arr[<span class="number">1</span>].length;<span class="comment">//2</span></span><br><span class="line"><span class="comment">//4.遍历二维数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr[i].length;j++)&#123;</span><br><span class="line">System.out.print(arr[i][j] + <span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="5-二维数组的结构"><a href="#5-二维数组的结构" class="headerlink" title="5.二维数组的结构:"></a>5.二维数组的结构:</h3><p><img src="imgs\Java\String[][].png" alt="String[][]"></p><p><img src="imgs\Java\二维数组.png" alt="二维数组"></p><h2 id="三-数组中常见的异常"><a href="#三-数组中常见的异常" class="headerlink" title="三.数组中常见的异常"></a><font color="black">三.数组中常见的异常</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.数组下标越界的异常:java.lang.ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="keyword">int</span>[] i = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//i[0] = 90;</span></span><br><span class="line"><span class="comment">//i[10] = 99;//最大i[9]</span></span><br><span class="line"><span class="comment">//for(int m = 0;m &lt;= i.length;m++)&#123;</span></span><br><span class="line"><span class="comment">//    System.out.println(i[m]);//最大i[i.length-1]</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.空指针的异常:NullPointerException</span></span><br><span class="line"><span class="comment">//第一种:</span></span><br><span class="line"><span class="comment">//boolean[] b = new boolean[3];</span></span><br><span class="line"><span class="comment">//b = null;</span></span><br><span class="line"><span class="comment">//System.out.println(b[0]);//b已经为空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种:</span></span><br><span class="line"><span class="comment">//String[] str = new String[4];</span></span><br><span class="line"><span class="comment">//System.out.println(str[3].toString());//没有初始化str[3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种:</span></span><br><span class="line"><span class="keyword">int</span>[][] j = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line"><span class="comment">//j[2][0] = 12;//j的第二维还未初始化</span></span><br></pre></td></tr></table></figure><h2 id="四-数组中常用的算法"><a href="#四-数组中常用的算法" class="headerlink" title="四.数组中常用的算法"></a><font color="black">四.数组中常用的算法</font></h2><h3 id="求数组元素的最大值-amp-最小值-amp-和-amp-平均数"><a href="#求数组元素的最大值-amp-最小值-amp-和-amp-平均数" class="headerlink" title="求数组元素的最大值&amp;最小值&amp;和&amp;平均数"></a>求数组元素的最大值&amp;最小值&amp;和&amp;平均数</h3><h3 id="数组的复制和反转"><a href="#数组的复制和反转" class="headerlink" title="数组的复制和反转"></a>数组的复制和反转</h3><p>情况1: 浅复制, 两个数组的引用指向同一片内存空间, 改变一个的内容另一个也会改变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr2 = arr1;</span><br></pre></td></tr></table></figure><p>情况2: 深复制, 将一片内存里的内容, 复制到另一片内存里(如何实现复制)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[arr1.length];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr1.length;i ++)&#123;</span><br><span class="line">arr2[i] = arr1[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组的反转：<br>数组元素的反转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//①</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length/<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line">arr[i] = arr[arr.length-<span class="number">1</span> - i];</span><br><span class="line">arr[arr.length - <span class="number">1</span> - i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//②</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>, y = arr.length - <span class="number">1</span>; x &lt; y; x++, y--) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[x];</span><br><span class="line">arr[x] = arr[y];</span><br><span class="line">arr[y] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓展:String str = “abcdefg”;</p><h3 id="数组的排序"><a href="#数组的排序" class="headerlink" title="数组的排序"></a>数组的排序</h3><ul><li>插入排序: 直接插入排序、折半插入排序、Shell排序</li><li><p>交换排序: 冒泡排序、快速排序(或分区交换排序)</p></li><li><p>选择排序: 简单选择排序、堆排序</p></li><li><p>归并排序</p></li><li><p>基数排序</p></li></ul><p>使用冒泡排序使数组元素从小到大排列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用直接选择排序使数组元素从小到大排列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> t = i;<span class="comment">//默认i处是最小的</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i;j &lt; arr.length;j++)&#123;</span><br><span class="line"><span class="comment">//一旦在i后发现存在比其小的元素，就记录那个元素的下角标</span></span><br><span class="line"><span class="keyword">if</span>(arr[t] &gt; arr[j])&#123;</span><br><span class="line">t = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t != i)&#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[t];</span><br><span class="line">arr[t] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以调用: Arrays工具类: <font style="color:red;font-weight:bold">Arrays.sort(arr);</font></p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基本语法2</title>
      <link href="/blog/JavaSE2-2.html"/>
      <url>/blog/JavaSE2-2.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java的一些基本语法"><a href="#Java的一些基本语法" class="headerlink" title="Java的一些基本语法"></a>Java的一些基本语法</h1><a id="more"></a><h2 id="4-流程控制"><a href="#4-流程控制" class="headerlink" title="4.流程控制"></a><font color="black">4.流程控制</font></h2><h3 id="A-顺序结构"><a href="#A-顺序结构" class="headerlink" title="A.顺序结构"></a>A.顺序结构</h3><p>程序从上往下的顺序执行</p><h3 id="B-分支结构"><a href="#B-分支结构" class="headerlink" title="B.分支结构"></a>B.分支结构</h3><p>if-else &amp; switch-case</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">①<span class="keyword">if</span>(条件表达式)&#123;   &#125;</span><br><span class="line">②<span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line"><span class="comment">//执行的语句1;</span></span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//执行的语句2;</span></span><br><span class="line">   &#125;</span><br><span class="line">③<span class="keyword">if</span>(条件表达式<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//执行的语句1;</span></span><br><span class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">2</span>)&#123;</span><br><span class="line"><span class="comment">//执行的语句2;</span></span><br><span class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span>( 条件表达式<span class="number">3</span>)&#123;</span><br><span class="line"><span class="comment">//执行的语句3;</span></span><br><span class="line">   &#125;...</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//执行的语句;</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>[注意]<br>&emsp;&emsp;1.一旦满足某个条件表达式, 则进入其执行语句块执行, 执行完毕, 跳出当前的条件判断结构, 不会执行剩下的条件结构语句.</p><p>&emsp;&emsp;2.如果多个条件表达式之间为“互斥”关系, 多个结构可以上下调换顺序<br>如果多个条件表达式之间为“包含”关系, 要求条件表达式范围小的写在范围大的上面.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(变量)&#123;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[注意]<br>1.变量可以为如下的数据类型:byte  short int char 枚举 String(jdk1.7)<br>2.case后只能填写变量的值, 不能写范围.<br>3.default是可以省略的, 并且其位置也是灵活的, 但通常将其放在case语句之后.<br>4.一旦满足某个case语句, 则进入执行其操作, 直至遇到break或者程序终止.<br>5.若要判断的语句的条件满足switch变量的数据类型, 且值不多的情况下, 建议选择switch-case .<br>除此之外, 选择if-else.</p><p><strong>[例题]从键盘输入三个int类型的数存入三个int变量, 利用if-else实现对三个数的排序, 并输出.</strong><br><strong>[例题]输入一个年月日, 像: 2019/7/20, 输出该天是这一年中的哪一天.</strong></p><h3 id="C-循环结构"><a href="#C-循环结构" class="headerlink" title="C.循环结构"></a>C.循环结构</h3><p>格式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(①;②;③)&#123;</span><br><span class="line">④</span><br><span class="line">&#125;</span><br><span class="line">①</span><br><span class="line"><span class="keyword">while</span>(②)&#123;</span><br><span class="line">④</span><br><span class="line">③</span><br><span class="line">&#125;</span><br><span class="line">①</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">④</span><br><span class="line">③</span><br><span class="line">&#125;<span class="keyword">while</span>(②);</span><br></pre></td></tr></table></figure><p>①初始化条件<br>②循环条件<br>③迭代部分<br>④循环体</p><p>注意 1.不同的循环结构之间可以相互转换<br>&emsp;&emsp; 2.while和do-while的区别; do-while程序至少会执行一次</p><p>嵌套循环: 上述循环体嵌套循环体<br>若外层循环执行m次, 内层循环执行n次, 整个程序执行m*n次 .</p><p><strong>[例题]输出九九乘法表</strong></p><p><strong>[例题]输出100内的质数.(两种)</strong></p><p>无限循环结构:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="keyword">if</span>(  )&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="keyword">if</span>(  )&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们往往会在无限循环结构内部提供循环的终止条件, 使用break关键字跳出循环.避免死循环.</p><h3 id="D-break-amp-continue"><a href="#D-break-amp-continue" class="headerlink" title="D.break&amp;continue"></a>D.break&amp;continue</h3><h4 id="break"><a href="#break" class="headerlink" title="break:"></a>break:</h4><p>使用switch-case结构或者循环结构中<br>在循环结构中, 一旦执行到break, 就跳出当前循环 .</p><h4 id="continue"><a href="#continue" class="headerlink" title="continue:"></a>continue:</h4><p>使用在循环结构中, 一旦执行到continue, 就跳出当次循环, 继续执行下一次循环.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//break; //程序执行结果:123</span></span><br><span class="line"><span class="keyword">continue</span>;  <span class="comment">//程序执行结果:123567910</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.print(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在嵌套循环中, 使用带标签的break和continue.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">label:<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; <span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">10</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j % <span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//continue;</span></span><br><span class="line"><span class="comment">//break label;</span></span><br><span class="line"><span class="keyword">continue</span> label;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(j);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基本语法1</title>
      <link href="/blog/JavaSE2-1.html"/>
      <url>/blog/JavaSE2-1.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-Java的一些基本语法"><a href="#一-Java的一些基本语法" class="headerlink" title="一.Java的一些基本语法"></a>一.Java的一些基本语法</h1><a id="more"></a><h2 id="1-关键字＆标识符"><a href="#1-关键字＆标识符" class="headerlink" title="1.关键字＆标识符"></a><font color="black">1.关键字＆标识符</font></h2><p>关键字: 被Java语言赋予了特殊含义, 用做专门用途的字符串(单词), <font color="red">关键字全是小写的</font></p><p>保留字: 以后可能用来作为关键字</p><p>标识符: 凡是自己可以起名字的地方都叫标识符</p><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则:"></a>命名规则:</h3><p>&emsp;&emsp;一定要遵守, 不遵守就会报编译的错误</p><p>由26个<font style="color:red;font-weight:bold;">英文字母大小写,0-9, _或 $ </font>组成  数字不可以开头.<br>不可以使用关键字和保留字, 但能包含关键字和保留字.<br>Java中严格区分大小写, 长度无限制.<br>标识符不能包含空格.</p><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范:"></a>命名规范:</h3><p>&emsp;&emsp;不遵守, 也不会出现编译的错误</p><p>包名: 多单词组成时所有字母都小写: xxxyyyzzz<br>类名、接口名: 多单词组成时, 所有单词的首字母大写: XxxYyyZzz<br>变量名、方法名: 多单词组成时, 第一个单词首字母小写, 第二个单词开始每个单词首字母大写: xxxYyyZzz<br>常量名: 所有字母都大写, 多单词时每个单词用下划线连接: XXX_YYY_ZZZ</p><h2 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a><font color="black">2.变量</font></h2><ol><li>Java中变量按照数据类型来分类: <strong>基本数据类型</strong> vs  <strong>引用数据类型</strong>(数组 类 接口)</li></ol><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型:"></a>基本数据类型:</h3><p>​     整型: byte(8 bit,-128~127)  short(-32768~32767)   int(默认类型,-2^31~2^31-1)   long<br>​     浮点型: float double (默认类型)<br>​     <strong>字符型: char（‘ ’）16 bit</strong>    是以十六进制保存的字符,例:char ch = ‘\u0041’;为’A’<br>​     布尔类型:  boolean (只能取值为true 或false, 不能取null)<br>​     String类型(引用数据类型): 值可以为null<br>数据类型    变量名 = 初始化值;<br>​     补充: 按照在类中存在的位置的不同: 成员变量 vs 局部变量<br>​     成员变量在声明时会被默认初始化, 因此可以在声明后直接使用, 而局部变量在使用之前必须先初始化<br>​     声明: long型常量需后缀”l”或”L”,long lo = 123L;<br>​     float类型变量要后缀”f”或”F”,float f = 12.3F;</p><p>2.进制(了解)<br>    十进制  二进制  八进制 十六进制</p><p>二进制: 计算机底层都是用二进制来存储、运算.</p><blockquote><p>二进制 与十进制之间的转换.<br>二进制在底层存储: 正数、负数都是以补码的形式存储的.(原码、反码、补码)<br>四种进制间的转换</p></blockquote><p>3.变量的运算:<br>   ①<strong>自动类型转换</strong>: 容量小的数据类型自动转换为容量大的数据类型转换.<br>    short s = 12;<br>    int i = s + 2;<br>    注意: byte  short char之间做运算, 结果为int型!<br>   ②<strong>强制类型转换</strong>: 是①的逆过程.使用“()”实现强转.</p><h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3.运算符"></a><font color="black">3.运算符</font></h2><p>运算符是一种特殊的符号, 用以表示数据的运算.</p><h3 id="A-算术运算符"><a href="#A-算术运算符" class="headerlink" title="A.算术运算符:"></a>A.算术运算符:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ - /  % ++ -- +</span><br></pre></td></tr></table></figure><p>注意:</p><p>1) /:  int i = 12; i = i / 5;地板除<br>2) %: 取模, 结果的符号与被模数相同<br>3) 前++: 先+1, 后运算     后++: 先运算, 后+1<br>4) +: String字符串与其他数据类型只能做连接运算, 且结果为String类型.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sysout(<span class="string">"*"</span> + <span class="string">'\t'</span> + <span class="string">'*'</span>); <span class="function">vs <span class="title">sysout</span><span class="params">(<span class="string">'*'</span> + <span class="string">'\t'</span> + <span class="string">'*'</span>)</span></span>;结果为<span class="number">93</span></span><br><span class="line"><span class="comment">//sysout为Java的快捷键用法, 先输入sysout, 再按"Alt + /", 即可打出System.out.println();</span></span><br></pre></td></tr></table></figure><h3 id="B-赋值运算符"><a href="#B-赋值运算符" class="headerlink" title="B.赋值运算符:"></a>B.赋值运算符:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=    +=   -=  *=    /=   %=</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">12</span>;</span><br><span class="line">i  = i * <span class="number">5</span>;</span><br><span class="line">i *= <span class="number">5</span>;<span class="comment">//与上一行代码同样的意思</span></span><br><span class="line"><span class="comment">//[特别地]</span></span><br><span class="line"><span class="keyword">short</span> s = <span class="number">10</span>;</span><br><span class="line">s = s + <span class="number">5</span>;<span class="comment">//报编译的异常，s+5会被默认转化为int类型，再赋值给short会出错</span></span><br><span class="line">s = (<span class="keyword">short</span>)(s + <span class="number">5</span>);<span class="comment">//强制类型转换便不会异常</span></span><br><span class="line">s += <span class="number">5</span>;<span class="comment">//相当于, s = s + 5, 但两者并不完全等价, 但是结果不会改变s的数据类型.</span></span><br></pre></td></tr></table></figure><h3 id="C-比较运算符-关系运算符"><a href="#C-比较运算符-关系运算符" class="headerlink" title="C.比较运算符(关系运算符)"></a>C.比较运算符(关系运算符)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==  &gt;   &lt;  &gt;=   &lt;=    <span class="keyword">instanceof</span></span><br></pre></td></tr></table></figure><p>[注意]  区分 ==  与 =  区别.<br>进行比较运算操作以后,返回一个boolean类型的值(true或false)<br>4&gt;=3  表达的是4 &gt; 3或者 4 = 3.结果是true.</p><p>if(i &gt; 1 &amp;&amp; i &lt; 10){  }   不能写为: if(1 &lt; i &lt; 10){}</p><h3 id="D-逻辑运算符-运算符的两端是boolean值"><a href="#D-逻辑运算符-运算符的两端是boolean值" class="headerlink" title="D.逻辑运算符(运算符的两端是boolean值)"></a>D.逻辑运算符(运算符的两端是boolean值)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;  &amp;&amp;  |  ||  ^  !</span><br></pre></td></tr></table></figure><p>[注意]区分&amp;与&amp;&amp;的区别, 以及 | 与 || 的区别<br>      我们使用的时候, 选择 &amp;&amp; , ||  <font color="red">短路与、短路或</font></p><h3 id="E-位运算符-两端是数值类型的数据"><a href="#E-位运算符-两端是数值类型的数据" class="headerlink" title="E.位运算符(两端是数值类型的数据)"></a>E.位运算符(两端是数值类型的数据)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;   &gt;&gt;    &gt;&gt;&gt;(无符号右移)  &amp;  |   ^(异或)  ~(按位取反)</span><br></pre></td></tr></table></figure><p>[例子] 1.如何交换m = 12和n = 5的值<br>           2.将60转换为十六进制输出.</p><h3 id="F-三元运算符"><a href="#F-三元运算符" class="headerlink" title="F.三元运算符"></a>F.三元运算符</h3><p><font color="red">(条件表达式) ? 表达式1 : 表达式2;</font><br>1) 既然是运算符, 一定会返回一个结果, 并且结果的数据类型与表达式1, 2的类型一致<br>2) <strong>表达式1与表达式2的数据类型一致</strong>.<br>3) 使用三元运算符的, 一定可以转换为if-else. 反之不一定成立.<br>4) ?: 可以嵌套使用<br>例子: 获取两个数的较大值; 获取三个数的最大值.</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> max = (i &gt; j) ? i : j;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> max2 = (i &gt; j) ? ((i &gt; k) ? i : k) : (( j &gt; k) ? j : k);</span><br></pre></td></tr></table></figure></div></div>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE概述</title>
      <link href="/blog/JavaSE1-0.html"/>
      <url>/blog/JavaSE1-0.html</url>
      
        <content type="html"><![CDATA[<h1 id="走进Java"><a href="#走进Java" class="headerlink" title="走进Java"></a>走进Java</h1><a id="more"></a><h2 id="一-关于Java"><a href="#一-关于Java" class="headerlink" title="一.关于Java"></a><font color="black">一.关于Java</font></h2><p>①关于Java语言, 其实它很简单, 就是我们人类与计算机交流的语言, 就像人类的语言: 英语、汉语……<br>②Java之父: 詹姆斯·高斯林, 他曾说过, C语言是撑起一切的基石, C语言之父: 丹尼斯·里奇<br>③Java语言由类C、C++等衍生出来, 属于完全面向对象的语言<br>④Java的技术体系平台: JavaSE、JavaEE、JavaME</p><p><img src="imgs\Java\JavaSE图解.png" alt="JavaSE图解"></p><h2 id="二-关于计算机"><a href="#二-关于计算机" class="headerlink" title="二.关于计算机"></a><font color="black">二.关于计算机</font></h2><p>1.计算机软件软件:  系统软件  and  应用软件</p><p>2.人与计算机做交互:  使用计算机语言.<br>        图形化界面(GUI)  vs  命令行方式(CLI): dir  md rd  cd  cd..  cd/  del  exit  echo  content  &gt;temp.txt<br>3.语言的分类:  第一代: 机器语言;  第二代: 汇编语言;  第三代: 高级语言(面向过程  — 面向对象)</p><p><font style="color:red;font-weight:bold;">4.java语言的特性: ①面向对象性 ②健壮性 ③跨平台性(write once,run anywhere)—JVM</font><br>    不同的系统有不同的JVM(Java Virtual Machine即Java虚拟机), 所以要想编写Java程序, 就要在自己的系统上安装JVM等部件. 学习Java, 我们首先要做的, 就是安装JDK环境.</p><h3 id="5-安装JDK及配置系统的path环境变量"><a href="#5-安装JDK及配置系统的path环境变量" class="headerlink" title="5.安装JDK及配置系统的path环境变量"></a>5.安装JDK及配置系统的path环境变量</h3><p>​    1)傻瓜式安装<a href="https://pan.baidu.com/s/1tjiG7KHYKSfdcWDW5Rm9Xw" target="_blank" rel="noopener">JDK</a>(提取码: et1y).<br>​    2)path: window操作系统在执行cmd命令时所要搜寻的路径.</p><p>右键单击此电脑, 之后点击属性, 再点击高级系统设置, 再点击环境变量, 如图:</p><p><img src="imgs\nodejs04.png" alt="nodejs04"></p><p><img src="imgs\nodejs05.png" alt="nodejs05"></p><p>​    我们需要将jdk中bin目录所在的路径: 例如: D:\Program Files\Java\jdk1.8.0_131\bin 保存在path环境变量下.<br>​    3)测试: 在命令行窗口, 任意的文件目录下, 执行javac.exe 或者java.exe都可以调用成功.<br>​    JDK(Java Development Kit, Java语言的软件开发工具包即Java的SDK, Software Development Kit)<br>​    JDK包含JRE(Java Runtime Environment, Java运行时环境), JRE包含JVM和一些常用的Java库类<br>​    &gt;河床好比操作底层, jdk好比是河水, java应用程序好比是船.</p><p><img src="imgs\Java\JDK.png" alt="JDK"></p><h3 id="6-如何编写并运行第一个java程序"><a href="#6-如何编写并运行第一个java程序" class="headerlink" title="6.如何编写并运行第一个java程序"></a>6.如何编写并运行第一个java程序</h3><p>​    [过程]编写—-编译(javac.exe)—-运行(java.exe)<br>1)编写: 每一个java文件都是.java结尾的, 称为源文件[HelloWorld.java], java程序就存在于源文件中</p><p>如下, 第一个Java程序:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line"><span class="comment">//程序的主方法，是程序的入口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"><span class="comment">//要执行的代码</span></span><br><span class="line">System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//假设这是在桌面上的源文件HelloWorld.java中的源代码, 执行过程如下:</span></span><br></pre></td></tr></table></figure><p>①win+R键, 再输入cmd进入命令行模式, 通过cd desktop命令进入桌面<br>②通过javac HelloWorld.java命令编译源文件生成字节码文件<br>③通过java HelloWorld命令解释运行字节码文件, 之后控制台会输出HelloWorld</p><p>注意点：<br>①<strong>Java源文件以“java”为扩展名. 源文件的基本组成部分是类(class),</strong> 如本例中的HelloWorld类.<br>②<strong>一个源文件中最多只能有一个public类</strong>, 其它类的个数不限, 如果源文件包含一个<strong>public类, 则.java文件名必须与该类名一致.</strong><br>③Java应用程序的执行入口是<strong>main()方法</strong>, 它有固定的书写格式: <strong>public static void main(String[] args){}</strong><br>④Java语言严格区分大小写.<br>⑤Java方法由一条条语句构成, 每个语句以“;”结束.<br>⑥大括号都是成对出现的,缺一不可.</p><p>2)编译:  在源文件所在的目录下, 执行javac.exe 源文件名.java;生成一个或多个.class结尾的字节码文件<br>3)运行:  生成的字节码文件通过java.exe解释执行</p><p>7.会调试程序中出现的问题</p><p>8.注释:  ①单行注释 //    ②多行注释  /<em>    </em>/   （多行注释不能够嵌套）<br>              ③文档注释 /*<em>    </em>/        javadoc  -d 文件目录名 -author -version 源文件名.java;</p><p>​    其中文档注释是JAVA特有的<br>9.JDK提供的关于旗下所有的包&amp;类的说明文档: API</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo代码一键复制</title>
      <link href="/blog/copy-code.html"/>
      <url>/blog/copy-code.html</url>
      
        <content type="html"><![CDATA[<p>有时候代码块是真的多啊, 添加一个一键复制功能吧</p><a id="more"></a><h2 id="1-需要的JS文件"><a href="#1-需要的JS文件" class="headerlink" title="1.需要的JS文件"></a>1.需要的JS文件</h2><ul><li><a href="https://pan.baidu.com/s/1e9QsLHh2bV1SR-pDjs0lWA" target="_blank" rel="noopener">clipboard.min.js</a>(提取码: p3xj)</li><li><a href="https://pan.baidu.com/s/1SydF42fBbfXg3pk-rhO5Tw" target="_blank" rel="noopener">clipboard-use.js</a>(提取码: sbsk)</li></ul><p>将以上js文件放到主题的js文件目录下.</p><p>clipboard-use.js:</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params">e, t, a</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* code */</span></span><br><span class="line">    <span class="keyword">var</span> initCopyCode = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> copyHtml = <span class="string">''</span>;</span><br><span class="line">        copyHtml += <span class="string">'&lt;button class="btn-copy" data-clipboard-snippet=""&gt;'</span>;</span><br><span class="line">        copyHtml += <span class="string">'  &lt;i class="fa fa-copy"&gt;&lt;/i&gt;&lt;span&gt;Copy&lt;/span&gt;'</span>;</span><br><span class="line">        copyHtml += <span class="string">'&lt;/button&gt;'</span>;</span><br><span class="line">        $(<span class="string">".highlight .code pre"</span>).before(copyHtml);</span><br><span class="line">        <span class="keyword">var</span> clipboard = <span class="keyword">new</span> ClipboardJS(<span class="string">'.btn-copy'</span>, &#123;</span><br><span class="line">            target: <span class="function"><span class="keyword">function</span>(<span class="params">trigger</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> trigger.nextElementSibling;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        clipboard.on(<span class="string">'success'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//您可以加入成功提示</span></span><br><span class="line">            <span class="built_in">console</span>.info(<span class="string">'Action:'</span>, e.action);</span><br><span class="line">            <span class="built_in">console</span>.info(<span class="string">'Text:'</span>, e.text);</span><br><span class="line">            <span class="built_in">console</span>.info(<span class="string">'Trigger:'</span>, e.trigger);</span><br><span class="line">            success_prompt(COPY_SUCCESS);</span><br><span class="line">            e.clearSelection();</span><br><span class="line">        &#125;);</span><br><span class="line">        clipboard.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//您可以加入失败提示</span></span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">'Action:'</span>, e.action);</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">'Trigger:'</span>, e.trigger);</span><br><span class="line">            fail_prompt(COPY_FAILURE);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    initCopyCode();</span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="built_in">document</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 弹出式提示框，默认1.5秒自动消失</span></span><br><span class="line"><span class="comment">   * @param message 提示信息</span></span><br><span class="line"><span class="comment">   * @param style 提示样式，有alert-success、alert-danger、alert-warning、alert-info</span></span><br><span class="line"><span class="comment">   * @param time 消失时间</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">var</span> prompt = <span class="function"><span class="keyword">function</span> (<span class="params">message, style, time</span>)</span>&#123;</span><br><span class="line">    style = (style === <span class="literal">undefined</span>) ? <span class="string">'alert-success'</span> : style;</span><br><span class="line">    time = (time === <span class="literal">undefined</span>) ? <span class="number">1500</span> : time*<span class="number">1000</span>;</span><br><span class="line">    $(<span class="string">'&lt;div&gt;'</span>)</span><br><span class="line">        .appendTo(<span class="string">'body'</span>)</span><br><span class="line">        .addClass(<span class="string">'alert '</span> + style)</span><br><span class="line">        .html(message)</span><br><span class="line">        .show()</span><br><span class="line">        .delay(time)</span><br><span class="line">        .fadeOut();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 成功提示</span></span><br><span class="line"><span class="keyword">var</span> success_prompt = <span class="function"><span class="keyword">function</span>(<span class="params">message, time</span>)</span>&#123;</span><br><span class="line">    prompt(message, <span class="string">'alert-success'</span>, time);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 失败提示</span></span><br><span class="line"><span class="keyword">var</span> fail_prompt = <span class="function"><span class="keyword">function</span>(<span class="params">message, time</span>)</span>&#123;</span><br><span class="line">    prompt(message, <span class="string">'alert-danger'</span>, time);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 提醒</span></span><br><span class="line"><span class="keyword">var</span> warning_prompt = <span class="function"><span class="keyword">function</span>(<span class="params">message, time</span>)</span>&#123;</span><br><span class="line">    prompt(message, <span class="string">'alert-warning'</span>, time);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 信息提示</span></span><br><span class="line"><span class="keyword">var</span> info_prompt = <span class="function"><span class="keyword">function</span>(<span class="params">message, time</span>)</span>&#123;</span><br><span class="line">    prompt(message, <span class="string">'alert-info'</span>, time);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div><h2 id="2-引入JS文件"><a href="#2-引入JS文件" class="headerlink" title="2.引入JS文件"></a>2.引入JS文件</h2><p>将以上两个JS文件引入到主题每个页面都用的文件里, 一定要输入对你自己的src路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/blog/js/clipboard.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/blog/js/clipboard-use.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-配置样式表"><a href="#3-配置样式表" class="headerlink" title="3.配置样式表"></a>3.配置样式表</h2><p>将下列代码添加到主题的样式表里, 根据自己的div修改</p><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">//代码块复制按钮</span><br><span class="line"><span class="selector-class">.highlight</span>&#123;</span><br><span class="line">    //方便copy代码按钮（btn-copy）的定位</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-copy</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(#fcfcfc,#eee);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d5d5d5</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-moz-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-ms-user-select</span>: none;</span><br><span class="line">    <span class="attribute">user-select</span>: none;</span><br><span class="line">    <span class="attribute">-webkit-appearance</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: opacity .<span class="number">3s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">-o-transition</span>: opacity .<span class="number">3s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">transition</span>: opacity .<span class="number">3s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-copy</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.highlight</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.btn-copy</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">//复制提示, 成功or失败</span><br><span class="line"><span class="selector-class">.alert</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%);</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">99999</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">24px</span> <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: @border_radius_code_block;</span><br><span class="line">    <span class="attribute">box-shadow</span>: @boxshadow_card_normal;</span><br><span class="line">    <span class="attribute">font-family</span>: @fontfamily_base;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">font-size</span>: @fontsize_base;</span><br><span class="line">    &amp;.alert-success &#123;</span><br><span class="line">        <span class="selector-tag">color</span>: <span class="selector-id">#ffffff</span>;</span><br><span class="line">        <span class="selector-tag">background-color</span>: <span class="selector-id">#1BC3FB</span>;</span><br><span class="line">        <span class="selector-tag">border-color</span>: <span class="selector-id">#d6e9c6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-class">.alert-info</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#31708f</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#d9edf7</span>;</span><br><span class="line">        <span class="attribute">border-color</span>: <span class="number">#bce8f1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-class">.alert-warning</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#8a6d3b</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#fcf8e3</span>;</span><br><span class="line">        <span class="attribute">border-color</span>: <span class="number">#faebcc</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-class">.alert-danger</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#a94442</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#f2dede</span>;</span><br><span class="line">        <span class="attribute">border-color</span>: <span class="number">#ebccd1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo为主题添加代码隐藏功能</title>
      <link href="/blog/hide-code.html"/>
      <url>/blog/hide-code.html</url>
      
        <content type="html"><![CDATA[<p>写博客有时候需要添加的代码真的很多, 而我们又不想让它显示在网页上.</p><p>添加一个代码隐藏功能吧!</p><a id="more"></a><p>&emsp;&emsp;首先, 你要明白不论添加一些什么功能, 无非是添加一些js插件实现.</p><h2 id="1-自定义内置标签"><a href="#1-自定义内置标签" class="headerlink" title="1.自定义内置标签"></a>1.自定义内置标签</h2><p>&emsp;&emsp;通过查看自定义标签的<a href="https://hexo.io/api/" target="_blank" rel="noopener">API</a>, 发现主题自带标签脚本都会存放在<code>themes/xxx/scripts/tag/xxx.js</code>中</p><p>首先, 我们要注册一个自己的代码隐藏内置标签fold.</p><p>新建<a href="https://pan.baidu.com/s/1MPnkw17z_3uWIsEu0nfWPg" target="_blank" rel="noopener">fold.js</a>(提取码: 0khu)文件, 路径(没有相应目录的自建)如图:</p><p><img src="imgs\fold.png" alt="fold"></p><p>内容:<div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* global hexo */</span></span><br><span class="line"><span class="comment">// Usage: &#123;% fold ???? %&#125; Something &#123;% endfold %&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fold</span> (<span class="params">args, content</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> text = args[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(!text) text = <span class="string">"点击显/隐"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;div&gt;&lt;div class="fold_hider"&gt;&lt;div class="close hider_title"&gt;'</span> + text + <span class="string">'&lt;/div&gt;&lt;/div&gt;&lt;div class="fold"&gt;\n'</span> + hexo.render.renderSync(&#123;<span class="attr">text</span>: content, <span class="attr">engine</span>: <span class="string">'markdown'</span>&#125;) + <span class="string">'\n&lt;/div&gt;&lt;/div&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line">hexo.extend.tag.register(<span class="string">'fold'</span>, fold, &#123;<span class="attr">ends</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure></div></div></p><h2 id="2-消除渲染undefined问题"><a href="#2-消除渲染undefined问题" class="headerlink" title="2.消除渲染undefined问题"></a>2.消除渲染undefined问题</h2><p>在scripts目录下添加一个<a href="https://pan.baidu.com/s/1-S1YsOh7B0G-QpQDeZ4iOQ" target="_blank" rel="noopener">tags.js</a>(提取码: giom)文件, 内容:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">修复在 fold 标签里写 ```代码块```，最终会被渲染成 undefined 的问题</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> rEscapeContent = <span class="regexp">/&lt;escape(?:[^&gt;]*)&gt;([\s\S]*?)&lt;\/escape&gt;/g</span>;</span><br><span class="line"><span class="keyword">const</span> placeholder = <span class="string">'\uFFFD'</span>;</span><br><span class="line"><span class="keyword">const</span> rPlaceholder = <span class="regexp">/(?:&lt;|&amp;lt;)\!--\uFFFD(\d+)--(?:&gt;|&amp;gt;)/g</span>;</span><br><span class="line"><span class="keyword">const</span> cache = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escapeContent</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;!--'</span> + placeholder + (cache.push(str) - <span class="number">1</span>) + <span class="string">'--&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line">hexo.extend.filter.register(<span class="string">'before_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  data.content = data.content.replace(rEscapeContent, <span class="function"><span class="keyword">function</span>(<span class="params">match, content</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> escapeContent(content);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  data.content = data.content.replace(rPlaceholder, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cache[<span class="built_in">arguments</span>[<span class="number">1</span>]];</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-设置默认折叠代码"><a href="#3-设置默认折叠代码" class="headerlink" title="3.设置默认折叠代码"></a>3.设置默认折叠代码</h2><p>将下列代码复制到你的主题的JS(每个页面都会加载的JS)文件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="built_in">document</span>).on(<span class="string">'click'</span>, <span class="string">'.fold_hider'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">'&gt;.fold'</span>, <span class="keyword">this</span>.parentNode).slideToggle();</span><br><span class="line">        $(<span class="string">'&gt;:first'</span>, <span class="keyword">this</span>).toggleClass(<span class="string">'open'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//默认情况下折叠</span></span><br><span class="line">$(<span class="string">"div.fold"</span>).css(<span class="string">"display"</span>, <span class="string">"none"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-配置fold显示样式"><a href="#4-配置fold显示样式" class="headerlink" title="4.配置fold显示样式"></a>4.配置fold显示样式</h2><p>将下述代码复制到你的主题样式文件里:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hider_title</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft Yahei"</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.close</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"▼"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.open</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"▲"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Hexo和GitHub搭建一个静态博客</title>
      <link href="/blog/Hexo2.html"/>
      <url>/blog/Hexo2.html</url>
      
        <content type="html"><![CDATA[<p>没有服务器也可以哦</p><p>用github pages与Hexo搭建免费的个人博客</p><a id="more"></a><p>之前讲过了利用gitee搭建静态博客, 现在说一下利用GitHub搭建博客</p><h2 id="1-gitee与GitHub比较"><a href="#1-gitee与GitHub比较" class="headerlink" title="1.gitee与GitHub比较"></a>1.gitee与GitHub比较</h2><blockquote><p>gitee是国内的仓库, 访问速度会比GitHub快点, 也比GitHub稳定一点. 但都可以利用CDN来加速访问, 之后会提到如何利用CDN加速.</p><p>GitHub可以使用自己的域名, 自定义自己的博客url, 这项服务是免费的. gitee也可以, 但是这项服务需要收费.</p></blockquote><h2 id="2-前期准备"><a href="#2-前期准备" class="headerlink" title="2.前期准备"></a>2.前期准备</h2><ul><li>有一个<a href="https://github.com" target="_blank" rel="noopener">github</a>账号, 没有就先去注册一个</li><li>本地安装<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node.js</a>,  <a href="npm.html">配置教程</a></li><li>本地安装<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git for windows</a></li></ul><h2 id="3-创建Github仓库-开启pages服务"><a href="#3-创建Github仓库-开启pages服务" class="headerlink" title="3.创建Github仓库, 开启pages服务"></a>3.创建Github仓库, 开启pages服务</h2><p>点击右上角的加号, 再点击New repository创建仓库; 之后进入仓库; 点击setting, 向下滚动滚轮找到Github Pages, 在Source下面选择master branch开启服务.如图:</p><p><img src="imgs\github.png" alt="github"></p><p><img src="imgs\github02.png" alt="github02"></p><p><img src="imgs\github03.png" alt="github03"></p><h2 id="4-初始化博客并上传"><a href="#4-初始化博客并上传" class="headerlink" title="4.初始化博客并上传"></a>4.初始化博客并上传</h2><h3 id="①新建空目录"><a href="#①新建空目录" class="headerlink" title="①新建空目录"></a>①新建空目录</h3><p>如图:</p><p><img src="imgs\github04.png" alt="github04"></p><h3 id="②安装插件"><a href="#②安装插件" class="headerlink" title="②安装插件"></a>②安装插件</h3><p>打开命令行, 依次执行下列命令(路径改为你自己的). 执行完hexo s后, 访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 便是本地博客.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f:</span><br><span class="line">cd test</span><br><span class="line">npm install hexo-cli -g #之前没安装hexo的执行此命令</span><br><span class="line">hexo init</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"><span class="meta">#</span>清理项目&amp;&amp;生成项目文件&amp;&amp;本地运行项目</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><h3 id="③配置全局-config-yml文件"><a href="#③配置全局-config-yml文件" class="headerlink" title="③配置全局_config.yml文件"></a>③配置全局_config.yml文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">title: CRainyDay&apos;s Blog</span><br><span class="line">author: CRainyDay</span><br><span class="line">language: zh-CN</span><br><span class="line">#url</span><br><span class="line">url: https://crainyday.github.io/test #这里填写GitHub Pages生成的url</span><br><span class="line">root: /test #博客根目录</span><br><span class="line">theme: landscape #网站应用的主题名字,可以换为你喜欢的主题</span><br><span class="line"></span><br><span class="line">#与hexo d相关的配置</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/用户名/仓库名.git #你的GitHub仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="④上传到GitHub"><a href="#④上传到GitHub" class="headerlink" title="④上传到GitHub"></a>④上传到GitHub</h3><p>接着上述命令执行hexo d命令. 第一次执行该命令, 期间需要输入GitHub的账号密码. 上传之后, 更新一下Pages等一会访问给出的url, 便可以进入你的博客.</p><h2 id="5-自定义博客url"><a href="#5-自定义博客url" class="headerlink" title="5.自定义博客url"></a>5.自定义博客url</h2><h3 id="①创建CNAME文件"><a href="#①创建CNAME文件" class="headerlink" title="①创建CNAME文件"></a>①创建CNAME文件</h3><p>在本地博客根目录的source目录下, 新建CNAME文件(无后缀名). 内容为你的二级域名或其他</p><p><img src="imgs\github05.png" alt="github05"></p><h3 id="②解析域名"><a href="#②解析域名" class="headerlink" title="②解析域名"></a>②解析域名</h3><p>选择CNAME解析, 添加二级域名, 记录值为GitHub Pages提供的. 其实就是 “你的用户名.github.io”</p><p><img src="imgs\github07.png" alt="github07"></p><h3 id="③修改全局-config-yml文件"><a href="#③修改全局-config-yml文件" class="headerlink" title="③修改全局_config.yml文件"></a>③修改全局_config.yml文件</h3><p>只需修改博客的url和网站根目录即可.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url: http://test.rainyday.top</span><br><span class="line">root: /</span><br></pre></td></tr></table></figure><h3 id="④更新GitHub-Pages"><a href="#④更新GitHub-Pages" class="headerlink" title="④更新GitHub Pages"></a>④更新GitHub Pages</h3><p><img src="imgs\github06.png" alt="github06"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPS和shadowsocks搭建VPN</title>
      <link href="/blog/VPN.html"/>
      <url>/blog/VPN.html</url>
      
        <content type="html"><![CDATA[<p>用VPS和shadowsocks搭建VPN, 手机端也能用的VPN</p><a id="more"></a><h2 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1.前期准备"></a>1.前期准备</h2><ul><li>购买一个国外的VPS, 建议CentOS7系统</li><li>安装<a href="https://xshell.en.softonic.com/download" target="_blank" rel="noopener">XShell</a>, 用来远程连接你的VPS</li><li>安装<a href="https://www.netsarang.com/zh/xftp/" target="_blank" rel="noopener">XFTP</a>, 用来向你的VPS传输文件</li></ul><h2 id="2-安装-amp-配置shadowsocks"><a href="#2-安装-amp-配置shadowsocks" class="headerlink" title="2.安装&amp;配置shadowsocks"></a>2.安装&amp;配置shadowsocks</h2><p>&emsp;&emsp;启动XShell, 输入主机, 点击用户身份验证, 输入用户名:root, 和你的root密码</p><p><img src="imgs\shell.png" alt="shell"></p><h3 id="A-先用shell命令安装pip"><a href="#A-先用shell命令安装pip" class="headerlink" title="A.先用shell命令安装pip"></a>A.先用shell命令安装pip</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>有yum可以用yum安装pip</span><br><span class="line">yum install python-setuptools</span><br><span class="line">easy_install pip</span><br><span class="line"><span class="meta">#</span>没有的用下面命令安装pip, 没有python需要先安装python</span><br><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">python get-pip.py</span><br><span class="line"><span class="meta">#</span>安装完pip后, 用pip安装shadowsocks</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><h3 id="B-配置VPS上的shadowsocks"><a href="#B-配置VPS上的shadowsocks" class="headerlink" title="B.配置VPS上的shadowsocks"></a>B.配置VPS上的shadowsocks</h3><p>&emsp;&emsp;启动XFTP, 同XShell连接远程VPS, 将新建的shadowsocks.json文件, 上传到/etc目录下</p><p><strong><a href="https://pan.baidu.com/s/1O2Ay5j35HfugFqrkpjmPdw" target="_blank" rel="noopener">shadowsocks.json</a>(提取码: 4k4l,下载的话请重命名)文件要用UTF-8编码</strong>, 内容如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"server"</span>:<span class="string">"你的VPSIPv4地址"</span>,</span><br><span class="line">  <span class="attr">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">  <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">  <span class="attr">"port_password"</span>:&#123;</span><br><span class="line">   <span class="attr">"443"</span>:<span class="string">"自己随便设置一个连接这个VPN的密码"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">  <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">  <span class="attr">"fast_open"</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-开启shadowsocks服务"><a href="#C-开启shadowsocks服务" class="headerlink" title="C.开启shadowsocks服务"></a>C.开启shadowsocks服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>用以下命令之一关闭防火墙</span><br><span class="line">service iptables stop</span><br><span class="line">service firewalld stop</span><br><span class="line"><span class="meta">#</span>禁止firewall开机启动</span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line"><span class="meta">#</span>加载shadowsocks配置</span><br><span class="line">ssserver -c /etc/shadowsocks.json</span><br><span class="line"><span class="meta">#</span>开启shadowsocks服务</span><br><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line"><span class="meta">#</span>关闭shadowsocks服务</span><br><span class="line">ssserver -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure><h2 id="3-本地配置shadowsocks"><a href="#3-本地配置shadowsocks" class="headerlink" title="3.本地配置shadowsocks"></a>3.本地配置shadowsocks</h2><ul><li><a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">Android</a></li><li><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">Windows</a></li><li>IPhone(<a href="https://pan.baidu.com/s/1-YNaEjIsVk8IKBsJ07YEOQ" target="_blank" rel="noopener">百度网盘</a>提取码: lagp, 链接失效请向博主索取)</li></ul><h3 id="A-Windows配置"><a href="#A-Windows配置" class="headerlink" title="A.Windows配置"></a>A.Windows配置</h3><p>下载解压文件, 运行exe文件, 如图配置:</p><p><img src="imgs\conf1.png" alt="conf1"></p><p>右键点击状态栏中的本软件, 再点击”启用系统代理”即开启VPN</p><p><img src="imgs\conf2.png" alt="conf2"></p><h3 id="B-Android配置-IPhone一样"><a href="#B-Android配置-IPhone一样" class="headerlink" title="B.Android配置(IPhone一样)"></a>B.Android配置(IPhone一样)</h3><p><img src="imgs\conf3.png" alt="conf3"></p>]]></content>
      
      
      
        <tags>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows上配置NodeJS和npm</title>
      <link href="/blog/NodeJS.html"/>
      <url>/blog/NodeJS.html</url>
      
        <content type="html"><![CDATA[<p>本文主要讲如何在windows上配置NodeJS和npm</p><p>用github pages或gitee pages(中国的github)与Hexo搭建免费的个人博客</p><a id="more"></a><h2 id="1-前期了解"><a href="#1-前期了解" class="headerlink" title="1.前期了解"></a>1.前期了解</h2><blockquote><p>Node.js 是一个基于 Chrome v8 引擎的 JS 运行环境. Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型, 使其轻量又高效. Node.js 使用包管理器 npm来管理所有模块的安装、配置、删除等操作, 使用起来非常方便, 但想配置好npm的使用环境稍微有点复杂.</p></blockquote><h2 id="2-本地安装Node-js"><a href="#2-本地安装Node-js" class="headerlink" title="2.本地安装Node.js"></a>2.本地安装Node.js</h2><p>进入<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">NodeJS</a>官网下载, 我们这里选择下载LTS版本的, LTS代表长期支持版本, 新手建议使用这个版本, 因为这个版本使用的人最多, 出问题百度一般都能找到解决方案.</p><p><img src="imgs\nodejs01.png" alt="nodejs01"></p><p>下载完成后傻瓜安装就好, 可以选择软件安装目录, 建议不要安在C盘. 安装到这一步(如下图)时注意, 这一步是选择安装哪些模块, 默认是全部安装, 对于新手来说建议全部安装. 点开那个add path选项前面的+号, 会看到, 把NodeJS和NPM这两个模块的命令路径添加到系统路径里, 这对我们来说就非常方便了. 之后点击next继续下一步, 然后确认信息, 点击Install开始安装.</p><p><img src="imgs\nodejs02.png" alt="nodejs02"></p><h2 id="3-测试是否安装成功"><a href="#3-测试是否安装成功" class="headerlink" title="3.测试是否安装成功"></a>3.测试是否安装成功</h2><p>按下键盘的windows+R键, 输入cmd, 回车, 之后就打开了命令行, 依次输入下列命令.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>如果正确输出版本号(如下图), 说明我们的NodeJS和NPM就安装好. 若没有成功, 需要手动配置系统path</p><p><img src="imgs\nodejs03.png" alt="nodejs03"></p><h2 id="4-配置node和npm到系统path"><a href="#4-配置node和npm到系统path" class="headerlink" title="4.配置node和npm到系统path"></a>4.配置node和npm到系统path</h2><p>若步骤3测试失败, 请看此步骤, 否则跳过.</p><p>①右键单击此电脑, 之后点击属性(如图)</p><p><img src="imgs\nodejs04.png" alt="nodejs04"></p><p>②之后, 依次点击”高级系统设置”、”系统变量”, 将你的NodeJS的安装目录(例:D:\Program Files\nodejs)添加到系统path里面. 如图</p><p><img src="imgs\nodejs05.png" alt="nodejs05"></p><p>③之后, 进行步骤3测试就能输出版本号了.</p><h2 id="5-修改npm的缓存目录和全局目录路径"><a href="#5-修改npm的缓存目录和全局目录路径" class="headerlink" title="5.修改npm的缓存目录和全局目录路径"></a>5.修改npm的缓存目录和全局目录路径</h2><p>在你的NodeJS的安装目录下, 新建两个空目录node_cache和node_global, 如图:</p><p><img src="imgs\nodejs06.png" alt="nodejs06"></p><p>之后, 打开命令行, 执行以下两个命令(命令中的路径改为你的路径), 这就将npm的全局模块目录和缓存目录配置到我们刚才新建的那两个空目录.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix "D:\Program Files\nodejs\node_global"</span><br><span class="line">npm config set cache "D:\Program Files\nodejs\node_cache"</span><br></pre></td></tr></table></figure><p>由于之前修改了nodejs的默认模块安装路径, 必须修改nodejs默认的模块调用路径, 打开你的电脑的”系统变量”(和步骤4中一样), 在用户变量或系统变量的path中找到以”npm”结尾的字符串, 将其改为”D:\Program Files\nodejs\node_global”(路径改为你的), 若没找到, 直接在系统变量的path里添加一项, 内容为”D:\Program Files\nodejs\node_global”(路径改为你的).</p><p>之后, 依次输入命令如下, 有输出结果如图(则配置正确).</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install cluster -g</span><br><span class="line">node</span><br><span class="line">require('cluster')</span><br></pre></td></tr></table></figure><p><img src="imgs\nodejs07.png" alt="nodejs07"></p><h2 id="6-修改npm模块下载站点"><a href="#6-修改npm模块下载站点" class="headerlink" title="6.修改npm模块下载站点"></a>6.修改npm模块下载站点</h2><p>将npm的模块下载仓库从默认的国外站点改为国内的站点, 这样下载模块的速度才能比较快, 只需要一个命令即可. 其中registry_url指的是国内提供的一些npm仓库地址, 常用的有:</p><p><a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p><p><a href="http://r.cnpmjs.org/" target="_blank" rel="noopener">http://r.cnpmjs.org/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=registry_url</span><br></pre></td></tr></table></figure><p>你也可以选择不改, 但建议改一下, 毕竟这样下载速度很快.</p>]]></content>
      
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Hexo和Gitee搭建一个静态博客</title>
      <link href="/blog/Hexo.html"/>
      <url>/blog/Hexo.html</url>
      
        <content type="html"><![CDATA[<p>没有服务器也可以哦</p><p>用gitee pages与Hexo搭建免费的个人博客</p><a id="more"></a><p>本文主要讲解gitee上搭建, 之后会讲github上的搭建.</p><h2 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1.前期准备"></a>1.前期准备</h2><ul><li>有一个<a href="https://gitee.com/" target="_blank" rel="noopener">gitee</a>账号, 没有就先去注册一个</li><li>本地安装<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node.js</a>,  <a href="npm.html">配置教程</a></li><li>本地安装<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git for windows</a>, 可根据系统选择, 本文按照windows讲解.</li></ul><h2 id="2-创建gitee仓库开启pages服务"><a href="#2-创建gitee仓库开启pages服务" class="headerlink" title="2.创建gitee仓库开启pages服务"></a>2.创建gitee仓库开启pages服务</h2><p>&emsp;&emsp;先创建仓库, 点击右上角的加号; 再进入仓库, 开启pages服务, 如图:</p><p><img src="imgs\gitee.png" alt="gitee"></p><p><img src="imgs\pages.png" alt="pages"></p><font style="color:red;font-weight:bold;font-size:1.5em;">注意: !!!每次用hexo d提交代码后, 都需要更新一下pages服务, 然后过几秒再进入你的博客!!!其实不更新也行, 但可能不会出现你预期的效果</font><h2 id="3-Hexo的安装与使用"><a href="#3-Hexo的安装与使用" class="headerlink" title="3.Hexo的安装与使用"></a>3.Hexo的安装与使用</h2><p>&emsp;&emsp;Hexo是一个很常用的博客发布工具, 支持markdown格式(推荐一款<a href="https://www.typora.io/#windows" target="_blank" rel="noopener">md编译器</a>), hexo有很多插件和主题.</p><p>&emsp;&emsp;一定要配置好系统的环境变量, 才能用npm和hexo命令, 若不能用请看<a href="npm.html">配置教程</a></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#全程在博客目录下进行, 先新建一个空文件夹(例:F:/Hexo), 再<span class="built_in">cd</span>进入该目录</span><br><span class="line">#安装hexo</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">#用hexo新建项目, 生成站点</span><br><span class="line">hexo init</span><br><span class="line">#清理缓存&amp;&amp;生成项目文件&amp;&amp;本地运行项目</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s#需要先安装hexo-server插件,才能hexo s</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;执行到这里, 如果前面过程中没有错误, 就会在本地成功启用Hexo博客站点, 通过<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>访问本地博客站点, 如图:</p><p><img src="imgs\hexo.png" alt="hexo"></p><p>&emsp;&emsp;执行完hexo init命令, 生成的Hexo的目录结构如图:</p><p><img src="imgs\目录.png" alt="目录"></p><p>&emsp;&emsp;若想要将本地的博客文件push到gitee仓库, 需要先配置_config.yml全局配置文件, 再进行步骤4配置git相关信息, 最后才能执行下列命令将本地博客上传到远程仓库.</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#发布项目到远程</span><br><span class="line">hexo d#需要hexo-deployer-git插件,配置完一些git的相关配置才能上传</span><br><span class="line">#生成页面</span><br><span class="line">hexo new page "xxx"</span><br><span class="line">#生成新文章</span><br><span class="line">hexo new "xxx"</span><br><span class="line">#安装插件</span><br><span class="line">npm install xxx --save</span><br><span class="line">#卸载插件</span><br><span class="line">npm unstall xxx</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;以上命令既可以用Windows的cmd来完成, 也可以用git bash来完成, 但有的命令cmd执行会有一些问题, 建议全部使用git bash来执行. 之后会提到git bash的使用</p><h3 id="根目录-config-yml全局配置文件"><a href="#根目录-config-yml全局配置文件" class="headerlink" title="根目录_config.yml全局配置文件"></a><font color="black">根目录_config.yml全局配置文件</font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">title: CRainyDay&apos;s Blog</span><br><span class="line">author: CRainyDay</span><br><span class="line">language: zh-CN</span><br><span class="line">#url</span><br><span class="line">url: http://crainyday.gitee.io/blog #这里填写gitee pages生成的url</span><br><span class="line">root: /blog #博客根目录</span><br><span class="line">theme: landscape #网站应用的主题名字,可以换为你喜欢的主题</span><br><span class="line">#与hexo d相关的配置</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://gitee.com/用户名/仓库名.git #你的gitee仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><font style="color:red;font-weight:bold;font-size:1.5em;">注意: 配置文件中每个 : 后要有一个英文的空格</font><p>每个主题相应的目录下也有主题的_config.yml配置文件</p><h2 id="4-git的使用"><a href="#4-git的使用" class="headerlink" title="4.git的使用"></a>4.git的使用</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#需要在你的博客根目录下右键运行Git Bash Here</span><br><span class="line">git config --global user.name "你的gitee用户名"</span><br><span class="line">git config --global user.email "你的gitee绑定的邮箱地址"</span><br><span class="line">git init</span><br><span class="line">git remote add origin &lt;你的仓库地址&gt;</span><br><span class="line">#以下命令这里用不到, 可以了解一下</span><br><span class="line">git clone &lt;想要克隆的项目地址&gt;</span><br><span class="line">git pull origin master#拉取代码</span><br><span class="line">git add .</span><br><span class="line">git commit -m "提交信息"</span><br><span class="line">git push origin master#提交代码</span><br></pre></td></tr></table></figure><h2 id="5-上传到gitee仓库"><a href="#5-上传到gitee仓库" class="headerlink" title="5.上传到gitee仓库"></a>5.上传到gitee仓库</h2><p>在你的本地博客根目录下, 右键运行Git Bash Here, 输入hexo d命令上传, 第一次上传期间需要输入你的gitee账号密码</p><p>注意: hexo d命令必须安装hexo-deployer-git插件</p><p>上传之后别忘了更新一下pages服务, 其实不更新也可以, 但是有时会出一些错误.</p><p>之后访问你开启pages服务时给你的url就可以了, 那便是你的博客地址.</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Gitee </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
