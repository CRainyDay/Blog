{"meta":{"title":"CRainyDay","subtitle":null,"description":null,"author":"CRainyDay","url":"http://crainyday.gitee.io/blog","root":"/blog/"},"pages":[{"title":"404 Not Found","date":"2019-03-15T10:48:09.000Z","updated":"2019-04-04T04:50:15.402Z","comments":true,"path":"404.html","permalink":"http://crainyday.gitee.io/blog/404.html","excerpt":"","text":"404 Not Found很抱歉，您访问的页面不存在可能是输入地址有误或该地址已被删除"},{"title":"想告诉我点什么呢?","date":"2019-03-16T04:46:38.000Z","updated":"2019-03-23T08:52:52.333Z","comments":true,"path":"bbs/index.html","permalink":"http://crainyday.gitee.io/blog/bbs/index.html","excerpt":"","text":"留下点什么吧!!!"},{"title":"所有分类","date":"2019-03-15T10:45:49.000Z","updated":"2019-04-04T04:27:30.176Z","comments":true,"path":"categories/index.html","permalink":"http://crainyday.gitee.io/blog/categories/index.html","excerpt":"","text":""},{"title":"My Friends","date":"2019-03-15T10:46:15.000Z","updated":"2019-04-04T04:37:49.168Z","comments":true,"path":"friends/index.html","permalink":"http://crainyday.gitee.io/blog/friends/index.html","excerpt":"","text":"背景音乐《You》, 这首歌曲名字之所以叫《You》, 相信很多人能听出歌曲里的情感, 平静孤寂的调子起头, 两个人分开之后的沉寂 颓废, 慢慢的音阶起伏, 我意识到不能这样下去, 我开始改变现状, 变得积极. 到高潮部分 我不在颓废, 我找到新的目标 我迎着太阳前进. 我想这就是You的含义, 你是我的一段过去. 欢迎互相加友链 名称： CRainyDay头像： https://wx.qlogo.cn/mmopen/vi_32/mr8ULapRSZZTmtMegVYHWcSGuHfhZ9Hql6j4RcV01gdx6evZDEf9icaibBbggEIibqdfaAAVHbBaVOFfibmPtcgJuQ/132网址： http://crainyday.gitee.io/blog/标签： Java PHP 前端"},{"title":"所有标签","date":"2019-03-15T10:46:02.000Z","updated":"2019-03-15T10:47:59.227Z","comments":true,"path":"tags/index.html","permalink":"http://crainyday.gitee.io/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"JSDOM基础查询","slug":"JSDOM1-1","date":"2019-04-05T08:27:48.000Z","updated":"2019-04-05T16:43:27.577Z","comments":true,"path":"JSDOM1-1.html","link":"","permalink":"http://crainyday.gitee.io/blog/JSDOM1-1.html","excerpt":"JS的DOM基础查询","text":"JS的DOM基础查询 一.获取元素节点元素节点, 即HTML标签对象 DOM(document)对象的方法: 方法 描述 getElementById() 返回对拥有指定 id 的第一个对象的引用 getElementsByName() 返回带有指定name属性的对象集合 getElementsByTagName() 返回带有指定标签名的对象集合 write() 向文档写 HTML 表达式 或 JavaScript 代码 writeln() 等同于 write() 方法, 不同的是在每个表达式之后写一个换行符 通过例子, 看一下获取元素节点的三个DOM方法 样式表: 点击显/隐内容 1234567891011121314151617181920212223242526272829303132333435363738@CHARSET \"UTF-8\";body &#123; width: 800px; margin-left: auto; margin-right: auto;&#125;button &#123; width: 300px; margin-bottom: 10px;&#125;#btnList &#123; float:left;&#125;#total&#123; width: 450px; float:left;&#125;ul&#123; list-style-type: none; margin: 0px; padding: 0px;&#125;.inner li&#123; border-style: solid; border-width: 1px; padding: 5px; margin: 5px; background-color: #99ff99; float:left;&#125;.inner&#123; width:400px; border-style: solid; border-width: 1px; margin-bottom: 10px; padding: 10px; float: left;&#125; html的body: 点击显/隐内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;body&gt; &lt;div id=\"total\"&gt; &lt;div class=\"inner\"&gt; &lt;p&gt;你喜欢哪个城市?&lt;/p&gt; &lt;ul id=\"city\"&gt; &lt;li id=\"bj\"&gt;北京&lt;/li&gt; &lt;li&gt;上海&lt;/li&gt; &lt;li&gt;东京&lt;/li&gt; &lt;li&gt;首尔&lt;/li&gt; &lt;/ul&gt; &lt;br /&gt;&lt;br /&gt; &lt;p&gt;你喜欢哪款单机游戏?&lt;/p&gt; &lt;ul id=\"game\"&gt; &lt;li id=\"rl\"&gt;红警&lt;/li&gt; &lt;li&gt;实况&lt;/li&gt; &lt;li&gt;极品飞车&lt;/li&gt; &lt;li&gt;魔兽&lt;/li&gt; &lt;/ul&gt; &lt;br /&gt;&lt;br /&gt; &lt;p&gt;你手机的操作系统是?&lt;/p&gt; &lt;ul id=\"phone\"&gt; &lt;li&gt;IOS&lt;/li&gt; &lt;li id=\"android\"&gt;Android&lt;/li&gt; &lt;li&gt;Windows Phone&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=\"inner\"&gt; gender: &lt;input class=\"hello\" type=\"radio\" name=\"gender\" value=\"male\" /&gt; Male &lt;input class=\"hello\" type=\"radio\" name=\"gender\" value=\"female\" /&gt; Female &lt;br /&gt;&lt;br /&gt; name: &lt;input type=\"text\" name=\"name\" id=\"username\" value=\"abcde\" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=\"btnList\"&gt; &lt;div&gt;&lt;button id=\"btn01\"&gt;查找#bj节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=\"btn02\"&gt;查找所有li节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=\"btn03\"&gt;查找name=gender的所有节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=\"btn04\"&gt;查找#city下所有li节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=\"btn05\"&gt;返回#city的所有子节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=\"btn06\"&gt;返回#phone的第一个子节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=\"btn07\"&gt;返回#bj的父节点&lt;/button&gt;&lt;/div&gt; &lt;div&gt;&lt;button id=\"btn08\"&gt;返回#android的前一个兄弟节点&lt;/button&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 1.getElementById12345678910window.onload = function() &#123; //为id为btn01的按钮绑定一个单击响应函数 var btn01 = document.getElementById(\"btn01\"); btn01.onclick = function() &#123; //查找id为bj的节点 var bj = document.getElementById(\"bj\"); //innerHTML 通过这个属性可以获取到元素内部的html代码 alert(bj.innerHTML); &#125;;&#125; 2.getElementsByTagName1234567891011121314window.onload = function() &#123; //为id为btn02的按钮绑定一个单击响应函数 var btn02 = document.getElementById(\"btn02\"); btn02.onclick = function() &#123; //查找所有li节点 //getElementsByTagName()可以根据标签名来获取一组元素节点对象 //这个方法会给我们返回一个类数组对象,所有查询到的元素都会封装到对象中 //即使查询到的元素只有一个,也会封装到数组中返回 var lis = document.getElementsByTagName(\"li\"); for(var i = 0; i &lt; lis.length; i++) &#123; alert(lis[i].innerHTML); &#125; &#125;;&#125; 3.getElementsByName1234567891011121314151617181920212223window.onload = function() &#123; //为id为btn03的按钮绑定一个单击响应函数 var btn03 = document.getElementById(\"btn03\"); btn03.onclick = function() &#123; //查找name属性,值为gender的所有节点 var inputs = document.getElementsByName(\"gender\"); for(var i = 0; i &lt; inputs.length; i++) &#123; /* innerHTML用于获取元素内部的HTML代码的 * 对于自结束标签,这个属性没有意义 */ /* 如果需要读取自结束标签的属性 * 直接使用 元素.属性名 * 例: 元素.id 元素.name 元素.value * 注意: class属性不能采用这种方式 * 读取class属性时需要使用 元素.className */ var str = \"class=\\\"\"+inputs[i].className+ \"\\\" type=\\\"\"+inputs[i].type+\"\\\" name=\\\"\"+ inputs[i].name+\"\\\" value=\\\"\"+inputs[i].value+\"\\\"\"; alert(str); &#125; &#125;;&#125; 二.获取元素节点的子节点通过具体的元素节点调用: 方法或属性 简介 getElementsByTagName() 返回当前节点的指定标签名的所有后代节点 childNodes属性 表示当前节点的所有子节点(包括文本节点) children属性 表示当前节点的所有子元素(即HTML标签) firstChild属性 表示当前节点的第一个子节点 lastChild属性 表示当前节点的最后一个子节点 1.获取某个元素的所有指定节点接着上述的练习: 123456789101112131415window.onload = function() &#123; //为id为btn04的按钮绑定一个单击响应函数 var btn04 = document.getElementById(\"btn04\"); btn04.onclick = function() &#123; //查找#city下所有li节点 //获取id为city的元素 var city = document.getElementById(\"city\"); //获取city下的所有li元素 var citys = city.getElementsByTagName(\"li\"); for(var i = 0; i &lt; citys.length; i++) &#123; var str = citys[i].innerHTML; alert(str); &#125; &#125;;&#125; 2.childNodes属性childNodes, 这个属性会返回节点的所有子节点, 包括文本节点(IE8+,空白文本也算) children, 这个属性会返回节点的所有子元素(即HTML标签) 12345678910111213141516171819window.onload = function() &#123; //为id为btn05的按钮绑定一个单击响应函数 var btn05 = document.getElementById(\"btn05\"); btn05.onclick = function() &#123; //返回#city的所有子节点 //获取id为city的元素 var city = document.getElementById(\"city\"); /* 获取city下的所有节点: * 这其中包括文本节点 * 空白字符(换行、空格等)也算文本节点 */ var nodes = city.children; //若我们只是想获取所有子元素(即HTML标签)可以这样 nodes = city.childNodes; for(var i = 0; i &lt; nodes.length; i++) &#123; alert(nodes[i]); &#125; &#125;;&#125; 3.firstChildfirstChild属性, 获取当前元素的第一个子节点(包括空白文本节点) firstElementChild属性(IE9+), 获取当前元素的第一个子元素 123456789101112window.onload = function() &#123; //为id为btn06的按钮绑定一个单击响应函数 var btn06 = document.getElementById(\"btn06\"); btn06.onclick = function() &#123; //返回#phone的第一个子节点 //获取id为phone的元素 var phone = document.getElementById(\"phone\"); var first = phone.firstChild; alert(first); //若HTML代码被格式化了,上面输出为:object Text &#125;;&#125; lastChild和firstChild属性类似 三.获取父节点和兄弟节点 属性 描述 parentNode 表示当前节点的父节点 previousSibling 表示当前节点的前一个兄弟节点 nextSibling 表示当前节点的后一个兄弟节点 1.parentNode观察上述代码, 我们做了大量的重复性工作: 先获取到指定id的按钮, 再给该按钮添加一个单击响应函数. 可以考虑将这两个过程封装成一个函数. 1234567891011121314151617function myClick(id,fun)&#123; var btn = document.getElementById(id); btn.onclick = fun;&#125;window.onload = function() &#123; //获取id为btn07的按钮并为其绑定一个单击响应函数 var btn07 = myClick(\"btn07\",function()&#123; //返回#bj的父节点,注意:父节点一定是元素即标签 var bj = document.getElementById(\"bj\"); var bjParent = bj.parentNode; //alert(bjParent.innerHTML);//获取元素的HTML代码 /* innerText属性:获取元素内部的文本内容 * 它会自动将innerHTML中的HTML标签去掉 */ alert(bjParent.innerText); &#125;);&#125; 2.previousSiblingpreviousSibling属性, 获取前一个兄弟节点(包括空白文本节点) previousElementSibling属性(IE9+), 获取前一个兄弟元素 123456789window.onload = function() &#123; //获取id为btn08的按钮并为其绑定一个单击响应函数 var btn08 = myClick(\"btn08\",function()&#123; //返回#android的前一个兄弟节点 var android = document.getElementById(\"android\"); var ardPre = android.previousSibling; alert(ardPre); &#125;);&#125; nextSibling属性和previousSibling属性类似","categories":[{"name":"JS","slug":"JS","permalink":"http://crainyday.gitee.io/blog/categories/JS/"}],"tags":[{"name":"JS","slug":"JS","permalink":"http://crainyday.gitee.io/blog/tags/JS/"}]},{"title":"JSDOM简介","slug":"JSDOM1-0","date":"2019-04-05T06:03:12.000Z","updated":"2019-04-05T15:48:38.915Z","comments":true,"path":"JSDOM1-0.html","link":"","permalink":"http://crainyday.gitee.io/blog/JSDOM1-0.html","excerpt":"JS中的宿主对象, JSDOM","text":"JS中的宿主对象, JSDOM 一.DOM简介1.什么是DOM DOM, 即Document Object Model 文档对象模型 JS中通过操作DOM来对HTML文档进行操作.只要了解DOM就可以随心所欲的操作WEB页面 文档: 表示的是整个HTML网页文档 对象: 表示将页面中的每一个部分(包括那些HTML标签)都转换为了对象. 模型: 表示对象(即HTML中的节点)之间的关系, 这样方便我们获取、操作对象. 2.节点 节点(也即对象): Node——构成html文档最基本的单元, 网页中的每个部分都可以称为一个节点 常用节点分为四类: ——①文档节点: 整个HTML文档(即document对象) ——②元素节点: HTML文档中的html标签 ——③属性节点: 元素的属性 ——④文本节点: HTML标签中的文本内容 节点的类型不同, 它们的属性也可能不同 节点的属性 nodeName nodeType nodeValue 文档节点 #document 9 null 元素节点 标签名 1 null 属性节点 属性名 2 属性值 文本节点 #text 3 文本内容 练习: JS操纵网页中的按钮123456789101112&lt;body&gt; &lt;button id=\"btn\"&gt;我是一个按钮&lt;/button&gt; &lt;script type=\"text/javascript\"&gt; console.log(document);//object HTMLDocument //获取button对象 var btn = document.getElementById(\"btn\"); console.log(btn);//object HTMLButtonElement console.log(btn.innerHTML);//我是一个按钮 //修改按钮的文字 btn.innerHTML = \"I'm a button\"; &lt;/script&gt;&lt;/body&gt; 二.事件 事件, 即文档或浏览器窗口发生的一些特定的交互瞬间, 用户和浏览器之间的交互行为 比如: 点击按钮、鼠标移动、关闭浏览器窗口…… 我们往往比较关注对事件的处理, 即响应事件 1.事件句柄 属性 此事件发生在何时 onabort 图像的加载被中断 onblur 元素失去焦点 onchange 域的内容被改变 onclick 当用户点击某个对象时调用的事件句柄 ondblclick 当用户双击某个对象时调用的事件句柄 onerror 在加载文档或图像时发生错误 onfocus 元素获得焦点 onkeydown 某个键盘按键被按下 onkeypress 某个键盘按键被按下并松开 onkeyup 某个键盘按键被松开 onload 一张页面或一幅图像完成加载 onmousedown 鼠标按钮被按下 onmousemove 鼠标被移动 onmouseout 鼠标从某元素移开 onmouseover 鼠标移到某元素之上 onmouseup 鼠标按键被松开 onreset 重置按钮被点击 onresize 窗口或框架被重新调整大小 onselect 文本被选中 onsubmit 确认按钮被点击 onunload 用户退出页面 2.设置事件属性我们可以在事件对应的属性中设置一些JS代码, 当该事件被触发时, 这些代码将会执行 1234&lt;!--鼠标被移动时触发--&gt;&lt;body&gt; &lt;button id=\"btn\" onmousemove=\"alert('讨厌,移到我上面干嘛~~~')\"&gt;我是一个按钮&lt;/button&gt;&lt;/body&gt; 注意: 这种响应方式, 结构与行为发生耦合, 不方便维护, 我们一般不这样使用. 3.绑定响应函数12345678910&lt;body&gt; &lt;!--双击某个对象时触发--&gt; &lt;button id=\"btn\"&gt;我是一个按钮&lt;/button&gt; &lt;script type=\"text/javascript\"&gt; var btn = document.getElementById(\"btn\"); btn.ondblclick = function()&#123; alert('讨厌,点我两下干嘛~~~'); &#125;; &lt;/script&gt;&lt;/body&gt; 或 123456789&lt;body&gt; &lt;!--单击某个对象时触发--&gt; &lt;button id=\"btn\" onclick=\"showMsg();\"&gt;我是一个按钮&lt;/button&gt; &lt;script type=\"text/javascript\"&gt; var showMsg = function()&#123; alert('讨厌,点我干嘛~~~'); &#125;; &lt;/script&gt;&lt;/body&gt; 三.文档的加载&emsp;&emsp;注意到, 我们上面的代码中, script标签都写在button标签之后, 为什么呢? 这与页面的加载顺序有关, 页面是顺序加载(自上往下)的, 假如把script标签写在button标签之前, 这时在script里获取button对象时获取不到button对象, 因为它还没被加载, 再为一个null添加一个事件就会报错. 故我们需要在该DOM对象加载之后再获取它, 要么把script标签放到要获取的DOM对象之后, 要么将获取及操作该DOM对象的JS代码放在window.onload事件的响应函数中. 1.onload事件 onload 事件会在页面或图像加载完成后立即发生, 该事件支持的JS对象: image, layer, window 先弹出消息对话框, 点击确定后, 再加载出按钮: 12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;title&gt;JSDOM&lt;/title&gt; &lt;script type=\"text/javascript\"&gt; alert(\"hello\"); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;button id=\"btn\"&gt;我是一个按钮&lt;/button&gt; &lt;/body&gt;&lt;/html&gt; 先加载出按钮, 再弹出消息对话框: 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;title&gt;JSDOM&lt;/title&gt; &lt;script type=\"text/javascript\"&gt; window.onload = function()&#123; alert(\"hello\"); &#125;; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;button id=\"btn\"&gt;我是一个按钮&lt;/button&gt; &lt;/body&gt;&lt;/html&gt; 个人觉得script标签写在DOM对象加载之后更好一些, 这样的话, 加载性能好点, 用户体验好. 但是现在的网速和浏览器内核已经很好了, 其实写在哪里没什么太大的差别.","categories":[{"name":"JS","slug":"JS","permalink":"http://crainyday.gitee.io/blog/categories/JS/"}],"tags":[{"name":"JS","slug":"JS","permalink":"http://crainyday.gitee.io/blog/tags/JS/"}]}]}